@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class P06_IACC_01_MainTest {

    private SecurityManager originalSecurityManager;

    @BeforeEach
    void setUp() {
        originalSecurityManager = System.getSecurityManager();
        System.setSecurityManager(new NoExitSecurityManager(originalSecurityManager));
    }

    @AfterEach
    void tearDown() {
        System.setSecurityManager(originalSecurityManager);
    }

    private void invokeExecute() throws Exception {
        Method executeMethod = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);
        executeMethod.invoke(null);
    }

    private int catchSystemExit(Runnable runnable) {
        try {
            runnable.run();
        } catch (NoExitSecurityManager.ExitException e) {
            return e.status;
        }
        return 0;
    }

    @Test
    void testNoArguments_shouldExit8() throws Exception {
        P06_IACC_01_Main.set_args(new String[]{});
        int code = catchSystemExit(this::invokeExecute);
        assertEquals(8, code);
    }

    @Test
    void testValidLevel1WithDates_shouldCallLevel1Execute() throws Exception {
        try (var props = mockStatic(P06_IACC_01_PropertiesMgr.class);
             var level1 = mockConstruction(P06_IACC_01_Level1.class, (mock, context) -> {
                 doNothing().when(mock).execute();
             })) {

            props.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");

            P06_IACC_01_Main.set_args(new String[]{
                "level1", "BEFOR", "01/01/2025 00:00:00", "01/01/2025 00:00:00", "02/01/2025 00:00:00"
            });

            int exitCode = catchSystemExit(this::invokeExecute);
            assertEquals(0, exitCode);
        }
    }

    @Test
    void testValidLevel1NoDates_shouldFetchFromDB() throws Exception {
        try (var props = mockStatic(P06_IACC_01_PropertiesMgr.class);
             var global = mockStatic(GlobalAtlentic.class);
             var utility = mockStatic(Pee_IACC_00_Utility.class);
             var level1 = mockConstruction(P06_IACC_01_Level1.class, (mock, context) -> {
                 doNothing().when(mock).execute();
             })) {

            props.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");
            props.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("level2");

            var mockMap = Map.of(
                "INTF_EVENT_DATE", "01/01/2025 00:00:00",
                "INTF_SYSTEM_BEGIN_DATE", "01/01/2025 00:00:00",
                "INTF_SYSTEM_END_DATE", "02/01/2025 00:00:00"
            );

            global.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mock(Connection.class));
            utility.when(() -> Pee_IACC_00_Utility.getAtlIntfDateByBranch(any(), any()))
                .thenReturn(mockMap);

            P06_IACC_01_Main.set_args(new String[]{"level1"});

            int exitCode = catchSystemExit(this::invokeExecute);
            assertEquals(0, exitCode);
        }
    }

    @Test
    void testLevel1_startAfterEnd_shouldExit8() throws Exception {
        try (var props = mockStatic(P06_IACC_01_PropertiesMgr.class)) {
            props.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");

            String[] args = {
                "level1", "BEFOR", "01/01/2025 00:00:00", "03/01/2025 00:00:00", "02/01/2025 00:00:00"
            };
            P06_IACC_01_Main.set_args(args);

            int exitCode = catchSystemExit(this::invokeExecute);
            assertEquals(8, exitCode);
        }
    }

    @Test
    void testLevel2WithFileName_shouldCallLevel2Execute() throws Exception {
        try (var props = mockStatic(P06_IACC_01_PropertiesMgr.class);
             var level2 = mockConstruction(P06_IACC_01_Level2.class, (mock, context) -> {
                 doNothing().when(mock).execute();
             })) {

            props.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");
            props.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("level2");

            String[] args = {"level2", "BEFOR", "01/01/2025 00:00:00", "report.txt"};
            P06_IACC_01_Main.set_args(args);

            int exitCode = catchSystemExit(this::invokeExecute);
            assertEquals(0, exitCode);
        }
    }

    @Test
    void testLevel2WithoutFileName_shouldCallLevel2Execute() throws Exception {
        try (var props = mockStatic(P06_IACC_01_PropertiesMgr.class);
             var level2 = mockConstruction(P06_IACC_01_Level2.class, (mock, context) -> {
                 doNothing().when(mock).execute();
             })) {

            props.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");
            props.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("level2");

            String[] args = {"level2", "BEFOR"};
            P06_IACC_01_Main.set_args(args);

            int exitCode = catchSystemExit(this::invokeExecute);
            assertEquals(0, exitCode);
        }
    }

    @Test
    void testMissingEventDate_shouldExit8() throws Exception {
        try (var props = mockStatic(P06_IACC_01_PropertiesMgr.class)) {
            props.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");

            P06_IACC_01_Main.set_args(new String[]{"level1"});
            int exitCode = catchSystemExit(this::invokeExecute);
            assertEquals(8, exitCode);
        }
    }
}
