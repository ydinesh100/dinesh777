import org.junit.Before;
import org.junit.Test;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.ResultSet;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

public class P06_IACC_01_Level1DBTransactionTest {

    private Object dbTransaction;
    private Object bean;
    private Class<?> beanClass;
    private ResultSet mockResultSet;

    @Before
    public void setUp() throws Exception {
        // 1. Instantiate P06_IACC_01_Level1DBTransaction via reflection
        Class<?> dbTransactionClass = Class.forName("your.package.name.P06_IACC_01_Level1DBTransaction"); // Replace package
        Constructor<?> dbConstructor = dbTransactionClass.getDeclaredConstructor();
        dbConstructor.setAccessible(true);
        dbTransaction = dbConstructor.newInstance();

        // 2. Instantiate P06_IACC_01_Level1Bean via reflection
        beanClass = Class.forName("your.package.name.P06_IACC_01_Level1Bean"); // Replace package
        Constructor<?> beanConstructor = beanClass.getDeclaredConstructor();
        beanConstructor.setAccessible(true);
        bean = beanConstructor.newInstance();

        // 3. Mock ResultSet
        mockResultSet = mock(ResultSet.class);
        when(mockResultSet.getString("CURRENCY")).thenReturn("INR");
        when(mockResultSet.getDouble("AMOUNT")).thenReturn(1500.75);
        when(mockResultSet.getInt("ID")).thenReturn(42);
    }

    @Test
    public void testPopulateBeanObjectUsingReflection() throws Exception {
        // 4. Call populateBeanObject(bean, resultSet) using reflection
        Method populateMethod = dbTransaction.getClass()
                .getDeclaredMethod("populateBeanObject", Object.class, ResultSet.class);
        populateMethod.setAccessible(true);
        populateMethod.invoke(dbTransaction, bean, mockResultSet);

        // 5. Verify values using reflection
        Field currencyField = beanClass.getDeclaredField("currency");
        currencyField.setAccessible(true);
        String currency = (String) currencyField.get(bean);
        assertEquals("INR", currency);

        Field amountField = beanClass.getDeclaredField("amount");
        amountField.setAccessible(true);
        double amount = (double) amountField.get(bean);
        assertEquals(1500.75, amount, 0.001);

        Field idField = beanClass.getDeclaredField("id");
        idField.setAccessible(true);
        int id = (int) idField.get(bean);
        assertEquals(42, id);
    }
}
