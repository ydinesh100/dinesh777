package com.bnpparibas.atlentic.iacc.bopr.main.test;

import com.bnpparibas.atlentic.common.gen.string.utilities.StringConverter;
import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.resource.P06_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;
import org.junit.jupiter.api.*;
import org.mockito.MockedConstruction;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.security.Permission;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class P06_IACC_01_MainTest {

    // === Exit trap ===
    static class ExitTrappedException extends SecurityException {
        final int status;
        ExitTrappedException(int status) {
            this.status = status;
        }
    }

    static class NoExitSecurityManager extends SecurityManager {
        private final SecurityManager original;
        NoExitSecurityManager(SecurityManager original) {
            this.original = original;
        }

        @Override public void checkPermission(Permission perm) {}
        @Override public void checkExit(int status) {
            throw new ExitTrappedException(status);
        }
    }

    SecurityManager originalSecurityManager;

    @BeforeEach
    void setup() {
        originalSecurityManager = System.getSecurityManager();
        System.setSecurityManager(new NoExitSecurityManager(originalSecurityManager));
    }

    @AfterEach
    void restoreSecurity() {
        System.setSecurityManager(originalSecurityManager);
    }

    private void setArgs(String[] args) throws Exception {
        Field argsField = P06_IACC_01_Main.class.getDeclaredField("args");
        argsField.setAccessible(true);
        argsField.set(null, args);
    }

    private void invokeExecute() throws Exception {
        Method m = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        m.setAccessible(true);
        m.invoke(null);
    }

    @Test
    void testExecute_Level1_shouldExit() throws Exception {
        String[] args = {"level1", "BE", "01/01/2025 10:00:00", "01/01/2025 11:00:00", "01/01/2025 12:00:00"};
        setArgs(args);

        try (
            var staticMock = mockStatic(P06_IACC_01_PropertiesMgr.class);
            var converterMock = mockStatic(StringConverter.class);
            MockedConstruction<P06_IACC_01_Level1> level1Mock = mockConstruction(P06_IACC_01_Level1.class,
                (mock, context) -> doNothing().when(mock).execute())
        ) {
            staticMock.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");
            staticMock.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("level2");

            converterMock.when(() -> StringConverter.StringToDate(anyString()))
                         .thenReturn(new Date());

            assertThrows(ExitTrappedException.class, this::invokeExecute);
        }
    }

    @Test
    void testExecute_Level2_shouldExit() throws Exception {
        String[] args = {"level2", "BE", "01/01/2025 10:00:00", "report.txt"};
        setArgs(args);

        try (
            var staticMock = mockStatic(P06_IACC_01_PropertiesMgr.class);
            var converterMock = mockStatic(StringConverter.class);
            MockedConstruction<P06_IACC_01_Level2> level2Mock = mockConstruction(P06_IACC_01_Level2.class,
                (mock, context) -> doNothing().when(mock).execute())
        ) {
            staticMock.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");
            staticMock.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("level2");

            converterMock.when(() -> StringConverter.StringToDate(anyString()))
                         .thenReturn(new Date());

            assertThrows(ExitTrappedException.class, this::invokeExecute);
        }
    }

    @Test
    void testExecute_invalidAction_shouldExit() throws Exception {
        String[] args = {"invalid", "BE", "01/01/2025 10:00:00"};
        setArgs(args);

        try (
            var staticMock = mockStatic(P06_IACC_01_PropertiesMgr.class);
            var converterMock = mockStatic(StringConverter.class)
        ) {
            staticMock.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");
            staticMock.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("level2");

            converterMock.when(() -> StringConverter.StringToDate(anyString()))
                         .thenReturn(new Date());

            assertThrows(ExitTrappedException.class, this::invokeExecute);
        }
    }
}
