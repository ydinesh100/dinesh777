import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Collections;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
class YourServiceTest {

    @InjectMocks
    private YourServiceClass service;

    @Mock
    private Connection mockConnection;

    @Mock
    private YourTransactionClass mockTransaction;

    @BeforeEach
    void setup() throws Exception {
        // Mock static methods
        mockStatic(GlobalAtlantic.class);
        mockStatic(DBUtils.class);

        when(GlobalAtlantic.getLoanIQConnection()).thenReturn(mockConnection);
        when(mockConnection.getAutoCommit()).thenReturn(true);
        doNothing().when(mockConnection).setAutoCommit(false);

        // Mock method calls
        when(service.getDataBaseTransaction()).thenReturn(mockTransaction);
        when(mockTransaction.getRecordsBeansList()).thenReturn(Collections.emptyList());

        doNothing().when(service).initializeDataBaseTransaction(mockConnection);
        doNothing().when(service).innerExecute();
        when(service.applyCommit()).thenReturn(true);
        when(service.getLevelNumber()).thenReturn(1);
    }

    @Test
    void testExecute_Successful() throws Exception {
        assertDoesNotThrow(() -> service.execute());

        verify(mockConnection).commit();
        verify(mockConnection, never()).rollback();
        verifyStatic(DBUtils.class);
        DBUtils.closeConnexion(mockConnection, null, null);
    }

    @Test
    void testExecute_IOException() throws Exception {
        doThrow(new IOException("I/O Error")).when(service).innerExecute();

        P06_IACC_01_ExitApplicationException ex = assertThrows(
            P06_IACC_01_ExitApplicationException.class,
            () -> service.execute()
        );

        assertTrue(ex.getMessage().contains("I/O Error"));
        verify(mockConnection).rollback();
    }

    @Test
    void testExecute_SQLException() throws Exception {
        doThrow(new SQLException("SQL Error")).when(service).innerExecute();

        P06_IACC_01_ExitApplicationException ex = assertThrows(
            P06_IACC_01_ExitApplicationException.class,
            () -> service.execute()
        );

        assertTrue(ex.getMessage().contains("SQL Error"));
        verify(mockConnection).rollback();
    }

    @Test
    void testExecute_WithNullConnectionOnError() throws Exception {
        mockStatic(GlobalAtlantic.class).when(GlobalAtlantic::getLoanIQConnection).thenReturn(null);

        doThrow(new SQLException("Connection error")).when(service).innerExecute();

        assertThrows(Exception.class, () -> service.execute());
        verifyStatic(DBUtils.class);
        DBUtils.closeConnexion(null, null, null);
    }
}
