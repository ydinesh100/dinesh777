class POO_IRSK_traceTest {

    private POO_IRSK_trace trace;

    @BeforeEach
    void setup() {
        trace = new POO_IRSK_trace();
    }

    @Test
    void testGetCommonLogInsertQuery_WithId() {
        String id = "123";
        String query = trace.getCommonLogInsertQuery(id);
        assertNotNull(query);
        assertTrue(query.contains("(?, ?, 'OMG', 'RISK', ?, sysdate)"), "Unexpected SQL when ID is provided");
    }

    @Test
    void testGetCommonLogInsertQuery_NullId() {
        String query = trace.getCommonLogInsertQuery(null);
        assertNotNull(query);
        assertTrue(query.contains("SEQ_COMMON_ID_LOG.nextval"), "Expected sequence usage when ID is null");
    }

    @Test
    void testSetParameters_WithId() throws Exception {
        Map<String, String> param = new HashMap<>();
        param.put(POO_IRSK_trace.ID, "123");
        param.put(POO_IRSK_trace.LEVEL, "INFO");
        param.put(POO_IRSK_trace.MESSAGE, "Test message");

        PreparedStatement ps = Mockito.mock(PreparedStatement.class);
        PreparedStatement result = trace.setParameters(ps, param);

        assertNotNull(result);
        Mockito.verify(ps).setString(1, "123");
        Mockito.verify(ps).setString(2, "INFO");
        Mockito.verify(ps).setString(3, "Test message");
    }

    @Test
    void testSetParameters_WithoutId_TriggersFatalExit() throws Exception {
        Map<String, String> param = new HashMap<>();
        param.put(POO_IRSK_trace.LEVEL, "ERROR");
        param.put(POO_IRSK_trace.MESSAGE, "Missing ID test");

        PreparedStatement ps = Mockito.mock(PreparedStatement.class);

        int status = catchSystemExit(() -> {
            trace.setParameters(ps, param);
        });

        assertEquals(8, status);
    }

    @Test
    void testFatalExit_WritesToFileAndExits() throws Exception {
        // Clean up log file before running test
        File logFile = new File("F00_IRSK_OX01.log");
        if (logFile.exists()) {
            logFile.delete();
        }

        int status = catchSystemExit(() -> {
            trace.fatalExit("testMethod", "IOException", "Something bad happened");
        });

        assertEquals(8, status);
        assertTrue(logFile.exists());

        String content = Files.readString(logFile.toPath());
        assertTrue(content.contains("testMethod"));
        assertTrue(content.contains("IOException"));
        assertTrue(content.contains("Something bad happened"));
    }
}
