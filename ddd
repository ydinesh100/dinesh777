import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class MyClassTest {

    // Test public method increment().
    @Test
    public void testIncrement() {
        MyClass instance = new MyClass();
        // First call increments count from 0 to 1.
        assertEquals(1, instance.increment());
        // Second call increments count to 2.
        assertEquals(2, instance.increment());
    }

    // Test public method multiply().
    @Test
    public void testMultiply() {
        MyClass instance = new MyClass();
        int result = instance.multiply(3, 4);
        assertEquals(12, result);
    }

    // Test that getCount() returns the expected value.
    @Test
    public void testGetCount() {
        MyClass instance = new MyClass();
        assertEquals(0, instance.getCount());
        instance.increment();
        instance.increment();  // count now should be 2.
        assertEquals(2, instance.getCount());
    }

    // Test the private method add() using reflection.
    @Test
    public void testPrivateAddMethod() throws Exception {
        MyClass instance = new MyClass();
        // Get the private method "add" with parameters int, int.
        Method privateAddMethod = MyClass.class.getDeclaredMethod("add", int.class, int.class);
        privateAddMethod.setAccessible(true); // Allow access despite its private visibility.
        // Invoke the method on our instance.
        int result = (int) privateAddMethod.invoke(instance, 5, 7);
        assertEquals(12, result);
    }

    // Test instantiation using reflection (in case the constructor is private).
    // If your constructor is public, this is still a useful check.
    @Test
    public void testConstructorViaReflection() throws Exception {
        Constructor<MyClass> constructor = MyClass.class.getDeclaredConstructor();
        constructor.setAccessible(true); // Allow access if it is private.
        MyClass instance = constructor.newInstance();
        assertNotNull(instance);
    }

    // Test private field "count" using reflection.
    @Test
    public void testPrivateFieldManipulation() throws Exception {
        MyClass instance = new MyClass();
        // Access the private field "count".
        Field countField = MyClass.class.getDeclaredField("count");
        countField.setAccessible(true);
        // Set the private field "count" directly.
        countField.set(instance, 100);
        // Validate that getCount() now returns 100.
        assertEquals(100, instance.getCount());
    }
}
