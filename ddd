package com.bnpparibas.atlentic.iacc.bopr.main;

import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.common.Pee_IACC_00_Utility;
import com.bnpparibas.atlentic.common.gen.string.utilities.StringConverter;
import com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.resource.P06_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ExitApplicationException;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ParameterException;

import org.junit.jupiter.api.*;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class P06_IACC_01_MainTest {

    private Method execute;

    @BeforeEach
    void setup() throws Exception {
        execute = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        execute.setAccessible(true);
    }

    @Test
    void testMissingArgs_throwsParameterException() {
        P06_IACC_01_Main.set_args(new String[]{});
        try (MockedStatic<System> sys = mockStatic(System.class)) {
            sys.when(() -> System.exit(anyInt()))
               .thenThrow(new ExitTrappedException());
            assertThrows(ExitTrappedException.class, () -> execute.invoke(null));
        }
    }

    @Test
    void testInvalidAction_throwsParameterException() throws Exception {
        String[] args = {"invalid", "BR", "01/01/2025 10:00:00"};
        P06_IACC_01_Main.set_args(args);

        try (
            MockedStatic<StringConverter> sc = mockStatic(StringConverter.class);
            MockedStatic<P06_IACC_01_PropertiesMgr> pm = mockStatic(P06_IACC_01_PropertiesMgr.class);
            MockedStatic<System> sys = mockStatic(System.class)
        ) {
            sc.when(() -> StringConverter.StringToDate(anyString()))
              .thenReturn(new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").parse(args[2]));
            pm.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("L1");
            pm.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("L2");
            sys.when(() -> System.exit(anyInt()))
               .thenThrow(new ExitTrappedException());

            assertThrows(ExitTrappedException.class, () -> execute.invoke(null));
        }
    }

    @Test
    void testLevel1WithoutDates_executesLevel1() throws Exception {
        String[] args = {"L1", "BR", "01/01/2025 10:00:00"};
        P06_IACC_01_Main.set_args(args);

        try (
            MockedStatic<StringConverter> sc = mockStatic(StringConverter.class);
            MockedStatic<P06_IACC_01_PropertiesMgr> pm = mockStatic(P06_IACC_01_PropertiesMgr.class);
            MockedStatic<P06_IACC_01_Level1> l1Mock = mockStatic(P06_IACC_01_Level1.class);
            MockedStatic<System> sys = mockStatic(System.class)
        ) {
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            Date dt = sdf.parse(args[2]);
            sc.when(() -> StringConverter.StringToDate(anyString())).thenReturn(dt);
            pm.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("L1");
            pm.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("L2");

            P06_IACC_01_Level1 l1 = mock(P06_IACC_01_Level1.class);
            l1Mock.when(P06_IACC_01_Level1::new).thenReturn(l1);

            sys.when(() -> System.exit(0)).thenThrow(new ExitTrappedException());

            assertThrows(ExitTrappedException.class, () -> execute.invoke(null));
            verify(l1).execute();
        }
    }

    @Test
    void testLevel2_executesLevel2() throws Exception {
        String[] args = {"L2", "BR", "01/01/2025 10:00:00", "FILE"};
        P06_IACC_01_Main.set_args(args);

        try (
            MockedStatic<StringConverter> sc = mockStatic(StringConverter.class);
            MockedStatic<P06_IACC_01_PropertiesMgr> pm = mockStatic(P06_IACC_01_PropertiesMgr.class);
            MockedStatic<P06_IACC_01_Level2> l2Mock = mockStatic(P06_IACC_01_Level2.class);
            MockedStatic<System> sys = mockStatic(System.class)
        ) {
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            Date dt = sdf.parse(args[2]);
            sc.when(() -> StringConverter.StringToDate(anyString())).thenReturn(dt);
            pm.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("L1");
            pm.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("L2");

            P06_IACC_01_Level2 l2 = mock(P06_IACC_01_Level2.class);
            l2Mock.when(P06_IACC_01_Level2::new).thenReturn(l2);

            sys.when(() -> System.exit(0)).thenThrow(new ExitTrappedException());

            assertThrows(ExitTrappedException.class, () -> execute.invoke(null));
            verify(l2).execute();
        }
    }

    @Test
    void testSQLException_inExtracted1_leadsToExit() throws Exception {
        // trigger path where extractedi() calls getDateConfigDate()
        String[] args = {"L1", "BR"};
        P06_IACC_01_Main.set_args(args);

        try (
            MockedStatic<GlobalAtlentic> ga = mockStatic(GlobalAtlentic.class);
            MockedStatic<Pee_IACC_00_Utility> pu = mockStatic(Pee_IACC_00_Utility.class);
            MockedStatic<P06_IACC_01_PropertiesMgr> pm = mockStatic(P06_IACC_01_PropertiesMgr.class);
            MockedStatic<System> sys = mockStatic(System.class)
        ) {
            ga.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mock(Connection.class));
            pu.when(() -> Pee_IACC_00_Utility.getAtlIntfDateByBranch(any(), any()))
              .thenThrow(new SQLException("fail"));

            sys.when(() -> System.exit(anyInt()))
               .thenThrow(new ExitTrappedException());

            assertThrows(ExitTrappedException.class, () -> execute.invoke(null));
        }
    }

    // Utility to trap calls to System.exit
    private static class ExitTrappedException extends RuntimeException { }
}

@Test
void testInvalidAction_throwsParameterException() throws Exception {
    String[] args = {"invalid", "BR", "01/01/2025 10:00:00"};
    P06_IACC_01_Main.set_args(args);

    try (
        MockedStatic<StringConverter> sc = mockStatic(StringConverter.class);
        MockedStatic<P06_IACC_01_PropertiesMgr> pm = mockStatic(P06_IACC_01_PropertiesMgr.class);
        MockedStatic<System> sys = mockStatic(System.class)
    ) {
        Date eventDate = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").parse(args[2]);

        // Required mocks
        sc.when(() -> StringConverter.StringToDate(args[2])).thenReturn(eventDate);
        pm.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("L1");
        pm.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("L2");

        // Required to avoid JVM termination
        sys.when(() -> System.exit(anyInt()))
           .thenThrow(new ExitTrappedException());

        assertThrows(ExitTrappedException.class, () -> execute.invoke(null));
    }
}
