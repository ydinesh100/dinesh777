package com.bnpparibas.atlentic.iacc.bopr.main;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

import java.lang.reflect.*;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ParameterException;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ExitApplicationException;

class P06_IACC_01_MainTest {

    private static final Class<?> MAIN_CLAZZ = P06_IACC_01_Main.class;

    // helper to set private static fields
    private void setStaticField(String name, Object value) throws Exception {
        Field f = MAIN_CLAZZ.getDeclaredField(name);
        f.setAccessible(true);
        f.set(null, value);
    }

    @BeforeEach
    void resetAll() throws Exception {
        for (String fld : new String[]{"args","action","branch","eventTimestamp","beginDate","endDate","textFileName"}) {
            Field f = MAIN_CLAZZ.getDeclaredField(fld);
            f.setAccessible(true);
            f.set(null, null);
        }
    }

    private void invokeExecuteExpecting(Class<? extends Throwable> causeType, String messagePart) throws Exception {
        Method m = MAIN_CLAZZ.getDeclaredMethod("execute");
        m.setAccessible(true);
        InvocationTargetException ex = assertThrows(InvocationTargetException.class, () -> m.invoke(null));
        Throwable cause = ex.getCause();
        assertNotNull(cause);
        assertTrue(causeType.isInstance(cause));
        if (messagePart != null) {
            assertTrue(cause.getMessage().contains(messagePart));
        }
    }

    @Test
    void testNoArgsThrowsParameterException() throws Exception {
        setStaticField("args", new String[]{});
        invokeExecuteExpecting(P06_IACC_01_ParameterException.class, "Wrong parameters number");
    }

    @Test
    void testInvalidDateFormatThrowsParameterException() throws Exception {
        setStaticField("args", new String[]{"level1","BR01","bad-date"});
        invokeExecuteExpecting(P06_IACC_01_ParameterException.class, "process date format is unknown");
    }

    @Test
    void testUnknownActionThrowsParameterException() throws Exception {
        // valid date format but unknown action
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        String dateStr = sdf.format(new Date());
        setStaticField("args", new String[]{"fooAction","BR01", dateStr});
        invokeExecuteExpecting(P06_IACC_01_ParameterException.class, "action \"fooAction\" is unknown");
    }

    @Test
    void testLevel1WithInsufficientDates() throws Exception {
        // assume getLevel1ActionName() returns "level1"
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        String dateStr = sdf.format(new Date());
        String action = P06_IACC_01_PropertiesMgr.getLevel1ActionName();
        setStaticField("args", new String[]{action, "BR01", dateStr});
        invokeExecuteExpecting(P06_IACC_01_ParameterException.class, "Wrong parameters number for level 1 action");
    }

    @Test
    void testLevel2WithNoFileNameThrows() throws Exception {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        String dateStr = sdf.format(new Date());
        String action = P06_IACC_01_PropertiesMgr.getLevel2ActionName();
        setStaticField("args", new String[]{action, "BR01", dateStr});
        invokeExecuteExpecting(P06_IACC_01_ParameterException.class, "Wrong parameters number for level 2 action");
    }

    @Test
    void testLevel2HappyPath() throws Exception {
        // Provide valid args for level2
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        String dateStr = sdf.format(new Date());
        String action = P06_IACC_01_PropertiesMgr.getLevel2ActionName();
        setStaticField("args", new String[]{action,"BR01",dateStr,"output.txt"});
        // Reflection: catch exit via InvocationTarget if any
        Method m = MAIN_CLAZZ.getDeclaredMethod("execute");
        m.setAccessible(true);
        try {
            m.invoke(null);
        } catch (InvocationTargetException e) {
            Throwable cause = e.getCause();
            assertTrue(cause == null || cause instanceof P06_IACC_01_ExitApplicationException);
        }
    }

    @Test
    void testLevel1HappyPathWithSystemDates() throws Exception {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        String now = sdf.format(new Date());
        String action = P06_IACC_01_PropertiesMgr.getLevel1ActionName();
        setStaticField("args", new String[]{action,"BR01",now,"01/01/2024 00:00:00","02/01/2024 00:00:00"});
        Method m = MAIN_CLAZZ.getDeclaredMethod("execute");
        m.setAccessible(true);
        try {
            m.invoke(null);
        } catch (InvocationTargetException e) {
            Throwable c = e.getCause();
            assertTrue(c == null || c instanceof P06_IACC_01_ExitApplicationException);
        }
    }
}
