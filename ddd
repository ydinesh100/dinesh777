import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.common.utils.DBUtils;
import com.bnpparibas.atlentic.irep.ecb.bean.P06_IREP_01_EcbRecordBean;
import com.bnpparibas.atlentic.irep.ecb.level.P06_IREP_01_DBTransaction;
import com.bnpparibas.atlentic.irep.ecb.level.P06_IREP_01_Level;
import com.bnpparibas.atlentic.irep.ecb.main.P06_IREP_01_Main;
import com.bnpparibas.atlentic.irep.ecb.util.exception.P06_IREP_01_ExitApplicationException;
import com.bnpparibas.atlentic.irep.ecb.util.exception.P06_IREP_01_SQLException;

import org.junit.*;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.*;

import static org.mockito.Mockito.*;

public class P06_IREP_01_LevelTest {

    private Connection mockConnection;
    private TestTransaction mockTransaction;
    private P06_IREP_01_Level<TestTransaction> levelInstance;
    private List<P06_IREP_01_EcbRecordBean> dummyRecordBeans;

    private MockedStatic<GlobalAtlentic> globalAtlenticMock;
    private MockedStatic<DBUtils> dbUtilsMock;

    @Before
    public void setup() throws Exception {
        mockConnection = mock(Connection.class);
        mockTransaction = mock(TestTransaction.class);

        dummyRecordBeans = new ArrayList<>();

        // Mock static methods
        globalAtlenticMock = Mockito.mockStatic(GlobalAtlentic.class);
        globalAtlanticMock.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mockConnection);

        dbUtilsMock = Mockito.mockStatic(DBUtils.class);

        // Stub static fields
        P06_IREP_01_Main.g_s_branch = "BR001";
        P06_IREP_01_Main.g_o_eventTimestamp = new Date();

        when(mockTransaction.getRecordsBeansList(anyString(), any())).thenReturn(dummyRecordBeans);

        // Create a concrete implementation of the abstract class
        levelInstance = new P06_IREP_01_Level<TestTransaction>() {
            @Override
            protected void innerExecute() {
                // no-op
            }

            @Override
            protected int getLevelNumber() {
                return 1;
            }

            @Override
            protected void initializeDataBaseTransaction(Connection connection) {
                this.g_o_dataBaseTransaction = mockTransaction;
            }

            @Override
            protected boolean applyCommit() {
                return true;
            }
        };
    }

    @After
    public void tearDown() {
        globalAtlenticMock.close();
        dbUtilsMock.close();
    }

    @Test
    public void testExecute_shouldRunSuccessfully() throws Exception {
        // Act
        levelInstance.execute();

        // Assert
        verify(mockConnection).setAutoCommit(false);
        verify(mockTransaction).getRecordsBeansList(eq("BR001"), any(Date.class));
        verify(mockConnection).commit();
        dbUtilsMock.verify(() -> DBUtils.closeConnexion(eq(mockConnection), isNull(), isNull()));
    }

    // Create a test-specific interface that satisfies the generic bound
    public interface TestTransaction extends P06_IREP_01_DBTransaction {
        List<P06_IREP_01_EcbRecordBean> getRecordsBeansList(String branch, Date timestamp)
                throws P06_IREP_01_SQLException;
    }
}
