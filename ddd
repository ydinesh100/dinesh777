package com.bnpparibas.atlentic.iacc.bopr.main.test;

import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import org.junit.jupiter.api.*;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.security.Permission;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;

class P06_IACC_01_MainTest {

    private static SecurityManager originalSecurityManager;

    @BeforeAll
    static void backupSecurityManager() {
        originalSecurityManager = System.getSecurityManager();
    }

    @AfterAll
    static void restoreSecurityManager() {
        System.setSecurityManager(originalSecurityManager);
    }

    @BeforeEach
    void resetStatics() throws Exception {
        String[] fields = { "args", "branch", "action", "eventTimestamp", "beginDate", "endDate", "textFileName" };
        for (String field : fields) {
            Field f = P06_IACC_01_Main.class.getDeclaredField(field);
            f.setAccessible(true);
            f.set(null, null);
        }
    }

    @Test
    void testInvalidParameterExceptionHandling_exitsWith5() throws Exception {
        String[] invalidArgs = new String[]{};

        Method setArgsMethod = P06_IACC_01_Main.class.getDeclaredMethod("set_args", String[].class);
        setArgsMethod.setAccessible(true);
        setArgsMethod.invoke(null, (Object) invalidArgs);

        Method executeMethod = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);

        System.setSecurityManager(new NoExitSecurityManager());

        ExitTrappedException ex = assertThrows(ExitTrappedException.class, () -> executeMethod.invoke(null));
        assertEquals(5, ex.getStatus()); // Should exit with code 5
    }

    @Test
    void testEventTimestampGetterSetterViaReflection() throws Exception {
        Date now = new Date();

        Method setter = P06_IACC_01_Main.class.getDeclaredMethod("setG_o_eventTimestamp", Date.class);
        Method getter = P06_IACC_01_Main.class.getDeclaredMethod("getG_o_eventTimestamp");
        setter.setAccessible(true);
        getter.setAccessible(true);

        setter.invoke(null, now);
        Date result = (Date) getter.invoke(null);

        assertEquals(now, result);
    }

    @Test
    void testBeginDateGetterSetterViaReflection() throws Exception {
        Date now = new Date();

        Method setter = P06_IACC_01_Main.class.getDeclaredMethod("setG_o_beginDate", Date.class);
        Method getter = P06_IACC_01_Main.class.getDeclaredMethod("getG_o_beginDate");
        setter.setAccessible(true);
        getter.setAccessible(true);

        setter.invoke(null, now);
        Date result = (Date) getter.invoke(null);

        assertEquals(now, result);
    }

    @Test
    void testEndDateGetterSetterViaReflection() throws Exception {
        Date now = new Date();

        Method setter = P06_IACC_01_Main.class.getDeclaredMethod("setG_o_endDate", Date.class);
        Method getter = P06_IACC_01_Main.class.getDeclaredMethod("getG_o_endDate");
        setter.setAccessible(true);
        getter.setAccessible(true);

        setter.invoke(null, now);
        Date result = (Date) getter.invoke(null);

        assertEquals(now, result);
    }

    @Test
    void testSetArgsAndTextFileNameFieldAccess() throws Exception {
        String[] inputArgs = new String[] { "level1", "branch", "10/10/2023 10:00:00" };

        Method setArgs = P06_IACC_01_Main.class.getDeclaredMethod("set_args", String[].class);
        setArgs.setAccessible(true);
        setArgs.invoke(null, (Object) inputArgs);

        Field textFileNameField = P06_IACC_01_Main.class.getDeclaredField("textFileName");
        textFileNameField.setAccessible(true);
        textFileNameField.set(null, "report.txt");

        Method getTextFileName = P06_IACC_01_Main.class.getDeclaredMethod("getG_s_textFileName");
        getTextFileName.setAccessible(true);

        String result = (String) getTextFileName.invoke(null);
        assertEquals("report.txt", result);
    }

    @Test
    void testSetBranchFieldDirectly() throws Exception {
        Field branchField = P06_IACC_01_Main.class.getDeclaredField("branch");
        branchField.setAccessible(true);
        branchField.set(null, "HYD");

        Method getBranch = P06_IACC_01_Main.class.getDeclaredMethod("getG_s_branch");
        getBranch.setAccessible(true);

        String result = (String) getBranch.invoke(null);
        assertEquals("HYD", result);
    }

    // Custom SecurityManager to intercept System.exit
    static class NoExitSecurityManager extends SecurityManager {
        @Override
        public void checkPermission(Permission perm) {
            // allow everything else
        }

        @Override
        public void checkExit(int status) {
            throw new ExitTrappedException(status);
        }
    }

    static class ExitTrappedException extends SecurityException {
        private final int status;

        public ExitTrappedException(int status) {
            super("Intercepted System.exit(" + status + ")");
            this.status = status;
        }

        public int getStatus() {
            return status;
        }
    }
}
