package com.bnpparibas.atlentic.iacc.bopr.main.test;

import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ExitApplicationException;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ParameterException;
import com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.resource.P06_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.common.GlobalAtlentic;

import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;

import java.lang.reflect.*;
import java.sql.Connection;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class P06_IACC_01_MainTest {

    @Mock
    private Connection mockConnection;

    @Before
    public void setup() throws Exception {
        // Mock static methods if needed using reflection
        Field eventDateField = P06_IACC_01_Main.class.getDeclaredField("g_o_eventTimestamp");
        eventDateField.setAccessible(true);
        eventDateField.set(null, new Date());
    }

    @Test
    public void testMainExecution_Level1ValidArguments() throws Exception {
        String[] args = {"level1", "BR", "12/06/2025 10:00:00", "11/06/2025 10:00:00", "13/06/2025 10:00:00"};

        mockStaticPropertyValues("level.1.action.name", "level1");

        Method mainMethod = P06_IACC_01_Main.class.getDeclaredMethod("main", String[].class);
        mainMethod.invoke(null, (Object) args);

        assertNotNull(P06_IACC_01_Main.getG_s_branch());
    }

    @Test
    public void testMainExecution_Level2ValidArguments() throws Exception {
        String[] args = {"level2", "BR", "12/06/2025 10:00:00", "file.txt"};

        mockStaticPropertyValues("level.2.action.name", "level2");

        Method mainMethod = P06_IACC_01_Main.class.getDeclaredMethod("main", String[].class);
        mainMethod.invoke(null, (Object) args);

        assertEquals("file.txt", P06_IACC_01_Main.getG_s_textFileName());
    }

    @Test(expected = InvocationTargetException.class)
    public void testMainExecution_InvalidArgs_ThrowsException() throws Exception {
        String[] args = {};

        Method mainMethod = P06_IACC_01_Main.class.getDeclaredMethod("main", String[].class);
        mainMethod.invoke(null, (Object) args);
    }

    private void mockStaticPropertyValues(String key, String value) throws Exception {
        Class<?> propClass = P06_IACC_01_PropertiesMgr.class;

        Field bundleField = propClass.getDeclaredField("g_o_boprPropertiesBundle");
        bundleField.setAccessible(true);

        ResourceBundle mockBundle = mock(ResourceBundle.class);
        when(mockBundle.getString(key)).thenReturn(value);

        bundleField.set(null, mockBundle);
    }
}
