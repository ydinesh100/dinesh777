package com.bnpparibas.atlentic.irep.ecb.level.test;

import static org.mockito.Mockito.*;

import java.io.IOException;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.common.utils.DBUtils;
import com.bnpparibas.atlentic.irep.ecb.bean.P06_IREP_01_EcbRecordBean;
import com.bnpparibas.atlentic.irep.ecb.level.P06_IREP_01_DBTransaction;
import com.bnpparibas.atlentic.irep.ecb.level.P06_IREP_01_Level;
import com.bnpparibas.atlentic.irep.ecb.main.P06_IREP_01_Main;
import com.bnpparibas.atlentic.irep.ecb.util.exception.P06_IREP_01_ExitApplicationException;
import com.bnpparibas.atlentic.irep.ecb.util.exception.P06_IREP_01_SQLException;

import org.junit.*;
import org.mockito.*;

public class P06_IREP_01_LevelTest {

    private P06_IREP_01_Level<P06_IREP_01_DBTransaction> levelInstance;
    private P06_IREP_01_DBTransaction mockTransaction;
    private Connection mockConnection;
    private List<P06_IREP_01_EcbRecordBean> fakeRecordBeans;

    @Before
    public void setUp() throws Exception {
        mockTransaction = mock(P06_IREP_01_DBTransaction.class);
        mockConnection = mock(Connection.class);
        fakeRecordBeans = new ArrayList<>();

        // Mock static methods: GlobalAtlentic.getLoanIQConnection() and DBUtils.closeConnexion()
        MockedStatic<GlobalAtlentic> globalAtlenticMock = Mockito.mockStatic(GlobalAtlentic.class);
        globalAtlenticMock.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mockConnection);

        MockedStatic<DBUtils> dbUtilsMock = Mockito.mockStatic(DBUtils.class);

        // Set up dummy static values used in execute()
        P06_IREP_01_Main.g_s_branch = "BR001";
        P06_IREP_01_Main.g_o_eventTimestamp = new Date();

        // Stub getRecordsBeansList()
        doReturn(fakeRecordBeans).when(mockTransaction).getRecordsBeansList(anyString(), any(Date.class));

        // Anonymous subclass of abstract Level class
        levelInstance = new P06_IREP_01_Level<P06_IREP_01_DBTransaction>() {
            @Override
            protected void innerExecute() throws P06_IREP_01_SQLException, IOException, P06_IREP_01_ExitApplicationException {
                // do nothing
            }

            @Override
            protected int getLevelNumber() {
                return 1;
            }

            @Override
            protected void initializeDataBaseTransaction(Connection connection) {
                this.g_o_dataBaseTransaction = mockTransaction;
            }

            @Override
            protected boolean applyCommit() {
                return true;
            }
        };
    }

    @Test
    public void testExecute_shouldRunSuccessfully() throws Exception {
        // Call the method under test
        levelInstance.execute();

        // Verify that methods were invoked as expected
        verify(mockConnection).setAutoCommit(false);
        verify(mockTransaction).getRecordsBeansList(anyString(), any(Date.class));
        verify(mockConnection).commit();
    }
}
