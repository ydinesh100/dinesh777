package com.bnpparibas.atlentic.irep.ecb.levell.test;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Calendar;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;

import com.bnpparibas.atlentic.common.Outils;
import com.bnpparibas.atlentic.irep.ecb.levell.P06_IREP_01_Level1DBTransaction;
import com.bnpparibas.atlentic.irep.ecb.resource.P06_IREP_01_PropertiesMgr;
import com.bnpparibas.atlentic.irep.ecb.util.exception.P06_IREP_01_SQLException;

@ExtendWith(MockitoExtension.class)
class P06_IREP_01_Level1DBTransactionTest {

    @Mock
    private Connection mockConnection;

    @Mock
    private PreparedStatement mockPreparedStatement;

    private P06_IREP_01_Level1DBTransaction dbTransaction;

    @BeforeEach
    void setUp() throws Exception {
        Constructor<P06_IREP_01_Level1DBTransaction> constructor =
                P06_IREP_01_Level1DBTransaction.class.getDeclaredConstructor(Connection.class);
        constructor.setAccessible(true);
        dbTransaction = constructor.newInstance(mockConnection);
    }

    @Test
    void testDeleteConcurrentRecords_success() throws Exception {
        // Arrange
        String branchCode = "BR001";
        java.util.Date eventDate = new java.util.Date();
        Timestamp expectedTimestamp = Outils.getSqlTimestamp(eventDate);
        String query = "DELETE FROM TABLE WHERE cde_branch = ? AND dte_event = ?";

        try (MockedStatic<P06_IREP_01_PropertiesMgr> mockedProps = mockStatic(P06_IREP_01_PropertiesMgr.class)) {
            mockedProps.when(() ->
                P06_IREP_01_PropertiesMgr.getQueryFromPropertiesFile("delete.concurrent.records")
            ).thenReturn(query);

            when(mockConnection.prepareStatement(query)).thenReturn(mockPreparedStatement);
            when(mockPreparedStatement.executeUpdate()).thenReturn(1);

            Method method = P06_IREP_01_Level1DBTransaction.class.getDeclaredMethod(
                    "deleteConcurrentRecords", String.class, java.util.Date.class);
            method.setAccessible(true);

            // Act
            method.invoke(dbTransaction, branchCode, eventDate);

            // Assert
            verify(mockPreparedStatement).setString(1, branchCode);
            verify(mockPreparedStatement).setTimestamp(2, expectedTimestamp);
            verify(mockPreparedStatement).executeUpdate();
            verify(mockPreparedStatement).close(); // indirectly from DBUtils.closeConnexion
        }
    }

    @Test
    void testDeleteConcurrentRecords_sqlException() throws Exception {
        // Arrange
        String branchCode = "BR001";
        java.util.Date eventDate = new java.util.Date();
        String query = "DELETE FROM TABLE WHERE cde_branch = ? AND dte_event = ?";

        try (MockedStatic<P06_IREP_01_PropertiesMgr> mockedProps = mockStatic(P06_IREP_01_PropertiesMgr.class)) {
            mockedProps.when(() ->
                P06_IREP_01_PropertiesMgr.getQueryFromPropertiesFile("delete.concurrent.records")
            ).thenReturn(query);

            when(mockConnection.prepareStatement(query)).thenThrow(new SQLException("DB error"));

            Method method = P06_IREP_01_Level1DBTransaction.class.getDeclaredMethod(
                    "deleteConcurrentRecords", String.class, java.util.Date.class);
            method.setAccessible(true);

            // Act + Assert
            InvocationTargetException exception = assertThrows(
                    InvocationTargetException.class,
                    () -> method.invoke(dbTransaction, branchCode, eventDate)
            );

            Throwable cause = exception.getCause();
            assertTrue(cause instanceof P06_IREP_01_SQLException);
            assertEquals("An error occurred while deleting concurrent records in database !", cause.getMessage());
        }
    }
}
