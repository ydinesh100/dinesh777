@Test
void testDeleteConcurrentRecords() throws Exception {
    // Arrange
    String branchCode = "BR001";
    Date eventDate = new Date();
    Timestamp sqlTimestamp = Outils.getSqlTimestamp(eventDate);

    // Mock the property and the prepared statement
    String expectedSql = "DELETE FROM TABLE WHERE cde_branch = ? AND dte_event = ?";
    mockStatic(P06_IREP_01_PropertiesMgr.class).when(() ->
        P06_IREP_01_PropertiesMgr.getProperty("delete.concurrent.records")
    ).thenReturn(expectedSql);

    when(mockConnection.prepareStatement(expectedSql)).thenReturn(mockPreparedStatement);
    when(mockPreparedStatement.executeUpdate()).thenReturn(1);

    // Get method using reflection
    Method method = P06_IREP_01_Level1DBTransaction.class.getDeclaredMethod(
        "deleteConcurrentRecords", String.class, Date.class
    );
    method.setAccessible(true);

    // Act
    method.invoke(dbTransaction, branchCode, eventDate);

    // Assert
    verify(mockPreparedStatement).setString(1, branchCode);
    verify(mockPreparedStatement).setTimestamp(2, sqlTimestamp);
    verify(mockPreparedStatement).executeUpdate();
    verify(mockPreparedStatement).close(); // optional depending on DBUtils.closeConnexion
}
