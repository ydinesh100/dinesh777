package com.bnpparibas.atlentic.iacc.bopr.main;

import com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.resource.P06_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.common.Pea_IACC_00_Utility;
import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.common.gen.string.utilities.StringConverter;

import org.junit.*;
import org.mockito.MockedStatic;

import java.lang.reflect.*;
import java.sql.Connection;
import java.util.*;

import static org.mockito.Mockito.*;

public class P06_IACC_01_MainTest {

    private MockedStatic<P06_IACC_01_PropertiesMgr> propertiesMgrMock;
    private MockedStatic<StringConverter> stringConverterMock;
    private MockedStatic<GlobalAtlentic> globalAtlenticMock;
    private MockedStatic<Pea_IACC_00_Utility> utilityMock;

    private final Date dummyDate = new Date();

    @Before
    public void setUp() throws Exception {
        propertiesMgrMock = mockStatic(P06_IACC_01_PropertiesMgr.class);
        stringConverterMock = mockStatic(StringConverter.class);
        globalAtlenticMock = mockStatic(GlobalAtlentic.class);
        utilityMock = mockStatic(Pea_IACC_00_Utility.class);
    }

    @After
    public void tearDown() {
        propertiesMgrMock.close();
        stringConverterMock.close();
        globalAtlenticMock.close();
        utilityMock.close();
    }

    @Test
    public void testExecute_Level1_WithValidArgs() throws Exception {
        // Arrange
        String[] args = {"level1", "TESTBR", "01/01/2024 00:00:00", "01/01/2024 00:00:00", "02/01/2024 00:00:00"};
        Object mainInstance = createMainInstance(args);

        propertiesMgrMock.when(P06_IACC_01_PropertiesMgr::getLevellActionName).thenReturn("level1");

        stringConverterMock.when(() -> StringConverter.StringToDate(anyString())).thenReturn(dummyDate);

        // Mock Level1 execute()
        P06_IACC_01_Level1 level1Mock = mock(P06_IACC_01_Level1.class);
        Constructor<P06_IACC_01_Level1> constructor = P06_IACC_01_Level1.class.getDeclaredConstructor();
        constructor.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        // Replace the constructor with a mock using reflection (or assume the class can be overridden)

        // Act
        Method executeMethod = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);
        executeMethod.invoke(mainInstance);

        // Assert
        // Expecting no exception and valid path execution
    }

    @Test
    public void testExecute_Level2_WithFilename() throws Exception {
        // Arrange
        String[] args = {"level2", "TESTBR", "01/01/2024 00:00:00", "file.txt"};
        Object mainInstance = createMainInstance(args);

        propertiesMgrMock.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("level2");
        stringConverterMock.when(() -> StringConverter.StringToDate(anyString())).thenReturn(dummyDate);

        // Mock Level2 execute()
        P06_IACC_01_Level2 level2Mock = mock(P06_IACC_01_Level2.class);
        Constructor<P06_IACC_01_Level2> constructor = P06_IACC_01_Level2.class.getDeclaredConstructor();
        constructor.setAccessible(true);

        // Act
        Method executeMethod = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);
        executeMethod.invoke(mainInstance);

        // Assert
        // Expecting valid execution
    }

    private Object createMainInstance(String[] args) throws Exception {
        Constructor<P06_IACC_01_Main> constructor = P06_IACC_01_Main.class.getDeclaredConstructor(String[].class);
        constructor.setAccessible(true);
        return constructor.newInstance((Object) args);
    }
}
