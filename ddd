package com.bnpparibas.atlentic.iacc.bopr.main.test;

import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_ParameterException;
import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_ExitApplicationException;
import com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.common.StringConverter;

import org.junit.*;
import org.mockito.MockedStatic;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import static org.mockito.Mockito.*;

public class P06_IACC_01_MainTest {

    private MockedStatic<P06_IACC_01_PropertiesMgr> mockProps;
    private MockedStatic<StringConverter> mockConverter;
    private MockedStatic<P06_IACC_01_Level1> mockLevel1;
    private MockedStatic<P06_IACC_01_Level2> mockLevel2;

    private P06_IACC_01_Main mainInstance;

    @Before
    public void setUp() throws Exception {
        mockProps = mockStatic(P06_IACC_01_PropertiesMgr.class);
        mockConverter = mockStatic(StringConverter.class);
        mockLevel1 = mockStatic(P06_IACC_01_Level1.class);
        mockLevel2 = mockStatic(P06_IACC_01_Level2.class);

        Constructor<P06_IACC_01_Main> constructor = P06_IACC_01_Main.class.getDeclaredConstructor();
        constructor.setAccessible(true);
        mainInstance = constructor.newInstance();
    }

    @After
    public void tearDown() {
        mockProps.close();
        mockConverter.close();
        mockLevel1.close();
        mockLevel2.close();
    }

    private void setArgs(String[] args) throws Exception {
        Field argsField = P06_IACC_01_Main.class.getDeclaredField("g_o_args");
        argsField.setAccessible(true);
        argsField.set(mainInstance, args);
    }

    private void invokeExecute() throws Exception {
        Method executeMethod = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);
        executeMethod.invoke(mainInstance);
    }

    @Test
    public void testExecute_Level1_WithDates() throws Exception {
        String[] args = {"level1Action", "BRANCH1", "01/01/2025", "01/01/2024", "01/02/2024"};
        setArgs(args);

        mockProps.when(P06_IACC_01_PropertiesMgr::getLevelAction).thenReturn("level1Action");
        mockConverter.when(() -> StringConverter.StringToDate(anyString())).thenReturn(new Date());
        mockLevel1.when(() -> new P06_IACC_01_Level1().execute()).thenReturn(null);

        invokeExecute();
    }

    @Test
    public void testExecute_Level1_DefaultDates() throws Exception {
        String[] args = {"level1Action", "BRANCH1", "01/01/2025"};
        setArgs(args);

        mockProps.when(P06_IACC_01_PropertiesMgr::getLevelAction).thenReturn("level1Action");

        Map<String, String> mockDateMap = new HashMap<>();
        mockDateMap.put("INTF_EVENT_DATE", "01/01/2025");
        mockDateMap.put("INTF_SYSTEM_BEGIN_DATE", "01/01/2024");
        mockDateMap.put("INTF_SYSTEM_END_DATE", "01/02/2024");

        Method setDateConfigDate = P06_IACC_01_Main.class.getDeclaredMethod("setDateConfigDate", Map.class);
        setDateConfigDate.setAccessible(true);
        setDateConfigDate.invoke(null, mockDateMap);

        mockConverter.when(() -> StringConverter.StringToDate(anyString())).thenReturn(new Date());
        mockLevel1.when(() -> new P06_IACC_01_Level1().execute()).thenReturn(null);

        invokeExecute();
    }

    @Test
    public void testExecute_Level2_WithFile() throws Exception {
        String[] args = {"level2Action", "BRANCH1", "01/01/2025", "file.txt"};
        setArgs(args);

        mockProps.when(P06_IACC_01_PropertiesMgr::getDirection).thenReturn("level2Action");
        mockConverter.when(() -> StringConverter.StringToDate(anyString())).thenReturn(new Date());
        mockLevel2.when(() -> new P06_IACC_01_Level2().execute()).thenReturn(null);

        invokeExecute();
    }

    @Test
    public void testExecute_Level2_WithoutFile() throws Exception {
        String[] args = {"level2Action", "BRANCH1", "01/01/2025"};
        setArgs(args);

        mockProps.when(P06_IACC_01_PropertiesMgr::getDirection).thenReturn("level2Action");
        mockConverter.when(() -> StringConverter.StringToDate(anyString())).thenReturn(new Date());
        mockLevel2.when(() -> new P06_IACC_01_Level2().execute()).thenReturn(null);

        invokeExecute();
    }

    @Test(expected = Exception.class)
    public void testExecute_InvalidLevel() throws Exception {
        String[] args = {"invalidAction", "BRANCH1", "01/01/2025"};
        setArgs(args);

        mockProps.when(P06_IACC_01_PropertiesMgr::getLevelAction).thenReturn("level1Action");
        mockProps.when(P06_IACC_01_PropertiesMgr::getDirection).thenReturn("level2Action");

        mockConverter.when(() -> StringConverter.StringToDate(anyString())).thenReturn(new Date());

        invokeExecute();
    }
}
