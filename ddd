import static com.github.stefanbirkner.systemlambda.SystemLambda.catchSystemExit;
import static org.junit.jupiter.api.Assertions.assertEquals;

import com.bnpparibas.atlentic.common.Connexion;
import com.bnpparibas.atlentic.risk.ost.POB_IRSK_03_trace;
import com.bnpparibas.atlentic.risk.utils.P00_IRSK_81_ExceptionHandlingUtil;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

class P00_IRSK_81_ExceptionHandlingUtilTest {

    @Test
    void testElseBlockWhenNonSQLExceptionIsThrown() throws Exception {
        // Arrange: create mocks
        POB_IRSK_03_trace traceMock = Mockito.mock(POB_IRSK_03_trace.class);
        Connexion connectionMock = Mockito.mock(Connexion.class);
        RuntimeException nonSqlException = new RuntimeException("General failure");

        // Act: run the method and catch System.exit
        int exitCode = catchSystemExit(() -> {
            P00_IRSK_81_ExceptionHandlingUtil.logExceptions(
                traceMock,
                "TestLog1",
                "TestLog2",
                nonSqlException,
                connectionMock
            );
        });

        // Assert: System.exit should be called with 8
        assertEquals(8, exitCode);
        
        // You can also verify interactions if needed (optional)
        Mockito.verify(traceMock).Add_log(Mockito.eq(2), Mockito.isNull(), Mockito.anyString(), Mockito.contains("Reason ="));
        Mockito.verify(connectionMock).rollback();
    }
}
