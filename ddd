import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;

import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2DBTransaction;
import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ System.class, P06_IACC_01_Main.class })
public class P06_IACC_01_Level2_InnerExecuteTest {

    private P06_IACC_01_Level2 level2;

    private P06_IACC_01_Level2DBTransaction dbTransaction;
    private List<P06_IACC_01_BoprRecordBean> recordBeansList;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);

        level2 = new P06_IACC_01_Level2();

        // Setup fake record bean list
        recordBeansList = new ArrayList<>();
        P06_IACC_01_BoprRecordBean mockBean = mock(P06_IACC_01_BoprRecordBean.class);
        recordBeansList.add(mockBean);

        // Inject record bean list using reflection
        Field listField = P06_IACC_01_Level2.class.getSuperclass().getDeclaredField("g_o_recordBeansList");
        listField.setAccessible(true);
        listField.set(level2, recordBeansList);

        // Mock and inject dbTransaction
        dbTransaction = PowerMockito.mock(P06_IACC_01_Level2DBTransaction.class);
        PowerMockito.when(dbTransaction.getBranchCurrency()).thenReturn("USD");

        Field dbField = P06_IACC_01_Level2.class.getSuperclass().getDeclaredField("g_o_dataBaseTransaction");
        dbField.setAccessible(true);
        dbField.set(level2, dbTransaction);

        // Mock static environment variable
        PowerMockito.mockStatic(System.class);
        PowerMockito.when(System.getenv("LIQFilesOutDirectory")).thenReturn(System.getProperty("java.io.tmpdir"));

        // Mock static file name
        PowerMockito.mockStatic(P06_IACC_01_Main.class);
        P06_IACC_01_Main.g_s_textFileName = "test_file.txt";
    }

    @Test
    public void testInnerExecuteCreatesFile() throws Exception {
        // Get method
        Method method = P06_IACC_01_Level2.class.getDeclaredMethod("innerExecute");
        method.setAccessible(true);

        // Run the method
        method.invoke(level2);

        // Verify file was created
        String filePath = System.getProperty("java.io.tmpdir") + File.separator + P06_IACC_01_Main.g_s_textFileName;
        File outputFile = new File(filePath);

        assertTrue("Output file should be created", outputFile.exists());

        // Clean up
        outputFile.delete();
    }
}
