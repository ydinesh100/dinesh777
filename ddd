package com.bnpparibas.atlentic.iacc.bopr.main.test;

import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ParameterException;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ExitApplicationException;

import org.junit.jupiter.api.*;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class P06_IACC_01_MainTest {

    private Method executeMethod;

    @BeforeAll
    void init() throws Exception {
        executeMethod = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);
    }

    @BeforeEach
    void clearStatics() throws Exception {
        String[] fields = { "args", "branch", "action", "eventTimestamp", "beginDate", "endDate", "textFileName" };
        for (String fieldName : fields) {
            Field field = P06_IACC_01_Main.class.getDeclaredField(fieldName);
            field.setAccessible(true);
            field.set(null, null);
        }
    }

    @Test
    void testExecute_withValidLevel1Args_shouldInvokeLevel1Execute() throws Exception {
        String dateStr = "01/01/2023 10:00:00";
        String[] args = { "level1", "BR001", dateStr, dateStr, dateStr };

        // Set static field via reflection
        Field argsField = P06_IACC_01_Main.class.getDeclaredField("args");
        argsField.setAccessible(true);
        argsField.set(null, args);

        try (
            MockedStatic<com.bnpparibas.atlentic.iacc.bopr.resource.P06_IACC_01_PropertiesMgr> propMock = Mockito.mockStatic(com.bnpparibas.atlentic.iacc.bopr.resource.P06_IACC_01_PropertiesMgr.class);
            MockedStatic<com.bnpparibas.atlentic.common.gen.string.utilities.StringConverter> stringConverterMock = Mockito.mockStatic(com.bnpparibas.atlentic.common.gen.string.utilities.StringConverter.class);
            MockedStatic<com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1> level1Mock = Mockito.mockStatic(com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1.class)
        ) {
            propMock.when(() -> com.bnpparibas.atlentic.iacc.bopr.resource.P06_IACC_01_PropertiesMgr.getLevel1ActionName())
                    .thenReturn("level1");

            Date fakeDate = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").parse(dateStr);
            stringConverterMock.when(() -> com.bnpparibas.atlentic.common.gen.string.utilities.StringConverter.StringToDate(Mockito.anyString()))
                    .thenReturn(fakeDate);

            com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1 level1Instance = Mockito.mock(com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1.class);
            level1Mock.when(com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1::new).thenReturn(level1Instance);

            Mockito.doNothing().when(level1Instance).execute();

            // Execute private method
            executeMethod.invoke(null);

            Mockito.verify(level1Instance).execute();
        }
    }

    @Test
    void testExecute_withMissingArgs_shouldThrowParameterException() throws Exception {
        String[] args = {};

        Field argsField = P06_IACC_01_Main.class.getDeclaredField("args");
        argsField.setAccessible(true);
        argsField.set(null, args);

        InvocationTargetException ex = assertThrows(InvocationTargetException.class, () -> {
            executeMethod.invoke(null);
        });

        assertTrue(ex.getCause() instanceof P06_IACC_01_ParameterException);
    }

    // Additional test cases can be added here for:
    // - Level2 execution
    // - Invalid action
    // - Null or malformed dates
    // - SQL exception in getDateConfigDate()
    // - ParameterException from extracted1, extracted2, extracted3, etc.
}
