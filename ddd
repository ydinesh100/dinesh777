package com.bnpparibas.atlentic.iacc.bopr.main.test;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.junit.Test;
import org.mockito.MockedStatic;

import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.common.P06_IACC_00_Utility;
import com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.util.P06_IACC_01_PropertiesMgr;

public class P06_IACC_01_MainTest {

    private Object createMainInstance(String[] args) throws Exception {
        Constructor<P06_IACC_01_Main> constructor = P06_IACC_01_Main.class.getDeclaredConstructor(String[].class);
        constructor.setAccessible(true);
        return constructor.newInstance((Object) args);
    }

    private void invokeExecute(Object mainInstance) throws Exception {
        Method method = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        method.setAccessible(true);
        method.invoke(mainInstance);
    }

    @Test
    public void testExecute_validLevel1_with5Params() throws Exception {
        String[] args = {
            P06_IACC_01_PropertiesMgr.getLevel1ActionName(), "TEST_BRANCH", "01/01/2023 12:00:00",
            "01/01/2023 00:00:00", "01/01/2023 23:59:59"
        };

        try (
            MockedStatic<GlobalAtlentic> mockedGlobal = mockStatic(GlobalAtlentic.class);
            MockedStatic<P06_IACC_00_Utility> mockedUtility = mockStatic(P06_IACC_01_Utility.class);
            MockedStatic<P06_IACC_01_Level1> mockedLevel1 = mockStatic(P06_IACC_01_Level1.class);
        ) {
            Connection mockConnection = mock(Connection.class);
            mockedGlobal.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mockConnection);

            Map<String, String> mockDateMap = new HashMap<>();
            mockDateMap.put("INTF_EVENT_DATE", "01/01/2023 12:00:00");
            mockDateMap.put("INTF_SYSTEM_BEGIN_DATE", "01/01/2023 00:00:00");
            mockDateMap.put("INTF_SYSTEM_END_DATE", "01/01/2023 23:59:59");
            mockedUtility.when(() -> P06_IACC_00_Utility.getAtlIntfDateByBranch(anyString(), any(Connection.class)))
                         .thenReturn(mockDateMap);

            P06_IACC_01_Level1 mockLevel1 = mock(P06_IACC_01_Level1.class);
            mockedLevel1.when(P06_IACC_01_Level1::new).thenReturn(mockLevel1);
            doNothing().when(mockLevel1).execute();

            Object mainInstance = createMainInstance(args);
            invokeExecute(mainInstance);

            verify(mockLevel1).execute();
        }
    }

    @Test
    public void testExecute_validLevel2_with4Params() throws Exception {
        String[] args = {
            P06_IACC_01_PropertiesMgr.getLevel2ActionName(), "TEST_BRANCH", "01/01/2023 12:00:00", "file.txt"
        };

        try (
            MockedStatic<GlobalAtlentic> mockedGlobal = mockStatic(GlobalAtlentic.class);
            MockedStatic<P06_IACC_00_Utility> mockedUtility = mockStatic(P06_IACC_01_Utility.class);
            MockedStatic<P06_IACC_01_Level2> mockedLevel2 = mockStatic(P06_IACC_01_Level2.class)
        ) {
            Connection mockConnection = mock(Connection.class);
            mockedGlobal.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mockConnection);

            Map<String, String> mockDateMap = new HashMap<>();
            mockDateMap.put("INTF_EVENT_DATE", "01/01/2023 12:00:00");
            mockDateMap.put("INTF_SYSTEM_BEGIN_DATE", "01/01/2023 00:00:00");
            mockDateMap.put("INTF_SYSTEM_END_DATE", "01/01/2023 23:59:59");
            mockedUtility.when(() -> P06_IACC_00_Utility.getAtlIntfDateByBranch(anyString(), any(Connection.class)))
                         .thenReturn(mockDateMap);

            P06_IACC_01_Level2 mockLevel2 = mock(P06_IACC_01_Level2.class);
            mockedLevel2.when(P06_IACC_01_Level2::new).thenReturn(mockLevel2);
            doNothing().when(mockLevel2).execute();

            Object mainInstance = createMainInstance(args);
            invokeExecute(mainInstance);

            verify(mockLevel2).execute();
        }
    }

    @Test
    public void testGetAndSetStaticFields() throws Exception {
        Field branchField = P06_IACC_01_Main.class.getDeclaredField("g_s_branch");
        branchField.setAccessible(true);
        branchField.set(null, "testBranch");
        assertEquals("testBranch", P06_IACC_01_Main.getG_s_branch());

        Field textFileField = P06_IACC_01_Main.class.getDeclaredField("g_s_textFileName");
        textFileField.setAccessible(true);
        textFileField.set(null, "testFile.txt");
        assertEquals("testFile.txt", P06_IACC_01_Main.getG_s_textFileName());

        Date testDate = new Date();

        P06_IACC_01_Main.setG_o_eventTimestamp(testDate);
        Field eventField = P06_IACC_01_Main.class.getDeclaredField("g_o_eventTimestamp");
        eventField.setAccessible(true);
        assertEquals(testDate, eventField.get(null));
        assertEquals(testDate, P06_IACC_01_Main.getG_o_eventTimestamp());

        P06_IACC_01_Main.set_o_beginDate(testDate);
        Field beginField = P06_IACC_01_Main.class.getDeclaredField("g_o_beginDate");
        beginField.setAccessible(true);
        assertEquals(testDate, beginField.get(null));
        assertEquals(testDate, P06_IACC_01_Main.getG_o_beginDate());

        P06_IACC_01_Main.setG_o_endDate(testDate);
        Field endField = P06_IACC_01_Main.class.getDeclaredField("g_o_endDate");
        endField.setAccessible(true);
        assertEquals(testDate, endField.get(null));
        assertEquals(testDate, P06_IACC_01_Main.getG_o_endDate());
    }
}
