package com.bnpparibas.atlentic.iacc.bopr.level.test;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.SQLException;
import java.io.IOException;
import java.util.Collections;

import org.junit.*;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.common.utils.DBUtils;
import com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import com.bnpparibas.atlentic.iacc.bopr.exception.P06_IACC_01_ExitApplicationException;
import com.bnpparibas.atlentic.iacc.bopr.exception.P86_IACC_01_SQLException;
import com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_DBTransaction;

import java.util.List;

public class P06_IACC_01_LevelExecuteTest {

    private MockedStatic<GlobalAtlentic> globalAtlenticMock;
    private MockedStatic<DBUtils> dbUtilsMock;

    private Connection mockConnection;
    private P06_IACC_01_DBTransaction mockTransaction;

    // Concrete test class extending your level class
    public static class TestLevel extends com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_Level {
        private final P06_IACC_01_DBTransaction transaction;

        public TestLevel(P06_IACC_01_DBTransaction transaction) {
            this.transaction = transaction;
        }

        @Override
        protected int getLevelNumber() {
            return 1;
        }

        @Override
        protected void innerExecute() throws IOException {
            // Do nothing
        }

        @Override
        protected boolean applyCommit() {
            return true;
        }

        @Override
        protected void initializeDataBaseTransaction(Connection connection) {
            this.setDataBaseTransaction(transaction);
        }
    }

    @Before
    public void setUp() throws Exception {
        mockConnection = mock(Connection.class);
        mockTransaction = mock(P06_IACC_01_DBTransaction.class);

        when(mockTransaction.getRecordsBeansList()).thenReturn(Collections.singletonList(new P06_IACC_01_BoprRecordBean()));

        globalAtlenticMock = Mockito.mockStatic(GlobalAtlentic.class);
        globalAtlenticMock.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mockConnection);

        dbUtilsMock = Mockito.mockStatic(DBUtils.class);
    }

    @Test
    public void testExecute_success() throws Exception {
        TestLevel level = new TestLevel(mockTransaction);

        Method executeMethod = level.getClass().getMethod("execute");
        executeMethod.invoke(level);

        verify(mockConnection).setAutoCommit(false);
        verify(mockConnection).commit();
        dbUtilsMock.verify(() -> DBUtils.closeConnexion(mockConnection, null, null));
    }

    @Test
    public void testExecute_ioExceptionTriggersRollback() throws Exception {
        // Override innerExecute to throw IOException
        TestLevel level = new TestLevel(mockTransaction) {
            @Override
            protected void innerExecute() throws IOException {
                throw new IOException("Simulated IO Error");
            }
        };

        Method executeMethod = level.getClass().getMethod("execute");

        try {
            executeMethod.invoke(level);
            fail("Expected exception not thrown");
        } catch (Exception e) {
            Throwable cause = e.getCause();
            assertTrue(cause instanceof P06_IACC_01_ExitApplicationException);
            verify(mockConnection).rollback();
        }
    }

    @Test
    public void testExecute_sqlExceptionTriggersRollback() throws Exception {
        when(mockTransaction.getRecordsBeansList()).thenThrow(new P86_IACC_01_SQLException("SQL Error"));

        TestLevel level = new TestLevel(mockTransaction);

        Method executeMethod = level.getClass().getMethod("execute");

        try {
            executeMethod.invoke(level);
            fail("Expected exception not thrown");
        } catch (Exception e) {
            Throwable cause = e.getCause();
            assertTrue(cause instanceof P06_IACC_01_ExitApplicationException);
            verify(mockConnection).rollback();
        }
    }

    @After
    public void tearDown() {
        globalAtlenticMock.close();
        dbUtilsMock.close();
    }
}
