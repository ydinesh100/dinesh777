import org.junit.jupiter.api.Test;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.*;

public class ObjectFactoryReflectionTest {

    @Test
    public void testConstructorUsingReflection() throws Exception {
        Constructor<?> constructor = Class.forName("ObjectFactory").getDeclaredConstructor();
        constructor.setAccessible(true);
        Object factory = constructor.newInstance();
        assertNotNull(factory, "ObjectFactory instance should not be null");
    }

    @Test
    public void testCreateConnectionsUsingReflection() throws Exception {
        Class<?> objectFactoryClass = Class.forName("ObjectFactory");
        Object factory = objectFactoryClass.getDeclaredConstructor().newInstance();

        Method method = objectFactoryClass.getDeclaredMethod("createConnections");
        method.setAccessible(true);

        Object result = method.invoke(factory);
        assertNotNull(result, "createConnections() should return non-null");

        // Check class name manually since we used dummy class
        assertEquals("com.example.testsupport.Connections", result.getClass().getName());
    }

    @Test
    public void testCreateConnectionsConnectionUsingReflection() throws Exception {
        Class<?> objectFactoryClass = Class.forName("ObjectFactory");
        Object factory = objectFactoryClass.getDeclaredConstructor().newInstance();

        Method method = objectFactoryClass.getDeclaredMethod("createConnectionsConnection");
        method.setAccessible(true);

        Object result = method.invoke(factory);
        assertNotNull(result, "createConnectionsConnection() should return non-null");

        assertEquals("com.example.testsupport.Connections$Connection", result.getClass().getName());
    }
}
