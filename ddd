import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class DateEventParserTest {

    private SimpleDateFormat pgmDateFormat;
    private String errorMessage;

    @Before
    public void setUp() {
        // Define the expected date format, e.g. "dd/MM/yyyy HH:mm:ss"
        pgmDateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        pgmDateFormat.setLenient(false); // strict parsing to catch invalid dates
        errorMessage = "";
    }

    @Test
    public void testValidDateParsing() {
        String[] args = {"program", "04/04/2012 16:30:00"};
        String dateEvent = args[1];
        try {
            pgmDateFormat.parse(dateEvent);
        } catch (ParseException e) {
            errorMessage += "One program pas ";
        }
        assertEquals("", errorMessage);
    }

    @Test
    public void testInvalidDateParsing() {
        String[] args = {"program", "2012-04-04 16:30:00"}; // wrong format
        String dateEvent = args[1];
        try {
            pgmDateFormat.parse(dateEvent);
        } catch (ParseException e) {
            errorMessage += "One program pas ";
        }
        assertEquals("One program pas ", errorMessage);
    }

    @Test
    public void testWithOptionalGuaranteeType() {
        String[] args = {"program", "04/04/2012 16:30:00", "COLLAT"};
        String dateEvent = args[1];
        String guaranteeTypeCode = null;
        try {
            pgmDateFormat.parse(dateEvent);
        } catch (ParseException e) {
            errorMessage += "One program pas ";
        }
        if (args.length == 3) {
            guaranteeTypeCode = args[2];
        }
        assertEquals("", errorMessage);
        assertEquals("COLLAT", guaranteeTypeCode);
    }

    @Test
    public void testWithoutOptionalGuaranteeType() {
        String[] args = {"program", "04/04/2012 16:30:00"};
        String dateEvent = args[1];
        String guaranteeTypeCode = null;
        try {
            pgmDateFormat.parse(dateEvent);
        } catch (ParseException e) {
            errorMessage += "One program pas ";
        }
        if (args.length == 3) {
            guaranteeTypeCode = args[2];
        }
        assertEquals("", errorMessage);
        assertNull(guaranteeTypeCode);
    }
}
