package com.bnpparibas.atlentic.iacc.bopr.main.test;

import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ParameterException;
import com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;

import org.junit.*;
import org.mockito.MockedConstruction;

import java.lang.reflect.Method;
import java.sql.SQLException;
import java.util.Date;

import static org.junit.Assert.*;

public class P06_IACC_01_MainTest {

    private Method executeMethod;

    @Before
    public void setUp() throws Exception {
        executeMethod = P06_IACC_01_Main.class.getDeclaredMethod("execute", String[].class);
        executeMethod.setAccessible(true);
    }

    private void invokeExecute(String[] args) throws Exception {
        try {
            executeMethod.invoke(null, (Object) args);
        } catch (Exception e) {
            throw (Exception) e.getCause();
        }
    }

    @Test(expected = P06_IACC_01_ParameterException.class)
    public void testExecute_ThrowsParameterExceptionWhenNoArgs() throws Exception {
        invokeExecute(new String[]{});
    }

    @Test(expected = P06_IACC_01_ParameterException.class)
    public void testExecute_InsufficientArgs_ThrowsParameterException() throws Exception {
        invokeExecute(new String[]{"param1", "param2"}); // less than 11
    }

    @Test(expected = P06_IACC_01_ParameterException.class)
    public void testExecute_InvalidAction_ThrowsParameterException() throws Exception {
        String[] args = new String[]{
            "event", "branch", "Level1", "EUR", "EUR", "100", "Y", "20240101", "20241231", "user", "role"
        };
        invokeExecute(args);
    }

    @Test
    public void testExecute_ValidLevel1Action() throws Exception {
        try (MockedConstruction<P06_IACC_01_Level1> mock = 
             org.mockito.Mockito.mockConstruction(P06_IACC_01_Level1.class, (mocked, context) -> {
                 org.mockito.Mockito.doNothing().when(mocked).execute();
             })) {

            String[] args = new String[]{
                "event", "branch", "levell", "EUR", "EUR", "100", "Y", "20240101", "20241231", "user", "role"
            };

            invokeExecute(args);

            assertEquals(1, mock.constructed().size());
            org.mockito.Mockito.verify(mock.constructed().get(0)).execute();
        }
    }

    @Test
    public void testExecute_ValidLevel2Action() throws Exception {
        try (MockedConstruction<P06_IACC_01_Level2> mock = 
             org.mockito.Mockito.mockConstruction(P06_IACC_01_Level2.class, (mocked, context) -> {
                 org.mockito.Mockito.doNothing().when(mocked).execute();
             })) {

            String[] args = new String[]{
                "event", "branch", "level2", "EUR", "EUR", "100", "Y", "20240101", "20241231", "user", "role"
            };

            invokeExecute(args);

            assertEquals(1, mock.constructed().size());
            org.mockito.Mockito.verify(mock.constructed().get(0)).execute();
        }
    }
}
