package com.bnpparibas.atlentic.irep.ecb.level.test;

import com.bnpparibas.atlentic.irep.ecb.level.P06_IREP_01_DBTransaction;
import com.bnpparibas.atlentic.irep.ecb.level.P06_IREP_01_EcbRecordBean;

import org.junit.Before;
import org.junit.Test;

import java.lang.reflect.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class P06_IREP_01_DBTransactionTest {

    private P06_IREP_01_DBTransaction dbTransaction;
    private ResultSet mockResultSet;
    private Date mockDate;

    @Before
    public void setUp() throws Exception {
        mockResultSet = mock(ResultSet.class);
        mockDate = new Date();

        // Create anonymous subclass to instantiate abstract class
        Constructor<?> constructor = P06_IREP_01_DBTransaction.class.getDeclaredConstructor(Connection.class);
        constructor.setAccessible(true);
        dbTransaction = (P06_IREP_01_DBTransaction) constructor.newInstance((Connection) null);

        // Set private field g_o_eventTimestamp using reflection
        Field timestampField = P06_IREP_01_DBTransaction.class.getDeclaredField("g_o_eventTimestamp");
        timestampField.setAccessible(true);
        timestampField.set(dbTransaction, mockDate);
    }

    @Test
    public void test_getResultSetTrimedString_NonNull() throws Exception {
        Method method = P06_IREP_01_DBTransaction.class.getDeclaredMethod("getResultSetTrimedString", ResultSet.class, String.class);
        method.setAccessible(true);

        when(mockResultSet.getString("COL_NAME")).thenReturn("  Test Value  ");
        String trimmed = (String) method.invoke(dbTransaction, mockResultSet, "COL_NAME");

        assertEquals("Test Value", trimmed);
    }

    @Test
    public void test_getResultSetTrimedString_Null() throws Exception {
        Method method = P06_IREP_01_DBTransaction.class.getDeclaredMethod("getResultSetTrimedString", ResultSet.class, String.class);
        method.setAccessible(true);

        when(mockResultSet.getString("COL_NAME")).thenReturn(null);
        String trimmed = (String) method.invoke(dbTransaction, mockResultSet, "COL_NAME");

        assertNull(trimmed);
    }

    @Test
    public void test_feedingRecordBean() throws Exception {
        Method method = P06_IREP_01_DBTransaction.class.getDeclaredMethod("feedingRecordBean", ResultSet.class);
        method.setAccessible(true);

        when(mockResultSet.getString("ECB_UNIQUE_ID")).thenReturn("ECB001");
        when(mockResultSet.getString("REPORTING_EVENT_TYPE")).thenReturn("EVENT_TYPE");
        when(mockResultSet.getTimestamp("EVENT_TIMESTAMP")).thenReturn(new Timestamp(mockDate.getTime()));
        when(mockResultSet.getString("SRC_APPLICATION")).thenReturn("SRC_APP");

        Object beanObj = method.invoke(dbTransaction, mockResultSet);
        assertNotNull(beanObj);
        assertTrue(beanObj instanceof P06_IREP_01_EcbRecordBean);

        P06_IREP_01_EcbRecordBean bean = (P06_IREP_01_EcbRecordBean) beanObj;
        assertEquals("ECB001", bean.getEcbUniqueId());
        assertEquals("EVENT_TYPE", bean.getReportingEventType());
        assertEquals(mockDate.getTime(), bean.getEventTimestamp().getTime());
        assertEquals("SRC_APP", bean.getSrcApplication());
    }

    @Test
    public void test_getFacRiskRecordsBeansList() throws Exception {
        Method method = P06_IREP_01_DBTransaction.class.getDeclaredMethod("getFacRiskRecordsBeansList", ResultSet.class);
        method.setAccessible(true);

        when(mockResultSet.next()).thenReturn(true, false);
        when(mockResultSet.getString(anyString())).thenReturn("SomeValue");
        when(mockResultSet.getTimestamp(anyString())).thenReturn(new Timestamp(mockDate.getTime()));

        Object result = method.invoke(dbTransaction, mockResultSet);

        assertNotNull(result);
        assertTrue(result instanceof List<?>);
        List<?> list = (List<?>) result;
        assertEquals(1, list.size());
        assertTrue(list.get(0) instanceof P06_IREP_01_EcbRecordBean);
    }
}
