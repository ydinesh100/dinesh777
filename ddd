import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.bnpparibas.atlantic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import com.bnpparibas.atlantic.lacc.bopr.level.P06_IACC_01_DBTransaction;
import com.bnpparibas.atlantic.lacc.bopr.util.exception.P06_IACC_01_SQLException;

public class P06_IACC_01_DBTransactionTest {

    @Mock private Connection mockConnection;
    @Mock private PreparedStatement mockPreparedStatement;
    @Mock private ResultSet mockResultSet;

    private P06_IACC_01_DBTransaction dbTransaction;

    @Before
    public void setup() throws Exception {
        MockitoAnnotations.initMocks(this);

        dbTransaction = new P06_IACC_01_DBTransaction(mockConnection) {
            @Override
            protected void feedingRecordBean(P06_IACC_01_BoprRecordBean bean, ResultSet rs) throws SQLException {
                bean.setAmount(rs.getInt("amount"));
            }

            @Override
            protected String getSelectQueryKey() {
                return "mock.query.key";
            }

            @Override
            protected void innerFeedingRecordBean(P06_IACC_01_BoprRecordBean bean, ResultSet rs) {
                // not used
            }
        };
    }

    @Test
    public void testGetRecordsBeansList_withPositiveAmount() throws Exception {
        // Arrange
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(true, false);
        when(mockResultSet.getInt("amount")).thenReturn(150); // > 0

        // Act
        List<P06_IACC_01_BoprRecordBean> result = dbTransaction.getRecordsBeansList();

        // Assert
        assertEquals(1, result.size());
        assertEquals(150, result.get(0).getAmount());
    }

    @Test
    public void testGetRecordsBeansList_withZeroAmount() throws Exception {
        // Arrange
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(true, false);
        when(mockResultSet.getInt("amount")).thenReturn(0); // Not added

        // Act
        List<P06_IACC_01_BoprRecordBean> result = dbTransaction.getRecordsBeansList();

        // Assert
        assertEquals(0, result.size());
    }

    @Test
    public void testGetRecordsBeansList_withSQLException() throws Exception {
        // Arrange
        when(mockConnection.prepareStatement(anyString())).thenThrow(new SQLException("Mock SQL error"));

        // Act & Assert
        try {
            dbTransaction.getRecordsBeansList();
        } catch (P06_IACC_01_SQLException e) {
            assertEquals("An error occurred while getting records to report Beans list I", e.getMessage().substring(0, 62));
        }
    }
}
