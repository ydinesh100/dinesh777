@Test
public void testGetRecordsBeansList_UsingReflection() throws Exception {
    // Arrange
    final String testBranchCode = "BRANCH_001";
    final Date testEventTimestamp = new Date();

    // Mock ResultSet behavior
    when(mockResultSet.next()).thenReturn(true, false);
    when(mockResultSet.getString("cde_type_record")).thenReturn("TYPE_A");
    when(mockResultSet.getString("pid_facility")).thenReturn("FACILITY_001");
    when(mockResultSet.getDate("dte_start")).thenReturn(new java.sql.Date(testEventTimestamp.getTime()));
    when(mockResultSet.getDate("dte_maturity")).thenReturn(new java.sql.Date(testEventTimestamp.getTime()));
    when(mockResultSet.getDouble("pct_gar_insur")).thenReturn(90.5);
    when(mockResultSet.getDouble("pct_gar_synd")).thenReturn(85.3);
    when(mockResultSet.getDouble("pct_gar_other")).thenReturn(75.2);
    when(mockResultSet.getString("cid_borrower")).thenReturn("BORROWER_001");
    when(mockResultSet.getString("cde_rmpm")).thenReturn("RMPM_001");
    when(mockResultSet.getString("nme_name")).thenReturn("BANK NAME");
    when(mockResultSet.getString("cde_risk_country")).thenReturn("COUNTRY_RISK_CODE");
    when(mockResultSet.getDouble("ant_amount")).thenReturn(100000.0);
    when(mockResultSet.getString("cde_currency")).thenReturn("USD");
    when(mockResultSet.getString("cmt_txt_comment")).thenReturn("This is a test comment");
    when(mockResultSet.getString("psp_bank")).thenReturn("1234567890");

    // Mock the SQL query call
    ResourceBundle mockBundle = mock(ResourceBundle.class);
    mockStatic(P06_IREP_01_PropertiesMgr.class);
    when(P06_IREP_01_PropertiesMgr.getQueryFromPropertiesFile(anyString()))
        .thenReturn("SELECT * FROM dummy_table");

    // Spy on the dbTransaction so we can override internal behavior
    P06_IREP_01_DBTransaction spyTransaction = spy(dbTransaction);

    doReturn("dummy.query.key").when(spyTransaction).getSelectRecordsQueryKey();
    doNothing().when(spyTransaction).feedRecordsBeansListPreparedStatement(any(PreparedStatement.class), eq(testBranchCode), eq(testEventTimestamp));
    doNothing().when(spyTransaction).feedingRecordBean(any(P06_IREP_01_EcbRecordBean.class), any(ResultSet.class));

    // Inject mocked DB connection into spy
    Field connectionField = P06_IREP_01_DBTransaction.class.getDeclaredField("g_o_dataBaseConnection");
    connectionField.setAccessible(true);
    connectionField.set(spyTransaction, mockConnection);

    when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
    when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);

    // Invoke protected method via reflection
    Method method = P06_IREP_01_DBTransaction.class.getDeclaredMethod("getRecordsBeansList", String.class, Date.class);
    method.setAccessible(true);

    // Act
    List<P06_IREP_01_EcbRecordBean> result =
        (List<P06_IREP_01_EcbRecordBean>) method.invoke(spyTransaction, testBranchCode, testEventTimestamp);

    // Assert
    assertNotNull(result);
    assertEquals(1, result.size());
}
