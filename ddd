package com.bnpparibas.atlantic.lacc.bopr.level1.test;

import com.bnpparibas.atlantic.lacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import com.bnpparibas.atlantic.lacc.bopr.level1.P06_IACC_01_Level1DBTransaction;

import org.junit.Before;
import org.junit.Test;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.Timestamp;

import static org.junit.Assert.*;

public class P06_IACC_01_Level1DBTransactionTest {

    private P06_IACC_01_Level1DBTransaction dbTransaction;

    @Before
    public void setUp() {
        dbTransaction = new P06_IACC_01_Level1DBTransaction();
    }

    // Utility to set private fields in the bean
    private void setPrivateField(Object target, String fieldName, Object value) throws Exception {
        Field field = target.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(target, value);
    }

    @Test
    public void testGenerateOperationReference() throws Exception {
        // Arrange
        P06_IACC_01_BoprRecordBean bean = new P06_IACC_01_BoprRecordBean("BRANCH", new Timestamp(System.currentTimeMillis()));

        setPrivateField(bean, "prefix", "EVT123");
        setPrivateField(bean, "idOwner", "OWNER001");

        // Act
        Method method = P06_IACC_01_Level1DBTransaction.class.getDeclaredMethod("generateOperationReference", P06_IACC_01_BoprRecordBean.class);
        method.setAccessible(true);
        String result = (String) method.invoke(dbTransaction, bean);

        // Assert
        assertNotNull(result);
        assertTrue(result.contains("EVT123") || result.contains("OWNER001"));
    }

    @Test
    public void testFeedingRecordBean() throws Exception {
        // Arrange
        P06_IACC_01_BoprRecordBean bean = new P06_IACC_01_BoprRecordBean("BRANCH", new Timestamp(System.currentTimeMillis()));

        setPrivateField(bean, "prefix", "PREFIX001");
        setPrivateField(bean, "idOwner", "OWNER001");

        Method method = P06_IACC_01_Level1DBTransaction.class.getDeclaredMethod("feedingRecordBean", P06_IACC_01_BoprRecordBean.class);
        method.setAccessible(true);

        // Act
        P06_IACC_01_BoprRecordBean resultBean = (P06_IACC_01_BoprRecordBean) method.invoke(dbTransaction, bean);

        // Assert
        assertNotNull(resultBean);
        // Optionally: Reflect and check a known field was modified
        Field opRefField = resultBean.getClass().getDeclaredField("operationReference");
        opRefField.setAccessible(true);
        Object opRef = opRefField.get(resultBean);
        assertNotNull(opRef);
    }

    @Test
    public void testPopulateLenderGrpFields_safeForNulls() throws Exception {
        // Arrange
        P06_IACC_01_BoprRecordBean bean = new P06_IACC_01_BoprRecordBean("BRANCH", new Timestamp(System.currentTimeMillis()));

        setPrivateField(bean, "idOwner", "OWNER123");
        setPrivateField(bean, "prefix", "EVT456");

        Method method = P06_IACC_01_Level1DBTransaction.class.getDeclaredMethod("populateLenderGrpFields", P06_IACC_01_BoprRecordBean.class);
        method.setAccessible(true);

        // Act & Assert
        try {
            method.invoke(dbTransaction, bean); // Should not throw
        } catch (Exception e) {
            fail("populateLenderGrpFields threw an exception: " + e.getMessage());
        }
    }
}
