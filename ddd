package com.bnpparibas.atlentic.irep.ecb.level.test;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.sql.*;
import java.util.*;

import com.bnpparibas.atlentic.common.utils.DBUtils;
import com.bnpparibas.atlentic.irep.ecb.bean.P06_IREP_01_EcbRecordBean;
import com.bnpparibas.atlentic.irep.ecb.level.P06_IREP_01_DBTransaction;
import com.bnpparibas.atlentic.irep.ecb.resource.P06_IREP_01_PropertiesMgr;
import com.bnpparibas.atlentic.irep.ecb.util.exception.P06_IREP_01_SQLException;

import org.junit.Before;
import org.junit.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

public class P06_IREP_01_DBTransactionTest {

    private Connection mockConnection;
    private PreparedStatement mockPreparedStatement;
    private ResultSet mockResultSet;

    private Object dbTransactionInstance;
    private Date mockDate = new java.util.Date();

    @Before
    public void setUp() throws Exception {
        mockConnection = mock(Connection.class);
        mockPreparedStatement = mock(PreparedStatement.class);
        mockResultSet = mock(ResultSet.class);

        // Create instance using reflection, passing mockConnection to superclass constructor
        Constructor<?> constructor = P06_IREP_01_DBTransaction.class.getDeclaredConstructor(Connection.class);
        constructor.setAccessible(true);
        dbTransactionInstance = constructor.newInstance(mockConnection);

        // Inject mockDate into the protected field g_o_eventTimestamp
        setField(dbTransactionInstance, "g_o_eventTimestamp", mockDate);
    }

    @Test
    public void testGetRecordsBeansListWithReflection() throws Exception {
        try (
            MockedStatic<P06_IREP_01_PropertiesMgr> mockedProps = Mockito.mockStatic(P06_IREP_01_PropertiesMgr.class);
            MockedStatic<DBUtils> mockedDbUtils = Mockito.mockStatic(DBUtils.class)
        ) {
            mockedProps.when(() -> P06_IREP_01_PropertiesMgr.getQueryFromPropertiesFile(anyString()))
                       .thenReturn("SELECT * FROM ECB_RECORDS");

            when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
            when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);

            when(mockResultSet.next()).thenReturn(true, false);
            when(mockResultSet.getString("cde_type_record")).thenReturn("REC_TYPE");
            when(mockResultSet.getString("pid_facility")).thenReturn("FAC001");
            when(mockResultSet.getDate("dte_start")).thenReturn(new java.sql.Date(mockDate.getTime()));
            when(mockResultSet.getDate("dte_maturity")).thenReturn(new java.sql.Date(mockDate.getTime()));
            when(mockResultSet.getDouble("pct_gar_insur")).thenReturn(0.2);
            when(mockResultSet.getDouble("pct_gar_synd")).thenReturn(0.3);
            when(mockResultSet.getDouble("pct_gar_other")).thenReturn(0.1);
            when(mockResultSet.getString("cid_borrower")).thenReturn("BOR001");
            when(mockResultSet.getString("nme_name")).thenReturn("Name");
            when(mockResultSet.getString("cde_risk_country")).thenReturn("IN");
            when(mockResultSet.getDouble("amt_amount")).thenReturn(1000.0);
            when(mockResultSet.getString("cde_currency")).thenReturn("INR");
            when(mockResultSet.getString("psp_bank")).thenReturn("XX000001");
            when(mockResultSet.getString("cmt_txt_comment")).thenReturn("Test comment");
            when(mockResultSet.getString("cde_rmpm")).thenReturn("RM001");

            // Reflectively invoke protected getRecordsBeansList(String)
            Method method = P06_IREP_01_DBTransaction.class.getDeclaredMethod("getRecordsBeansList", String.class);
            method.setAccessible(true);

            @SuppressWarnings("unchecked")
            List<P06_IREP_01_EcbRecordBean> result = (List<P06_IREP_01_EcbRecordBean>) method.invoke(dbTransactionInstance, "B001");

            assertNotNull(result);
            assertEquals(1, result.size());

            P06_IREP_01_EcbRecordBean bean = result.get(0);
            assertEquals("REC_TYPE", bean.getRecordType());
            assertEquals("FAC001", bean.getFacilityId());
            assertEquals("BOR001", bean.getBorrowerIdentifier());
        }
    }

    private void setField(Object target, String fieldName, Object value) throws Exception {
        java.lang.reflect.Field field = P06_IREP_01_DBTransaction.class.getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(target, value);
    }
}
