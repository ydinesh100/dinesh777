import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class ExistsAliasTypeStatementTest {

    @Mock
    private IDBAccess mockAccess;

    @Mock
    private DBResult mockResult;

    private ExistsAliasTypeStatement statement;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        statement = new ExistsAliasTypeStatement("testRmpm", "testAlias");
    }

    @Test
    public void testAliasAlreadyExistsTrue() {
        // Simulate that the alias count in DBResult is > 0
        when(mockResult.getInt(Constants.ALIAS_TYPE_COUNT)).thenReturn(1);

        statement.record(mockAccess, mockResult);

        assertTrue(getAliasAlreadyExists(statement));
    }

    @Test
    public void testAliasAlreadyExistsFalse() {
        // Simulate that the alias count in DBResult is 0
        when(mockResult.getInt(Constants.ALIAS_TYPE_COUNT)).thenReturn(0);

        statement.record(mockAccess, mockResult);

        assertFalse(getAliasAlreadyExists(statement));
    }

    // Reflection helper if aliasAlreadyExists is private without getter
    private boolean getAliasAlreadyExists(ExistsAliasTypeStatement statement) {
        try {
            java.lang.reflect.Field field = ExistsAliasTypeStatement.class.getDeclaredField("aliasAlreadyExists");
            field.setAccessible(true);
            return field.getBoolean(statement);
        } catch (Exception e) {
            throw new RuntimeException("Failed to access aliasAlreadyExists", e);
        }
    }
}
