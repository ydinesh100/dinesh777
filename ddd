import org.junit.jupiter.api.Test;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.*;

public class ObjectFactoryReflectionTest {

    @Test
    public void testConstructorUsingReflection() throws Exception {
        Constructor<ObjectFactory> constructor = ObjectFactory.class.getDeclaredConstructor();
        constructor.setAccessible(true);
        ObjectFactory factory = constructor.newInstance();
        assertNotNull(factory, "Constructor should create a non-null ObjectFactory instance");
    }

    @Test
    public void testCreateConnectionsUsingReflection() throws Exception {
        ObjectFactory factory = ObjectFactory.class.getDeclaredConstructor().newInstance();

        Method method = ObjectFactory.class.getDeclaredMethod("createConnections");
        method.setAccessible(true);

        Object result = method.invoke(factory);
        assertNotNull(result, "createConnections() should return non-null");
        assertEquals(Connections.class, result.getClass(), "Should return instance of Connections");
    }

    @Test
    public void testCreateConnectionsConnectionUsingReflection() throws Exception {
        ObjectFactory factory = ObjectFactory.class.getDeclaredConstructor().newInstance();

        Method method = ObjectFactory.class.getDeclaredMethod("createConnectionsConnection");
        method.setAccessible(true);

        Object result = method.invoke(factory);
        assertNotNull(result, "createConnectionsConnection() should return non-null");

        assertEquals(Connections.Connection.class, result.getClass(), "Should return instance of Connections.Connection");
    }
}
