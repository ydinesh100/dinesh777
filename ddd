package com.bnpparibas.atlentic.iacc.bopr.level.test;

import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.common.utils.DBUtils;
import com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import com.bnpparibas.atlentic.iacc.bopr.exception.P06_IACC_01_ExitApplicationException;
import com.bnpparibas.atlentic.iacc.bopr.exception.P06_IACC_01_SQLException;
import com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_DBTransaction;
import com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_Level;

import org.junit.*;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.io.IOException;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Collections;

import static org.mockito.Mockito.*;

public class P06_IACC_01_LevelTest {

    private TestLevel testLevel;
    private P06_IACC_01_DBTransaction mockTransaction;
    private Connection mockConnection;

    @Before
    public void setUp() throws Exception {
        mockTransaction = mock(P06_IACC_01_DBTransaction.class);
        mockConnection = mock(Connection.class);

        when(mockTransaction.getRecordsBeansList()).thenReturn(Collections.emptyList());

        testLevel = new TestLevel(mockTransaction);
    }

    @Test
    public void testExecute_success() throws Exception {
        try (MockedStatic<GlobalAtlentic> mockedGlobal = Mockito.mockStatic(GlobalAtlentic.class);
             MockedStatic<DBUtils> mockedDBUtils = Mockito.mockStatic(DBUtils.class)) {

            mockedGlobal.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mockConnection);

            testLevel.execute();

            verify(mockConnection).setAutoCommit(false);
            verify(mockConnection).commit();
            verify(mockTransaction).getRecordsBeansList();
            verify(mockConnection, never()).rollback();
            mockedDBUtils.verify(() -> DBUtils.closeConnexion(mockConnection, null, null));
        }
    }

    @Test
    public void testExecute_ioExceptionTriggersRollback() throws Exception {
        testLevel.setThrowIOException(true);

        try (MockedStatic<GlobalAtlentic> mockedGlobal = Mockito.mockStatic(GlobalAtlentic.class);
             MockedStatic<DBUtils> mockedDBUtils = Mockito.mockStatic(DBUtils.class)) {

            mockedGlobal.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mockConnection);

            try {
                testLevel.execute();
                Assert.fail("Expected ExitApplicationException due to IOException");
            } catch (P06_IACC_01_ExitApplicationException ex) {
                verify(mockConnection).rollback();
                mockedDBUtils.verify(() -> DBUtils.closeConnexion(mockConnection, null, null));
            }
        }
    }

    @Test
    public void testExecute_sqlExceptionDuringCommit() throws Exception {
        try (MockedStatic<GlobalAtlentic> mockedGlobal = Mockito.mockStatic(GlobalAtlentic.class);
             MockedStatic<DBUtils> mockedDBUtils = Mockito.mockStatic(DBUtils.class)) {

            mockedGlobal.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mockConnection);
            doThrow(new SQLException("Commit failed")).when(mockConnection).commit();

            try {
                testLevel.execute();
                Assert.fail("Expected ExitApplicationException due to SQLException");
            } catch (P06_IACC_01_ExitApplicationException ex) {
                mockedDBUtils.verify(() -> DBUtils.closeConnexion(mockConnection, null, null));
            }
        }
    }

    // ─────────────────────────────────────────────────────────────

    /**
     * Concrete test class extending the abstract Level and using reflection
     * to inject DBTransaction.
     */
    private static class TestLevel extends P06_IACC_01_Level {
        private final P06_IACC_01_DBTransaction transaction;
        private boolean throwIOException = false;

        public TestLevel(P06_IACC_01_DBTransaction transaction) {
            this.transaction = transaction;
            injectDBTransaction(transaction);
        }

        private void injectDBTransaction(P06_IACC_01_DBTransaction transaction) {
            try {
                Field field = P06_IACC_01_Level.class.getDeclaredField("g_o_dataBaseTransaction");
                field.setAccessible(true);
                field.set(this, transaction);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        public void setThrowIOException(boolean value) {
            this.throwIOException = value;
        }

        @Override
        protected int getLevelNumber() {
            return 1;
        }

        @Override
        protected void innerExecute() throws IOException {
            if (throwIOException) throw new IOException("Simulated IO error");
        }

        @Override
        protected boolean applyCommit() {
            return true;
        }

        @Override
        protected void initializeDataBaseTransaction(Connection conn) {
            // Already injected
        }
    }
}
