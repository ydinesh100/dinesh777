public class P06_IACC_01_DBTransactionTest {

    @Mock
    private Connection mockConnection;
    @Mock
    private PreparedStatement mockPreparedStatement;
    @Mock
    private ResultSet mockResultSet;

    private TestableDBTransaction dbTransaction;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);

        dbTransaction = new TestableDBTransaction(mockConnection);
    }

    /**
     * Subclass with a public wrapper to expose protected method
     */
    private class TestableDBTransaction extends P06_IACC_01_DBTransaction {

        public TestableDBTransaction(Connection connection) throws P06_IACC_01_SQLException {
            super(connection);
        }

        @Override
        protected void feedingRecordBean(P06_IACC_01_BoprRecordBean recordBean, ResultSet resultSet) throws SQLException {
            recordBean.setAmount(resultSet.getInt("amount"));
        }

        @Override
        protected void innerFeedingRecordBean(P06_IACC_01_BoprRecordBean recordBean, ResultSet resultSet) throws SQLException {
            // not used in this test
        }

        @Override
        protected String getSelectRecordsQueryKey() {
            return "test.query.key";
        }

        @Override
        protected void feedRecordsBeansListPreparedStatement(PreparedStatement ps) throws SQLException {
            // no-op
        }

        // âœ… Public wrapper for the protected method
        public List<P06_IACC_01_BoprRecordBean> callGetRecordsBeansList() throws P06_IACC_01_SQLException {
            return this.getRecordsBeansList();  // can call protected method here
        }
    }

    @Test
    public void testGetRecordsBeansList_positiveAmount() throws Exception {
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(true, false);
        when(mockResultSet.getInt("amount")).thenReturn(100);

        List<P06_IACC_01_BoprRecordBean> result = dbTransaction.callGetRecordsBeansList();

        assertEquals(1, result.size());
        assertEquals(100, result.get(0).getAmount());
    }
}
