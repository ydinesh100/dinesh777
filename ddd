package com.bnpparibas.atlentic.iacc.bopr.main;

import com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.resource.P06_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ParameterException;
import com.bnpparibas.atlentic.common.gen.string.utilities.StringConverter;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Date;

import static org.junit.Assert.fail;
import static org.mockito.Mockito.*;

public class P06_IACC_01_MainTest {

    private MockedStatic<P06_IACC_01_PropertiesMgr> mockedProps;
    private MockedStatic<StringConverter> mockedStringConverter;

    @Before
    public void setUp() {
        mockedProps = mockStatic(P06_IACC_01_PropertiesMgr.class);
        mockedStringConverter = mockStatic(StringConverter.class);
    }

    @After
    public void tearDown() {
        mockedProps.close();
        mockedStringConverter.close();
    }

    private void setStaticField(Class<?> clazz, String fieldName, Object value) throws Exception {
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(null, value);
    }

    @Test
    public void testExecute_Level1_With5Params() throws Exception {
        String[] args = {"LEVEL1", "BRANCH", "01/01/2024", "01/01/2023", "31/12/2023"};

        mockedProps.when(P06_IACC_01_PropertiesMgr::getLevellActionName).thenReturn("LEVEL1");
        mockedStringConverter.when(() -> StringConverter.StringToDate(anyString())).thenReturn(new Date());

        P06_IACC_01_Level1 mockLevel1 = mock(P06_IACC_01_Level1.class);
        doNothing().when(mockLevel1).execute();

        MockedStatic<P06_IACC_01_Level1> level1Static = mockStatic(P06_IACC_01_Level1.class);
        level1Static.when(P06_IACC_01_Level1::new).thenReturn(mockLevel1);

        Constructor<P06_IACC_01_Main> constructor = P06_IACC_01_Main.class.getDeclaredConstructor(String[].class);
        constructor.setAccessible(true);
        P06_IACC_01_Main mainObj = constructor.newInstance((Object) args);

        Method method = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        method.setAccessible(true);
        method.invoke(mainObj);

        level1Static.close();
    }

    @Test
    public void testExecute_Level2_With4Params() throws Exception {
        String[] args = {"LEVEL2", "BRANCH", "01/01/2024", "output.txt"};

        mockedProps.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("LEVEL2");
        mockedStringConverter.when(() -> StringConverter.StringToDate(anyString())).thenReturn(new Date());

        P06_IACC_01_Level2 mockLevel2 = mock(P06_IACC_01_Level2.class);
        doNothing().when(mockLevel2).execute();

        MockedStatic<P06_IACC_01_Level2> level2Static = mockStatic(P06_IACC_01_Level2.class);
        level2Static.when(P06_IACC_01_Level2::new).thenReturn(mockLevel2);

        Constructor<P06_IACC_01_Main> constructor = P06_IACC_01_Main.class.getDeclaredConstructor(String[].class);
        constructor.setAccessible(true);
        P06_IACC_01_Main mainObj = constructor.newInstance((Object) args);

        Method method = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        method.setAccessible(true);
        method.invoke(mainObj);

        level2Static.close();
    }

    @Test(expected = P06_IACC_01_ParameterException.class)
    public void testExecute_InvalidParamLength() throws Exception {
        String[] args = {};

        Constructor<P06_IACC_01_Main> constructor = P06_IACC_01_Main.class.getDeclaredConstructor(String[].class);
        constructor.setAccessible(true);
        P06_IACC_01_Main mainObj = constructor.newInstance((Object) args);

        Method method = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        method.setAccessible(true);

        try {
            method.invoke(mainObj);
        } catch (Exception ex) {
            Throwable cause = ex.getCause();
            if (cause instanceof P06_IACC_01_ParameterException) {
                throw (P06_IACC_01_ParameterException) cause;
            } else {
                fail("Unexpected exception: " + ex.getMessage());
            }
        }
    }
}
