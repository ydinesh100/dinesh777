package com.bnpparibas.atlentic.iacc.bopr.level2.test;

import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level208Transaction;
import com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_SQLException;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.lang.reflect.Method;
import java.sql.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class P06_IACC_01_Level208TransactionTest {

    private Connection mockConnection;
    private P06_IACC_01_Level208Transaction transaction;

    @Before
    public void setUp() throws Exception {
        mockConnection = mock(Connection.class);
        transaction = new P06_IACC_01_Level208Transaction(mockConnection);
    }

    @Test
    public void testInnerFeedingRecordBean() throws Exception {
        P06_IACC_01_BoprRecordBean bean = new P06_IACC_01_BoprRecordBean("BRANCH", new Timestamp(System.currentTimeMillis()));
        ResultSet mockResultSet = mock(ResultSet.class);

        when(mockResultSet.getDouble("ant_cashflow")).thenReturn(1000.25);
        when(mockResultSet.getObject("ant_cashflow_brn_ccy")).thenReturn(800.50);
        when(mockResultSet.getDouble("ant_cashflow_brn_ccy")).thenReturn(800.50);

        Method method = P06_IACC_01_Level208Transaction.class.getDeclaredMethod(
                "innerFeedingRecordBean", P06_IACC_01_BoprRecordBean.class, ResultSet.class);
        method.setAccessible(true);
        method.invoke(transaction, bean, mockResultSet);

        assertEquals(1000.25, bean.getAmount(), 0.001);
        assertEquals(800.50, bean.getAmountInBranchCurrency(), 0.001);
    }

    @Test
    public void testGetBranchCurrency() throws Exception {
        PreparedStatement mockStatement = mock(PreparedStatement.class);
        ResultSet mockResultSet = mock(ResultSet.class);

        when(mockConnection.prepareStatement(anyString())).thenReturn(mockStatement);
        when(mockStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(true);
        when(mockResultSet.getString("cde_branch_ccy")).thenReturn("EUR");

        Method method = P06_IACC_01_Level208Transaction.class.getDeclaredMethod("getBranchCurrency");
        method.setAccessible(true);
        String currency = (String) method.invoke(transaction);

        assertEquals("EUR", currency);
    }

    @Test
    public void testGetSelectRecordsQueryKey() throws Exception {
        Method method = P06_IACC_01_Level208Transaction.class.getDeclaredMethod("getSelectRecordsQueryKey");
        method.setAccessible(true);
        String key = (String) method.invoke(transaction);
        assertEquals("select.records.from.atl", key);
    }

    @Test
    public void testFeedRecordsBeansListPreparedStatement() throws Exception {
        PreparedStatement mockPreparedStatement = mock(PreparedStatement.class);

        Method method = P06_IACC_01_Level208Transaction.class.getDeclaredMethod(
                "feedRecordsBeansListPreparedStatement", PreparedStatement.class);
        method.setAccessible(true);

        method.invoke(transaction, mockPreparedStatement);
        verify(mockPreparedStatement, times(1)).setString(eq(1), anyString());
        verify(mockPreparedStatement, times(1)).setTimestamp(eq(2), any());
    }

    @Test
    public void testFeedingRecordBean() throws Exception {
        ResultSet mockResultSet = mock(ResultSet.class);
        P06_IACC_01_BoprRecordBean bean = new P06_IACC_01_BoprRecordBean("BR", new Timestamp(System.currentTimeMillis()));

        when(mockResultSet.getString("pid_deal")).thenReturn("D001");
        when(mockResultSet.getString("pid facility")).thenReturn("F001");
        when(mockResultSet.getString("rid outstanding")).thenReturn("O001");
        when(mockResultSet.getString("id event")).thenReturn("E001");
        when(mockResultSet.getString("cde_event")).thenReturn("EVT");
        when(mockResultSet.getString("rid_cashflow")).thenReturn("CF001");
        when(mockResultSet.getString("cde_direction")).thenReturn("IN");
        when(mockResultSet.getString("cde_country")).thenReturn("FR");
        when(mockResultSet.getDate("dte_effective")).thenReturn(Date.valueOf("2025-06-01"));
        when(mockResultSet.getString("cde_currency")).thenReturn("EUR");
        when(mockResultSet.getString("cde_sender_service")).thenReturn("SVC");
        when(mockResultSet.getString("cde_operation_reference")).thenReturn("OPR001");
        when(mockResultSet.getObject("ant_cashflow")).thenReturn(1000.0);
        when(mockResultSet.getDouble("ant_cashflow")).thenReturn(1000.0);

        Method method = P06_IACC_01_Level208Transaction.class.getDeclaredMethod(
                "feedingRecordBean", P06_IACC_01_BoprRecordBean.class, ResultSet.class);
        method.setAccessible(true);
        method.invoke(transaction, bean, mockResultSet);

        assertEquals("D001", bean.getDealId());
        assertEquals("OPR001", bean.getOperationReference());
    }
}
