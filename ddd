import com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_DBTransaction;
import com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_Level;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ExitApplicationException;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_SQLException;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;

import java.io.IOException;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Collections;

import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class P06_IACC_01_LevelTest {

    @Mock
    private Connection mockConnection;

    @Mock
    private P06_IACC_01_DBTransaction mockTransaction;

    private TestLevel testLevel;

    @Before
    public void setUp() throws Exception {
        testLevel = new TestLevel();

        // Set protected field using reflection
        Field txField = P06_IACC_01_Level.class.getDeclaredField("g_o_dataBaseTransaction");
        txField.setAccessible(true);
        txField.set(testLevel, mockTransaction);

        // Stub record bean list
        when(mockTransaction.getRecordsBeansList()).thenReturn(Collections.singletonList(new P06_IACC_01_BoprRecordBean()));

        // Override actual DB connection with mock
        testLevel.setConnection(mockConnection);
    }

    @Test
    public void testExecute_Success() throws Exception {
        testLevel.execute();

        verify(mockConnection).setAutoCommit(false);
        verify(mockTransaction).getRecordsBeansList();
        verify(mockConnection).commit();
    }

    // Stub subclass
    private static class TestLevel extends P06_IACC_01_Level<P06_IACC_01_DBTransaction> {

        private Connection testConn;

        public void setConnection(Connection conn) {
            this.testConn = conn;
        }

        @Override
        public void execute() throws P06_IACC_01_ExitApplicationException {
            Connection dbConnection = this.testConn;
            try {
                dbConnection.setAutoCommit(false);
                this.initializeDataBaseTransaction(dbConnection);
                this.g_o_recordBeansList = this.getDataBaseTransaction().getRecordsBeansList();
                this.innerExecute();
                if (this.applyCommit()) {
                    dbConnection.commit();
                }
            } catch (IOException | SQLException | P06_IACC_01_SQLException e) {
                try {
                    if (dbConnection != null) dbConnection.rollback();
                } catch (SQLException ignore) {}
                throw new P06_IACC_01_ExitApplicationException(e.getMessage(), e);
            }
        }

        @Override
        protected void initializeDataBaseTransaction(Connection p_o_dataBaseConnection)
                throws P06_IACC_01_SQLException, IOException, P06_IACC_01_ExitApplicationException {
            // Do nothing, transaction is already set by reflection
        }

        @Override
        protected void innerExecute() {
            // No-op
        }

        @Override
        protected int getLevelNumber() {
            return 1;
        }

        @Override
        protected boolean applyCommit() {
            return true;
        }
    }
}
