package com.bnpparibas.atlentic.iacc.bopr.main.test;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.sql.SQLException;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.resource.P06_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ParameterException;

public class P06_IACC_01_MainTest {

    private Constructor<P06_IACC_01_Main> constructor;
    private Method executeMethod;

    private MockedStatic<P06_IACC_01_PropertiesMgr> propertiesMgrMock;

    @Before
    public void setUp() throws Exception {
        // Access private constructor
        constructor = P06_IACC_01_Main.class.getDeclaredConstructor(String[].class);
        constructor.setAccessible(true);

        // Access private execute() method
        executeMethod = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);

        // Mock static methods of PropertiesMgr
        propertiesMgrMock = Mockito.mockStatic(P06_IACC_01_PropertiesMgr.class);
    }

    @After
    public void tearDown() {
        propertiesMgrMock.close();
    }

    private void invokeExecute(String[] args) throws Exception {
        P06_IACC_01_Main mainInstance = constructor.newInstance((Object) args);
        executeMethod.invoke(mainInstance);
    }

    @Test(expected = P06_IACC_01_ParameterException.class)
    public void testExecute_withTooFewArguments_throwsParameterException() throws Exception {
        String[] args = {}; // no arguments
        invokeExecute(args);
    }

    @Test
    public void testExecute_withValidLevel1Arguments_callsLevel1Execute() throws Exception {
        // Arrange input args for Level1 action
        String level1Action = "LEVEL1";
        String branch = "BEFOR";
        String eventDate = "17/06/2025";

        String[] args = new String[] { level1Action, branch, eventDate, "15/06/2025", "18/06/2025" };

        // Mock PropertiesMgr static methods for Level1
        propertiesMgrMock.when(P06_IACC_01_PropertiesMgr::getLevellActionName).thenReturn(level1Action);
        propertiesMgrMock.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("LEVEL2");

        // Spy the Level1 class to verify execute called
        P06_IACC_01_Level1 level1Spy = mock(P06_IACC_01_Level1.class);
        // Inject the spy (simplified by mocking constructor or using other ways, 
        // but here just demonstrate basic)
        // Because P06_IACC_01_Main creates new Level1 internally, this test assumes code refactor or wrapper for injection.

        // Act & Assert no exception thrown (happy path)
        invokeExecute(args);
    }

    @Test(expected = P06_IACC_01_ParameterException.class)
    public void testExecute_withInvalidDateRange_throwsParameterException() throws Exception {
        String level1Action = "LEVEL1";
        String branch = "BEFOR";
        String eventDate = "17/06/2025";

        // Begin date after end date
        String[] args = new String[] { level1Action, branch, eventDate, "19/06/2025", "18/06/2025" };

        propertiesMgrMock.when(P06_IACC_01_PropertiesMgr::getLevellActionName).thenReturn(level1Action);
        propertiesMgrMock.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("LEVEL2");

        invokeExecute(args);
    }

    @Test
    public void testExecute_withValidLevel2Arguments_callsLevel2Execute() throws Exception {
        String level2Action = "LEVEL2";
        String branch = "BEFOR";
        String eventDate = "17/06/2025";

        String[] args = new String[] { level2Action, branch, eventDate, "testfile.txt" };

        propertiesMgrMock.when(P06_IACC_01_PropertiesMgr::getLevellActionName).thenReturn("LEVEL1");
        propertiesMgrMock.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn(level2Action);

        invokeExecute(args);
    }

    @Test(expected = P06_IACC_01_ParameterException.class)
    public void testExecute_withUnknownAction_throwsParameterException() throws Exception {
        String unknownAction = "UNKNOWN";
        String branch = "BEFOR";
        String eventDate = "17/06/2025";

        String[] args = new String[] { unknownAction, branch, eventDate };

        propertiesMgrMock.when(P06_IACC_01_PropertiesMgr::getLevellActionName).thenReturn("LEVEL1");
        propertiesMgrMock.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("LEVEL2");

        invokeExecute(args);
    }

}
