package com.bnpparibas.atlentic.iacc.bopr.main;

import static org.mockito.Mockito.*;

import com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.resource.P06_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ParameterException;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.mockito.MockedStatic;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Date;

public class P06_IACC_01_MainTest {

    private MockedStatic<P06_IACC_01_PropertiesMgr> propertiesMgrMock;

    @Before
    public void setUp() {
        propertiesMgrMock = mockStatic(P06_IACC_01_PropertiesMgr.class);
    }

    @After
    public void tearDown() {
        propertiesMgrMock.close();
    }

    private P06_IACC_01_Main createMainInstanceWithArgs(String[] args) throws Exception {
        Constructor<P06_IACC_01_Main> constructor = P06_IACC_01_Main.class.getDeclaredConstructor(String[].class);
        constructor.setAccessible(true);
        return constructor.newInstance((Object) args);
    }

    private void invokeExecute(P06_IACC_01_Main mainInstance) throws Exception {
        Method executeMethod = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);
        executeMethod.invoke(mainInstance);
    }

    private void setStaticField(String fieldName, Object value) throws Exception {
        Field field = P06_IACC_01_Main.class.getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(null, value);
    }

    @Test
    public void testExecute_Level1_WithAllParams() throws Exception {
        String[] args = {
                "LVL1", "BR01", "01/01/2024", "01/01/2024", "02/01/2024"
        };

        propertiesMgrMock.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("LVL1");

        P06_IACC_01_Level1 mockLevel1 = mock(P06_IACC_01_Level1.class);
        when(mockLevel1.execute()).thenReturn(null);

        // Force new instance to return mock using reflection
        MockedStatic<P06_IACC_01_Level1> level1Mock = mockStatic(P06_IACC_01_Level1.class);
        level1Mock.when(P06_IACC_01_Level1::new).thenReturn(mockLevel1);

        P06_IACC_01_Main main = createMainInstanceWithArgs(args);
        invokeExecute(main);

        level1Mock.close();
    }

    @Test
    public void testExecute_Level2_WithTextFileName() throws Exception {
        String[] args = {
                "LVL2", "BR01", "01/01/2024", "myFile.txt"
        };

        propertiesMgrMock.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("LVL2");

        P06_IACC_01_Level2 mockLevel2 = mock(P06_IACC_01_Level2.class);
        when(mockLevel2.execute()).thenReturn(null);

        MockedStatic<P06_IACC_01_Level2> level2Mock = mockStatic(P06_IACC_01_Level2.class);
        level2Mock.when(P06_IACC_01_Level2::new).thenReturn(mockLevel2);

        P06_IACC_01_Main main = createMainInstanceWithArgs(args);
        invokeExecute(main);

        level2Mock.close();
    }

    @Test(expected = P06_IACC_01_ParameterException.class)
    public void testExecute_InvalidDate_ThrowsException() throws Exception {
        String[] args = {
                "LVL1", "BR01", "invalid-date"
        };

        propertiesMgrMock.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("LVL1");

        P06_IACC_01_Main main = createMainInstanceWithArgs(args);
        invokeExecute(main);
    }

    @Test(expected = P06_IACC_01_ParameterException.class)
    public void testExecute_StartDateAfterEndDate_ThrowsException() throws Exception {
        String[] args = {
                "LVL1", "BR01", "02/01/2024", "03/01/2024", "01/01/2024"
        };

        propertiesMgrMock.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("LVL1");

        P06_IACC_01_Main main = createMainInstanceWithArgs(args);
        invokeExecute(main);
    }

    @Test
    public void testSettersAndGetters() throws Exception {
        Date testDate = new Date();

        P06_IACC_01_Main.setG_o_beginDate(testDate);
        P06_IACC_01_Main.setG_o_endDate(testDate);

        assert P06_IACC_01_Main.getG_o_endDate().equals(testDate);
        assert P06_IACC_01_Main.getG_o_beginDate().equals(testDate);
    }
}
