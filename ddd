package com.bnpparibas.atlentic.iacc.bopr.main.test;

import com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ParameterException;

import org.junit.*;
import org.mockito.MockedConstruction;
import org.mockito.MockedStatic;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class P06_IACC_01_MainTest {

    // Helper to set up the instance with args
    private P06_IACC_01_Main createInstance(String[] args) throws Exception {
        Constructor<P06_IACC_01_Main> constructor = P06_IACC_01_Main.class.getDeclaredConstructor(String[].class);
        constructor.setAccessible(true);
        return constructor.newInstance((Object) args);
    }

    // Helper to invoke private execute()
    private void invokeExecute(P06_IACC_01_Main instance) throws Exception {
        Method executeMethod = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);
        executeMethod.invoke(instance);
    }

    @Test
    public void testExecute_NoArgs_ThrowsParameterException() throws Exception {
        String[] args = new String[0];
        P06_IACC_01_Main instance = createInstance(args);

        try {
            invokeExecute(instance);
            fail("Expected P06_IACC_01_ParameterException for no args");
        } catch (Exception e) {
            Throwable cause = e.getCause();
            assertTrue(cause instanceof P06_IACC_01_ParameterException);
            assertTrue(cause.getMessage().toLowerCase().contains("wrong parameters number"));
        }
    }

    @Test
    public void testExecute_InsufficientArgs_ThrowsParameterException() throws Exception {
        String[] args = new String[] { "levell", "BR1", "01/01/2025 00:00:00" }; // Only 3 args
        P06_IACC_01_Main instance = createInstance(args);

        try {
            invokeExecute(instance);
            fail("Expected P06_IACC_01_ParameterException for insufficient args");
        } catch (Exception e) {
            Throwable cause = e.getCause();
            assertTrue(cause instanceof P06_IACC_01_ParameterException);
            assertTrue(cause.getMessage().toLowerCase().contains("wrong parameters number"));
        }
    }

    @Test
    public void testExecute_InvalidAction_ThrowsParameterException() throws Exception {
        String[] args = new String[] {
            "Level1", "BR1", "01/01/2025 00:00:00", "01/01/2025 00:00:00", "02/01/2025 00:00:00",
            "user", "pass", "env", "src", "path", "flag"
        };
        P06_IACC_01_Main instance = createInstance(args);

        try {
            invokeExecute(instance);
            fail("Expected P06_IACC_01_ParameterException for invalid action");
        } catch (Exception e) {
            Throwable cause = e.getCause();
            assertTrue(cause instanceof P06_IACC_01_ParameterException);
            assertTrue(cause.getMessage().toLowerCase().contains("unknown"));
        }
    }

    @Test
    public void testExecute_ValidLevel1_CallsExecute() throws Exception {
        String[] args = new String[] {
            "levell", "BR1", "01/01/2025 00:00:00", "01/01/2025 00:00:00", "02/01/2025 00:00:00",
            "user", "pass", "env", "src", "path", "flag"
        };

        try (MockedConstruction<P06_IACC_01_Level1> mocked = mockConstruction(P06_IACC_01_Level1.class,
                (mock, context) -> doNothing().when(mock).execute())) {

            P06_IACC_01_Main instance = createInstance(args);
            invokeExecute(instance);

            assertEquals(1, mocked.constructed().size());
            verify(mocked.constructed().get(0), times(1)).execute();
        }
    }

    @Test
    public void testExecute_ValidLevel2_CallsExecute() throws Exception {
        String[] args = new String[] {
            "level2", "BR1", "01/01/2025 00:00:00", "out.txt",
            "user", "pass", "env", "src", "flag1", "flag2", "extra"
        };

        try (MockedConstruction<P06_IACC_01_Level2> mocked = mockConstruction(P06_IACC_01_Level2.class,
                (mock, context) -> doNothing().when(mock).execute())) {

            P06_IACC_01_Main instance = createInstance(args);
            invokeExecute(instance);

            assertEquals(1, mocked.constructed().size());
            verify(mocked.constructed().get(0), times(1)).execute();
        }
    }
}
