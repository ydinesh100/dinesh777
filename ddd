import org.junit.*;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

public class FacilityServiceTest {

    private FacilityService facilityService;

    @Before
    public void setUp() {
        facilityService = spy(new FacilityService());
    }

    @Test
    public void testGetAuxId_ReturnsCorrectValue_WhenAuxMapIsNull() throws SQLException {
        // Arrange
        String facilityId = "FAC1";
        String entityId = "ENT1";
        String customerId = "CUST1";
        String expectedKey = facilityId + "-" + entityId;
        String expectedAuxId = "AUX123";

        Map<String, String> fakeMap = new HashMap<>();
        fakeMap.put(expectedKey, expectedAuxId);

        doReturn(fakeMap).when(facilityService).buildAuxMap(customerId);

        // Act
        String result = facilityService.getAuxId(facilityId, entityId, customerId);

        // Assert
        assertEquals(expectedAuxId, result);
        verify(facilityService).buildAuxMap(customerId);
    }

    @Test
    public void testGetAuxId_ReturnsNull_WhenKeyNotFound() throws SQLException {
        String facilityId = "FAC2";
        String entityId = "ENT2";
        String customerId = "CUST2";

        Map<String, String> fakeMap = new HashMap<>();
        doReturn(fakeMap).when(facilityService).buildAuxMap(customerId);

        String result = facilityService.getAuxId(facilityId, entityId, customerId);

        assertNull(result);
    }

    @Test
    public void testGetAuxId_UsesExistingAuxMap_IfNotNull() throws SQLException {
        String facilityId = "FAC3";
        String entityId = "ENT3";
        String customerId = "CUST3";
        String expectedKey = facilityId + "-" + entityId;
        String expectedAuxId = "AUX789";

        Map<String, String> presetMap = new HashMap<>();
        presetMap.put(expectedKey, expectedAuxId);

        // Set auxMap directly (simulate already built)
        facilityService.auxMap = presetMap;

        String result = facilityService.getAuxId(facilityId, entityId, customerId);

        assertEquals(expectedAuxId, result);
        // buildAuxMap should NOT be called
        verify(facilityService, never()).buildAuxMap(anyString());
    }

    @Test(expected = SQLException.class)
    public void testGetAuxId_ThrowsSQLException_WhenBuildAuxMapFails() throws SQLException {
        String facilityId = "FAC4";
        String entityId = "ENT4";
        String customerId = "CUST4";

        doThrow(new SQLException("DB error")).when(facilityService).buildAuxMap(customerId);

        facilityService.auxMap = null; // Ensure auxMap is null

        facilityService.getAuxId(facilityId, entityId, customerId);
    }
}





import org.junit.Before;
import org.junit.Test;
import java.sql.Connection;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class MyDbClassTest {

    private Connection mockConnection;
    private MyDbClass myDbClass;

    @Before
    public void setUp() {
        mockConnection = mock(Connection.class);
        myDbClass = new MyDbClass(mockConnection);
    }

    @Test
    public void testGetConnection_ReturnsInjectedConnection() {
        Connection result = myDbClass.getConnection();
        assertNotNull(result);
        assertEquals(mockConnection, result);
    }

    @Test
    public void testGetConnection
_ReturnsNullIfNotInitialized() {
        MyDbClass dbClassWithNull = new MyDbClass(null);
        assertNull(dbClassWithNull.getConnection());
    }
}


