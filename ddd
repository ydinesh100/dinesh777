package com.bnpparibas.atlentic.iacc.bopr.main.test;

import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ParameterException;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ExitApplicationException;

import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Method;
import java.sql.SQLException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class P06_IACC_01_MainTest {

    private static Method executeMethod;

    @BeforeAll
    static void init() throws Exception {
        executeMethod = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);
    }

    @Test
    void testExecute_withActionNameLevel1_shouldCallLevel1Execute() throws Exception {
        try (
            MockedStatic<P06_IACC_01_Main> mainMock = mockStatic(P06_IACC_01_Main.class);
            MockedStatic<P06_IACC_01_Level1> level1Mock = mockStatic(P06_IACC_01_Level1.class)
        ) {
            mainMock.when(P06_IACC_01_Main::get_s_actionName).thenReturn("Level1");
            mainMock.when(P06_IACC_01_Main::get_s_branch).thenReturn("BR001");
            mainMock.when(P06_IACC_01_Main::get_s_eventDate).thenReturn("2024-01-01");

            level1Mock.when(() -> P06_IACC_01_Level1.execute()).then(invocation -> null);

            assertDoesNotThrow(() -> executeMethod.invoke(null));
        }
    }

    @Test
    void testExecute_withActionNameLevel2_shouldCallLevel2Execute() throws Exception {
        try (
            MockedStatic<P06_IACC_01_Main> mainMock = mockStatic(P06_IACC_01_Main.class);
            MockedStatic<P06_IACC_01_Level2> level2Mock = mockStatic(P06_IACC_01_Level2.class)
        ) {
            mainMock.when(P06_IACC_01_Main::get_s_actionName).thenReturn("Level2");
            mainMock.when(P06_IACC_01_Main::get_s_branch).thenReturn("BR001");
            mainMock.when(P06_IACC_01_Main::get_s_eventDate).thenReturn("2024-01-01");

            level2Mock.when(() -> P06_IACC_01_Level2.execute()).then(invocation -> null);

            assertDoesNotThrow(() -> executeMethod.invoke(null));
        }
    }

    @Test
    void testExecute_withInvalidArguments_shouldThrowParameterException() throws Exception {
        try (MockedStatic<P06_IACC_01_Main> mainMock = mockStatic(P06_IACC_01_Main.class)) {
            mainMock.when(P06_IACC_01_Main::get_s_actionName).thenReturn("InvalidAction");
            mainMock.when(P06_IACC_01_Main::get_s_branch).thenReturn("BR001");
            mainMock.when(P06_IACC_01_Main::get_s_eventDate).thenReturn("2024-01-01");

            Exception exception = assertThrows(Exception.class, () -> executeMethod.invoke(null));

            Throwable cause = exception.getCause();
            assertTrue(cause instanceof P06_IACC_01_ParameterException);
            assertTrue(cause.getMessage().contains("Invalid action"));
        }
    }

    @Test
    void testExecute_withMissingArguments_shouldThrowParameterException() throws Exception {
        try (MockedStatic<P06_IACC_01_Main> mainMock = mockStatic(P06_IACC_01_Main.class)) {
            mainMock.when(P06_IACC_01_Main::get_s_actionName).thenReturn(null);
            mainMock.when(P06_IACC_01_Main::get_s_branch).thenReturn(null);
            mainMock.when(P06_IACC_01_Main::get_s_eventDate).thenReturn(null);

            Exception exception = assertThrows(Exception.class, () -> executeMethod.invoke(null));
            Throwable cause = exception.getCause();
            assertTrue(cause instanceof P06_IACC_01_ParameterException);
        }
    }

    @Test
    void testExecute_SQLExceptionPropagation() throws Exception {
        try (
            MockedStatic<P06_IACC_01_Main> mainMock = mockStatic(P06_IACC_01_Main.class);
            MockedStatic<P06_IACC_01_Level1> level1Mock = mockStatic(P06_IACC_01_Level1.class)
        ) {
            mainMock.when(P06_IACC_01_Main::get_s_actionName).thenReturn("Level1");
            mainMock.when(P06_IACC_01_Main::get_s_branch).thenReturn("BR001");
            mainMock.when(P06_IACC_01_Main::get_s_eventDate).thenReturn("2024-01-01");

            level1Mock.when(() -> P06_IACC_01_Level1.execute())
                      .thenThrow(new SQLException("DB Error"));

            Exception exception = assertThrows(Exception.class, () -> executeMethod.invoke(null));
            assertTrue(exception.getCause() instanceof SQLException);
        }
    }
}

