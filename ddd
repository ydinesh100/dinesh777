import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

import com.bnpparibas.atlantic.irep.ech.bean.F06_IREP_01_EchRecordBean;
import com.bnpparibas.atlantic.irep.ech.util.exception.F06_IREP_01_ExitApplicationException;
import com.bnpparibas.atlantic.irep.ech.level.P06_IREP_01_Level;
import com.bnpparibas.atlantic.irep.ech.level.P06_IREP_01_DBTransaction;

public class P06_IREP_01_LevelTest {

    private TestLevel level;
    private P06_IREP_01_DBTransaction mockTransaction;
    private Connection mockConnection;

    private static class TestLevel extends P06_IREP_01_Level<P06_IREP_01_DBTransaction> {

        private final P06_IREP_01_DBTransaction transactionMock;
        private final boolean shouldApplyCommit;

        public TestLevel(P06_IREP_01_DBTransaction transactionMock, boolean shouldApplyCommit) {
            this.transactionMock = transactionMock;
            this.shouldApplyCommit = shouldApplyCommit;
        }

        @Override
        protected int getLevelNumber() {
            return 1;
        }

        @Override
        protected void initializeDataBaseTransaction(Connection connection) {
            this.g_o_databaseTransaction = transactionMock;
        }

        @Override
        protected boolean apply() {
            return true; // Simulate processing
        }

        @Override
        protected boolean applyCommit() {
            return shouldApplyCommit;
        }
    }

    @Before
    public void setUp() throws Exception {
        mockTransaction = mock(P06_IREP_01_DBTransaction.class);
        mockConnection = mock(Connection.class);

        // Mock record bean list
        List<F06_IREP_01_EchRecordBean> mockRecordList = Arrays.asList(new F06_IREP_01_EchRecordBean());
        when(mockTransaction.getRecordBeansList(any(), any())).thenReturn(mockRecordList);

        // Simulate GlobalAtlantic.getLoanIQConnection() manually since it's static
        // We'll inject connection directly in initialize method

        level = new TestLevel(mockTransaction, true);
    }

    @Test
    public void testExecuteSuccessFlow() throws Exception {
        // Execute
        level.execute();

        // Verifications
        verify(mockTransaction).getRecordBeansList(any(), any());
        assertNotNull(level.g_o_recordBeanList);
        assertEquals(1, level.g_o_recordBeanList.size());
    }

    @Test(expected = F06_IREP_01_ExitApplicationException.class)
    public void testExecuteRollbackOnCommitFailure() throws Exception {
        // New level with commit failure
        TestLevel failCommitLevel = new TestLevel(mockTransaction, false);

        failCommitLevel.execute();
    }
}
