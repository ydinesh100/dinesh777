package com.hupparibas.atlentic.iacc.bopr.level2Test;

import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_BoprStringBuffer;
import org.junit.Before;
import org.junit.Test;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Date;

import static org.junit.Assert.*;

// Test class
public class P06_IACC_01_BoprStringBufferTest {

    private P06_IACC_01_BoprStringBuffer boprStringBuffer;

    @Before
    public void setup() throws Exception {
        // Instantiate using reflection since constructor is protected
        Class<?> clazz = Class.forName("com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_BoprStringBuffer");
        Constructor<?> constructor = clazz.getDeclaredConstructor();
        constructor.setAccessible(true);
        boprStringBuffer = (P06_IACC_01_BoprStringBuffer) constructor.newInstance();
    }

    @Test
    public void testAppendRecord_shouldAppendFormattedRecord() throws Exception {
        // Create a mock bean with dummy values
        P06_IACC_01_BoprRecordBeanMock recordBean = new P06_IACC_01_BoprRecordBeanMock();
        recordBean.setSenderServiceCode("ABC123");
        recordBean.setOperationReference("OPREF00001");
        recordBean.setCountryCode("IN");
        recordBean.setEffectiveDate("01012025");
        recordBean.setAmountCurrency("INR");
        recordBean.setCashflowDirection("FROM");
        recordBean.setAmount(123456.78);
        recordBean.setAmountInBranchCurrency(99999.99);

        // Use reflection to invoke protected appendRecord
        Method method = P06_IACC_01_BoprStringBuffer.class.getDeclaredMethod(
                "appendRecord",
                Class.forName("com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean"),
                String.class
        );
        method.setAccessible(true);
        method.invoke(boprStringBuffer, recordBean, "INR");

        // Access internal buffer
        Field sbField = P06_IACC_01_BoprStringBuffer.class.getDeclaredField("g_o_sb");
        sbField.setAccessible(true);
        StringBuffer sb = (StringBuffer) sbField.get(boprStringBuffer);

        String result = sb.toString();

        // Assertions
        assertNotNull(result);
        assertTrue(result.contains("ABC123"));
        assertTrue(result.contains("OPREF00001"));
        assertTrue(result.contains("IN"));
        assertTrue(result.contains("01012025"));
        assertTrue(result.contains("INR"));
        assertTrue(result.contains("123456")); // part of amount
        assertTrue(result.contains("99999"));  // part of branch amount
    }

    // Stub/mock class for the bean
    public static class P06_IACC_01_BoprRecordBeanMock extends com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean {

        public P06_IACC_01_BoprRecordBeanMock() {
            super(); // If your real class needs arguments, mock them here
        }

        // Setters (you can override or create public ones if needed)
        public void setSenderServiceCode(String val) { this.senderServiceCode = val; }
        public void setOperationReference(String val) { this.operationReference = val; }
        public void setCountryCode(String val) { this.countryCode = val; }
        public void setEffectiveDate(String val) { this.effectiveDate = val; }
        public void setAmountCurrency(String val) { this.amountCurrency = val; }
        public void setCashflowDirection(String val) { this.cashflowDirection = val; }
        public void setAmount(double val) { this.amount = val; }
        public void setAmountInBranchCurrency(Double val) { this.amountInBranchCurrency = val; }

        // Assumes fields like senderServiceCode, etc. exist and are accessible
        // If not, use reflection to set private fields
    }
}
