package com.bnpparibas.atlentic.iacc.bopr.main;

import static org.mockito.Mockito.*;

import com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1;
import org.junit.jupiter.api.Test;
import org.mockito.MockedConstruction;
import org.mockito.MockedStatic;

import java.lang.reflect.Method;
import java.sql.SQLException;

class P06_IACC_01_Main_Executed1Test {

    @Test
    void testExecuted1_withLevel1Action_executesLevel1() throws Exception {
        // Mock static method get_s_actionName to return "LEVEL1"
        try (MockedStatic<P06_IACC_01_Main> mainStaticMock = mockStatic(P06_IACC_01_Main.class);
             MockedConstruction<P06_IACC_01_Level1> mockedConstruction = mockConstruction(P06_IACC_01_Level1.class,
                     (mock, context) -> doNothing().when(mock).execute())) {

            mainStaticMock.when(P06_IACC_01_Main::get_s_actionName).thenReturn("LEVEL1");

            Method method = P06_IACC_01_Main.class.getDeclaredMethod("executed1");
            method.setAccessible(true);
            method.invoke(null);

            // Assert execute() was called once
            P06_IACC_01_Level1 mockInstance = mockedConstruction.constructed().get(0);
            verify(mockInstance, times(1)).execute();
        }
    }

    @Test
    void testExecuted1_withNonLevel1Action_doesNotExecuteLevel1() throws Exception {
        try (MockedStatic<P06_IACC_01_Main> mainStaticMock = mockStatic(P06_IACC_01_Main.class);
             MockedConstruction<P06_IACC_01_Level1> mockedConstruction = mockConstruction(P06_IACC_01_Level1.class)) {

            mainStaticMock.when(P06_IACC_01_Main::get_s_actionName).thenReturn("LEVEL2");

            Method method = P06_IACC_01_Main.class.getDeclaredMethod("executed1");
            method.setAccessible(true);
            method.invoke(null);

            // Assert that no Level1 instance is created or execute is not called
            assert mockedConstruction.constructed().isEmpty();
        }
    }

    @Test
    void testExecuted1_throwsSQLException() throws Exception {
        try (MockedStatic<P06_IACC_01_Main> mainStaticMock = mockStatic(P06_IACC_01_Main.class);
             MockedConstruction<P06_IACC_01_Level1> mockedConstruction = mockConstruction(P06_IACC_01_Level1.class,
                     (mock, context) -> doThrow(new SQLException("DB error")).when(mock).execute())) {

            mainStaticMock.when(P06_IACC_01_Main::get_s_actionName).thenReturn("LEVEL1");

            Method method = P06_IACC_01_Main.class.getDeclaredMethod("executed1");
            method.setAccessible(true);

            try {
                method.invoke(null);
            } catch (Exception e) {
                // unwrap reflection exception
                Throwable cause = e.getCause();
                assert cause instanceof SQLException;
                assert cause.getMessage().equals("DB error");
            }
        }
    }
}
