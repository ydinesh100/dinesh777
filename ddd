package com.bnpparibas.atlentic.irep.ecb.level.test;

import static org.mockito.Mockito.*;

import java.io.IOException;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.bnpparibas.atlentic.irep.ecb.bean.P06_IREP_01_EcbRecordBean;
import com.bnpparibas.atlentic.irep.ecb.level.P06_IREP_01_DBTransaction;
import com.bnpparibas.atlentic.irep.ecb.level.P06_IREP_01_Level;
import com.bnpparibas.atlentic.irep.ecb.main.P06_IREP_01_Main;
import com.bnpparibas.atlentic.irep.ecb.util.exception.P06_IREP_01_ExitApplicationException;
import com.bnpparibas.atlentic.irep.ecb.util.exception.P06_IREP_01_SQLException;

import org.junit.Before;
import org.junit.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

public class P06_IREP_01_LevelExecuteTest {

    private P06_IREP_01_Level<P06_IREP_01_DBTransaction> levelUnderTest;
    private P06_IREP_01_DBTransaction mockDbTransaction;
    private Connection mockConnection;

    @Before
    public void setup() throws Exception {
        // Mock DBTransaction
        mockDbTransaction = mock(P06_IREP_01_DBTransaction.class);
        when(mockDbTransaction.getRecordsBeansList(anyString(), any(Date.class)))
                .thenReturn(new ArrayList<>());

        // Mock Connection
        mockConnection = mock(Connection.class);

        // Concrete subclass for abstract class
        levelUnderTest = new P06_IREP_01_Level<P06_IREP_01_DBTransaction>() {
            @Override
            protected void innerExecute() throws P06_IREP_01_SQLException, IOException, P06_IREP_01_ExitApplicationException {
                // No-op
            }

            @Override
            protected int getLevelNumber() {
                return 5;
            }

            @Override
            protected void initializeDataBaseTransaction(Connection poDataBaseConnection) throws P06_IREP_01_SQLException {
                try {
                    Field field = P06_IREP_01_Level.class.getDeclaredField("g_o_dataBaseTransaction");
                    field.setAccessible(true);
                    field.set(this, mockDbTransaction);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }

            @Override
            protected boolean applyCommit() {
                return true;
            }
        };

        // Set static fields for Main class via reflection
        Field branchField = P06_IREP_01_Main.class.getDeclaredField("g_s_branch");
        branchField.setAccessible(true);
        branchField.set(null, "BR001");

        Field timestampField = P06_IREP_01_Main.class.getDeclaredField("g_o_eventTimestamp");
        timestampField.setAccessible(true);
        timestampField.set(null, new Date());
    }

    @Test
    public void testExecuteSuccess() throws Exception {
        try (MockedStatic<com.bnpparibas.atlentic.common.GlobalAtlentic> staticMock = Mockito.mockStatic(com.bnpparibas.atlentic.common.GlobalAtlentic.class)) {
            staticMock.when(com.bnpparibas.atlentic.common.GlobalAtlentic::getLoanIQConnection)
                      .thenReturn(mockConnection);

            levelUnderTest.execute();

            // Verifications
            verify(mockConnection).setAutoCommit(false);
            verify(mockConnection).commit();
            verify(mockDbTransaction).getRecordsBeansList(anyString(), any(Date.class));
        }
    }
}
