package com.bnpparibas.atlentic.irep.ecb.level.test;

import static org.mockito.Mockito.*;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.bnpparibas.atlentic.irep.ecb.bean.P06_IREP_01_EcbRecordBean;
import com.bnpparibas.atlentic.irep.ecb.level.P06_IREP_01_DBTransaction;
import com.bnpparibas.atlentic.irep.ecb.level.P06_IREP_01_Level;
import com.bnpparibas.atlentic.irep.ecb.main.P06_IREP_01_Main;
import com.bnpparibas.atlentic.irep.ecb.util.exception.P06_IREP_01_ExitApplicationException;
import com.bnpparibas.atlentic.irep.ecb.util.exception.P06_IREP_01_SQLException;

import org.junit.Before;
import org.junit.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

public class P06_IREP_01_LevelTest {

    private Connection mockConnection;

    private P06_IREP_01_Level<P06_IREP_01_DBTransaction> levelUnderTest;

    @Before
    public void setUp() throws Exception {
        // Mock JDBC Connection
        mockConnection = mock(Connection.class);

        // Create a real subclass of the DBTransaction with visible method
        P06_IREP_01_DBTransaction dbTransaction = new P06_IREP_01_DBTransaction() {
            @Override
            protected List<P06_IREP_01_EcbRecordBean> getRecordsBeansList(String branch, Date timestamp)
                    throws P06_IREP_01_SQLException {
                return new ArrayList<>();
            }
        };

        // Create a concrete implementation of Level
        levelUnderTest = new P06_IREP_01_Level<P06_IREP_01_DBTransaction>() {

            @Override
            protected void innerExecute() {
                // No-op for test
            }

            @Override
            protected int getLevelNumber() {
                return 1;
            }

            @Override
            protected void initializeDataBaseTransaction(Connection connection) {
                try {
                    Field field = P06_IREP_01_Level.class.getDeclaredField("g_o_dataBaseTransaction");
                    field.setAccessible(true);
                    field.set(this, dbTransaction);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }

            @Override
            protected boolean applyCommit() {
                return true;
            }
        };

        // Set static fields in Main using reflection
        Field branchField = P06_IREP_01_Main.class.getDeclaredField("g_s_branch");
        branchField.setAccessible(true);
        branchField.set(null, "TEST_BRANCH");

        Field timestampField = P06_IREP_01_Main.class.getDeclaredField("g_o_eventTimestamp");
        timestampField.setAccessible(true);
        timestampField.set(null, new Date());
    }

    @Test
    public void testExecute_Success() throws Exception {
        try (MockedStatic<com.bnpparibas.atlentic.common.GlobalAtlentic> mockedStatic =
                     Mockito.mockStatic(com.bnpparibas.atlentic.common.GlobalAtlentic.class)) {

            mockedStatic.when(com.bnpparibas.atlentic.common.GlobalAtlentic::getLoanIQConnection)
                        .thenReturn(mockConnection);

            levelUnderTest.execute();

            verify(mockConnection).setAutoCommit(false);
            verify(mockConnection).commit();
        }
    }
}
