package com.bnpparibas.atlentic.iacc.bopr.level1;

import com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import com.bnpparibas.atlentic.iacc.bopr.resource.P06_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_SQLException;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;

import java.sql.*;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class P06_IACC_01_Level1DBTransactionTest {

    @Mock Connection mockConnection;
    @Mock PreparedStatement mockPreparedStatement;
    @Mock ResultSet mockResultSet;

    P06_IACC_01_Level1DBTransaction transaction;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
        // Mock the properties manager to return dummy SQL
        mockStaticPropertiesMgr();
        // Create the transaction object with the mocked connection
        transaction = Mockito.spy(new P06_IACC_01_Level1DBTransaction(mockConnection));
    }

    private void mockStaticPropertiesMgr() {
        // Mock static method getQueryFromPropertiesFile if needed
        // Or set up a test implementation in your test resources
        // Here we assume it returns a simple SQL string
        P06_IACC_01_PropertiesMgr mgr = mock(P06_IACC_01_PropertiesMgr.class);
        when(P06_IACC_01_PropertiesMgr.getQueryFromPropertiesFile(anyString()))
                .thenReturn("SELECT * FROM DUAL");
    }

    @Test
    public void testGetExchangeRatesMap() throws Exception {
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(true, false);
        when(mockResultSet.getString("cde_currency")).thenReturn("USD");
        when(mockResultSet.getDouble("exchange_rate")).thenReturn(1.1);

        Map<String, Double> rates = transaction.getExchangeRatesMap();

        assertNotNull(rates);
        assertEquals(1, rates.size());
        assertEquals(Double.valueOf(1.1), rates.get("USD"));
        verify(mockPreparedStatement).close();
        verify(mockResultSet).close();
    }

    @Test
    public void testInsertRecordBean() throws Exception {
        P06_IACC_01_BoprRecordBean bean = mock(P06_IACC_01_BoprRecordBean.class);
        when(bean.getBranchCode()).thenReturn("BR1");
        when(bean.getEventTimestamp()).thenReturn(new java.util.Date());
        when(bean.getDealId()).thenReturn("D1");
        when(bean.getFacilityId()).thenReturn("F1");
        when(bean.getOutstandingId()).thenReturn("O1");
        when(bean.getEventId()).thenReturn("E1");
        when(bean.getEventCode()).thenReturn("CODE");
        when(bean.getCashflowId()).thenReturn("CF1");
        when(bean.getCashflowDirection()).thenReturn("FROM");
        when(bean.getCountryCode()).thenReturn("FR");
        when(bean.getEffectiveDate()).thenReturn(new java.util.Date());
        when(bean.getAmount()).thenReturn(100.0);
        when(bean.getAmountCurrency()).thenReturn("EUR");
        when(bean.getAmountInBranchCurrency()).thenReturn(110.0);
        when(bean.getSenderServiceCode()).thenReturn("SVC");
        when(bean.getOperationReference()).thenReturn("OPREF");

        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeUpdate()).thenReturn(1);

        int result = transaction.insertRecordBean(bean);

        assertEquals(1, result);
        verify(mockPreparedStatement).close();
    }

    @Test
    public void testDeleteConcurrentRecords() throws Exception {
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeUpdate()).thenReturn(1);

        transaction.deleteConcurrentRecords();

        verify(mockPreparedStatement).executeUpdate();
        verify(mockPreparedStatement).close();
    }

    @Test
    public void testFeedingRecordBean() throws Exception {
        P06_IACC_01_BoprRecordBean bean = new P06_IACC_01_BoprRecordBean();
        when(mockResultSet.getString(anyString())).thenReturn("TEST");
        when(mockResultSet.getDate(anyString())).thenReturn(new java.sql.Date(System.currentTimeMillis()));

        doNothing().when(transaction).innerFeedingRecordBean(any(P06_IACC_01_BoprRecordBean.class), any(ResultSet.class));

        transaction.feedingRecordBean(bean, mockResultSet);

        assertEquals("TEST", bean.getDealId());
        assertEquals("TEST", bean.getFacilityId());
        // ... test other fields as needed
    }

    @Test
    public void testGenerateOperationReference() {
        P06_IACC_01_BoprRecordBean bean = new P06_IACC_01_BoprRecordBean();
        bean.setEventCode("PAPER");
        bean.setIdOwner("OWNER1");
        bean.setAmtShare("100");
        bean.setBorrowerServiceGrp("BSG");
        bean.setlenderServiceGrp("LSG");
        bean.setFacilityId("F1");
        bean.setDealId("D1");
        bean.setOutstandingId("O1");
        bean.setCdeOwnerType("FAC");
        bean.setCdFeeCat("ONG");

        String ref = transaction.generateOperationReference(bean);
        assertNotNull(ref);
        // Add more assertions based on your business logic
    }
}
