@Test
public void testGetRecordsBeansList_SQLExceptionHandling() {
    // Simulate SQLException on prepareStatement
    try {
        when(mockConnection.prepareStatement(anyString()))
            .thenThrow(new SQLException("Simulated DB error"));

        // Subclass to expose method
        class TestTransaction extends P86_IACC_01_DBTransaction {
            TestTransaction(Connection conn) {
                super(conn);
            }

            @Override
            protected void feedingRecordBean(P06_IACC_01_BoprRecordBean bean, ResultSet rs) throws SQLException {
                // Not reached
            }

            @Override
            protected void innerFeedingRecordBean(P06_IACC_01_BoprRecordBean bean, ResultSet rs) throws SQLException {}

            @Override
            protected String getSelectRecordsQueryKey() {
                return "test.query.key";
            }

            @Override
            protected void feedRecordsBeansListPreparedStatement(PreparedStatement ps) throws SQLException {}
            
            public List<P06_IACC_01_BoprRecordBean> callGetRecordsBeansList() throws P06_IACC_01_SQLException {
                return this.getRecordsBeansList();
            }
        }

        TestTransaction tx = new TestTransaction(mockConnection);

        // Act & Assert: Should throw custom exception
        tx.callGetRecordsBeansList();
        fail("Expected P06_IACC_01_SQLException to be thrown");

    } catch (P06_IACC_01_SQLException ex) {
        assertTrue(ex.getMessage().contains("An error occurred while getting records"));
    } catch (Exception ex) {
        fail("Unexpected exception: " + ex);
    }
}
