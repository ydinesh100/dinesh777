import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.IOException;
import java.lang.reflect.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Collections;

import org.junit.Before;
import org.junit.Test;

import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.common.utils.DBUtils;
import com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import com.bnpparibas.atlentic.iacc.bopr.exception.P06_IACC_01_ExitApplicationException;
import com.bnpparibas.atlentic.iacc.bopr.exception.P06_IACC_01_SQLException;
import com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_Level;
import com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_DBTransaction;

public class P06_IACC_01_LevelTest {

    private P06_IACC_01_Level<P06_IACC_01_DBTransaction> level;
    private Connection mockConnection;
    private P06_IACC_01_DBTransaction mockTransaction;

    @Before
    public void setUp() throws Exception {
        // Create an anonymous subclass for abstract class
        level = new P06_IACC_01_Level<P06_IACC_01_DBTransaction>() {
            @Override
            protected void innerExecute() throws IOException, SQLException, P06_IACC_01_SQLException {
                throw new IOException("Simulated IOException");
            }
        };

        // Mock Connection and Transaction
        mockConnection = mock(Connection.class);
        mockTransaction = mock(P06_IACC_01_DBTransaction.class);

        // Setup GlobalAtlentic static method using reflection
        Field loanIQConnectionField = GlobalAtlentic.class.getDeclaredField("loanIQConnection");
        loanIQConnectionField.setAccessible(true);
        loanIQConnectionField.set(null, mockConnection);

        // Reflection to inject mock transaction into superclass field
        Field dbTransactionField = P06_IACC_01_Level.class.getDeclaredField("g_o_dataBaseTransaction");
        dbTransactionField.setAccessible(true);
        dbTransactionField.set(level, mockTransaction);

        when(mockTransaction.getRecordsBeansList()).thenReturn(Collections.singletonList(new P06_IACC_01_BoprRecordBean()));
    }

    @Test
    public void testExecute_IOException_dbConnectionRollbackCovered() throws Exception {
        // Simulate rollback throws SQLException
        doThrow(new SQLException("Rollback failed")).when(mockConnection).rollback();

        try {
            level.execute();
            fail("Expected P06_IACC_01_ExitApplicationException");
        } catch (P06_IACC_01_ExitApplicationException e) {
            assertTrue(e.getMessage().contains("Simulated IOException"));
        }

        // Verify rollback attempted and closeConnection was called
        verify(mockConnection).rollback();
        verify(mockConnection).setAutoCommit(false);
    }
}
