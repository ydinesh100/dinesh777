import static com.github.stefanbirkner.systemlambda.SystemLambda.catchSystemExit;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import com.bnpparibas.atlentic.common.Connexion;
import com.bnpparibas.atlentic.risk.ost.P00_IRSK_01E00_TraitementDataost;
import com.bnpparibas.atlentic.risk.ost.P00_IRSK_03_trace;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

import org.junit.jupiter.api.Test;

class P00_IRSK_01E00_TraitementDataostTest {

    @Test
    void testConstructorSystemExitOnException() throws Exception {
        // Arrange
        Connexion mockConnexion = mock(Connexion.class);
        Connection mockJdbc = mock(Connection.class);
        when(mockConnexion.getConnection()).thenThrow(new SQLException("DB error"));

        // Act
        int exitCode = catchSystemExit(() -> {
            new P00_IRSK_01E00_TraitementDataost(mockConnexion, 1);
        });

        // Assert
        assertEquals(8, exitCode);
    }

    @Test
    void testExecuteDeleteStatement_SystemExitOnSQLException() throws Exception {
        // Arrange
        Connexion mockConnexion = mock(Connexion.class);
        Connection mockJdbc = mock(Connection.class);
        Statement mockStatement = mock(Statement.class);

        when(mockConnexion.getConnection()).thenReturn(mockJdbc);
        when(mockJdbc.createStatement()).thenReturn(mockStatement);
        doThrow(new SQLException("DELETE FAIL", "42000", 999)).when(mockStatement).executeUpdate(anyString());

        P00_IRSK_01E00_TraitementDataost traitement = new P00_IRSK_01E00_TraitementDataost(mockConnexion, 1);
        P00_IRSK_03_trace mockLogger = mock(P00_IRSK_03_trace.class);

        // Act
        int exitCode = catchSystemExit(() -> {
            traitement.executeDeleteStatement(mockLogger, mockConnexion, "DELETE FROM dummy", "DELETE FAIL");
        });

        // Assert
        assertEquals(8, exitCode);
    }

    @Test
    void testTraitementDataOst_SystemExitOnException() throws Exception {
        // Arrange
        Connexion mockConnexion = mock(Connexion.class);
        Connection mockJdbc = mock(Connection.class);
        when(mockConnexion.getConnection()).thenReturn(mockJdbc);
        Statement mockStmt = mock(Statement.class);
        when(mockJdbc.createStatement()).thenThrow(new SQLException("traiterTableDataOst failure"));

        P00_IRSK_01E00_TraitementDataost traitement = new P00_IRSK_01E00_TraitementDataost(mockConnexion, 1);

        // Act
        int exitCode = catchSystemExit(() -> {
            traitement.traiterTableDataOst(mock(P00_IRSK_03_trace.class), mockConnexion);
        });

        // Assert
        assertEquals(8, exitCode);
    }

    @Test
    void testTraitementAccrual_SystemExitOnException() throws Exception {
        // Arrange
        Connexion mockConnexion = mock(Connexion.class);
        Connection mockJdbc = mock(Connection.class);
        when(mockConnexion.getConnection()).thenReturn(mockJdbc);
        when(mockJdbc.createStatement()).thenThrow(new SQLException("traiterTableAccrual failure"));

        P00_IRSK_01E00_TraitementDataost traitement = new P00_IRSK_01E00_TraitementDataost(mockConnexion, 1);

        // Act
        int exitCode = catchSystemExit(() -> {
            traitement.traiterTableAccrual(mock(P00_IRSK_03_trace.class), mockConnexion);
        });

        // Assert
        assertEquals(8, exitCode);
    }

    @Test
    void testTraitementSchedule_SystemExitOnException() throws Exception {
        // Arrange
        Connexion mockConnexion = mock(Connexion.class);
        Connection mockJdbc = mock(Connection.class);
        when(mockConnexion.getConnection()).thenReturn(mockJdbc);
        when(mockJdbc.createStatement()).thenThrow(new SQLException("traiterTableSchedule failure"));

        P00_IRSK_01E00_TraitementDataost traitement = new P00_IRSK_01E00_TraitementDataost(mockConnexion, 1);

        // Act
        int exitCode = catchSystemExit(() -> {
            traitement.traiterTableSchedule(mock(P00_IRSK_03_trace.class), mockConnexion);
        });

        // Assert
        assertEquals(8, exitCode);
    }
}
