import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2DBTransaction;
import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ExitApplicationException;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_SQLException;
import org.junit.*;
import org.junit.rules.TemporaryFolder;

import java.io.File;
import java.lang.reflect.*;
import java.sql.Connection;
import java.util.*;

import static org.junit.Assert.assertTrue;

public class P06_IACC_01_Level2Test {

    // âœ… Override DBTransaction class to expose getBranchCurrency()
    public static class TestLevel2DBTransaction extends P06_IACC_01_Level2DBTransaction {
        public TestLevel2DBTransaction(Connection conn) {
            super(conn);
        }

        @Override
        public String getBranchCurrency() {
            return "USD";
        }
    }

    private P06_IACC_01_Level2 level2;
    private List<Object> dummyRecords;

    @Rule
    public TemporaryFolder folder = new TemporaryFolder();

    @Before
    public void setUp() throws Exception {
        // Instantiate level2
        level2 = P06_IACC_01_Level2.class.getDeclaredConstructor().newInstance();

        // Reflectively instantiate 2 dummy beans
        Class<?> beanClass = Class.forName("com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean");
        dummyRecords = new ArrayList<>();
        dummyRecords.add(createInstance(beanClass));
        dummyRecords.add(createInstance(beanClass));

        // Inject g_o_recordBeansList
        Field recordField = level2.getClass().getSuperclass().getDeclaredField("g_o_recordBeansList");
        recordField.setAccessible(true);
        recordField.set(level2, dummyRecords);

        // Inject g_o_dataBaseTransaction with overridden test class
        Field txField = level2.getClass().getSuperclass().getDeclaredField("g_o_dataBaseTransaction");
        txField.setAccessible(true);
        txField.set(level2, new TestLevel2DBTransaction(null));

        // Set environment variable for file output dir
        String outDir = folder.newFolder("liq-out").getAbsolutePath() + File.separator;
        setEnv("LIQFilesOutDirectory", outDir);

        // Set static file name
        Field fileNameField = P06_IACC_01_Main.class.getDeclaredField("g_s_textFileName");
        fileNameField.setAccessible(true);
        fileNameField.set(null, "test_output.txt");
    }

    @Test
    public void testInnerExecute_createsFileWithContent() throws Exception {
        level2.innerExecute();

        String path = System.getenv("LIQFilesOutDirectory") + P06_IACC_01_Main.g_s_textFileName;
        File outputFile = new File(path);

        assertTrue("Output file should exist", outputFile.exists());
        assertTrue("Output file should not be empty", outputFile.length() > 0);
    }

    // Reflectively instantiate class with private constructor
    private Object createInstance(Class<?> clazz) throws Exception {
        Constructor<?> ctor = clazz.getDeclaredConstructor();
        ctor.setAccessible(true);
        return ctor.newInstance();
    }

    // Set env variable using reflection
    @SuppressWarnings("unchecked")
    private static void setEnv(String key, String value) throws Exception {
        Map<String, String> newenv = new HashMap<>(System.getenv());
        newenv.put(key, value);

        Class<?> processEnvironment = Class.forName("java.lang.ProcessEnvironment");
        try {
            Field theEnvironmentField = processEnvironment.getDeclaredField("theEnvironment");
            theEnvironmentField.setAccessible(true);
            Map<String, String> env = (Map<String, String>) theEnvironmentField.get(null);
            env.put(key, value);

            Field ciEnvField = processEnvironment.getDeclaredField("theCaseInsensitiveEnvironment");
            ciEnvField.setAccessible(true);
            Map<String, String> cienv = (Map<String, String>) ciEnvField.get(null);
            cienv.put(key, value);
        } catch (NoSuchFieldException e) {
            // Fallback for JVMs without ProcessEnvironment
            Class<?>[] classes = Collections.class.getDeclaredClasses();
            for (Class<?> cl : classes) {
                if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) {
                    Field field = cl.getDeclaredField("m");
                    field.setAccessible(true);
                    Object obj = field.get(System.getenv());
                    Map<String, String> map = (Map<String, String>) obj;
                    map.clear();
                    map.putAll(newenv);
                }
            }
        }
    }
}
