package com.bnpparibas.atlentic.iacc.bopr.main.test;

import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.common.Pee_IACC_00_Utility;
import com.bnpparibas.atlentic.common.gen.string.utilities.StringConverter;
import com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.resource.P06_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ExitApplicationException;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ParameterException;

import org.junit.jupiter.api.*;
import org.mockito.MockedConstruction;
import org.mockito.MockedStatic;

import java.lang.reflect.Method;
import java.sql.Connection;
import java.util.Date;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class P06_IACC_01_MainTest {

    private Method executeMethod;

    @BeforeAll
    void setup() throws Exception {
        executeMethod = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);
    }

    @Test
    void test_execute_success_level1_short_args() throws Exception {
        String[] args = { "level1", "BRANCH", "01/01/2025 00:00:00" };
        P06_IACC_01_Main.set_args(args);

        try (
            MockedStatic<GlobalAtlentic> globalMock = mockStatic(GlobalAtlentic.class);
            MockedStatic<Pee_IACC_00_Utility> utilMock = mockStatic(Pee_IACC_00_Utility.class);
            MockedStatic<P06_IACC_01_PropertiesMgr> propMock = mockStatic(P06_IACC_01_PropertiesMgr.class);
            MockedConstruction<P06_IACC_01_Level1> level1Mock = mockConstruction(P06_IACC_01_Level1.class,
                (mock, context) -> doNothing().when(mock).execute())
        ) {
            Connection mockConn = mock(Connection.class);
            globalMock.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mockConn);
            utilMock.when(() -> Pee_IACC_00_Utility.getAtlIntfDateByBranch(any(), any()))
                    .thenReturn(Map.of("INTF_EVENT_DATE", "01/01/2025 00:00:00",
                                       "INTF_SYSTEM_BEGIN_DATE", "01/01/2025 00:00:00",
                                       "INTF_SYSTEM_END_DATE", "02/01/2025 00:00:00"));
            propMock.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");

            assertDoesNotThrow(() -> {
                try {
                    executeMethod.invoke(null);
                } catch (Exception e) {
                    if (e.getCause() instanceof SecurityException && e.getCause().getMessage().contains("System.exit")) {
                        // expected
                    } else {
                        throw e;
                    }
                }
            });

            assertEquals(1, level1Mock.constructed().size());
        }
    }

    @Test
    void test_execute_success_level2() throws Exception {
        String[] args = { "level2", "BRANCH", "01/01/2025 00:00:00", "file.txt" };
        P06_IACC_01_Main.set_args(args);

        try (
            MockedStatic<P06_IACC_01_PropertiesMgr> propMock = mockStatic(P06_IACC_01_PropertiesMgr.class);
            MockedConstruction<P06_IACC_01_Level2> level2Mock = mockConstruction(P06_IACC_01_Level2.class,
                (mock, context) -> doNothing().when(mock).execute())
        ) {
            propMock.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");
            propMock.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("level2");

            assertDoesNotThrow(() -> {
                try {
                    executeMethod.invoke(null);
                } catch (Exception e) {
                    if (e.getCause() instanceof SecurityException && e.getCause().getMessage().contains("System.exit")) {
                        // expected
                    } else {
                        throw e;
                    }
                }
            });

            assertEquals(1, level2Mock.constructed().size());
        }
    }

    @Test
    void test_execute_invalid_action_should_exit() throws Exception {
        String[] args = { "INVALID", "BRANCH", "01/01/2025 00:00:00" };
        P06_IACC_01_Main.set_args(args);

        try (
            MockedStatic<P06_IACC_01_PropertiesMgr> propMock = mockStatic(P06_IACC_01_PropertiesMgr.class)
        ) {
            propMock.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");
            propMock.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("level2");

            Exception exception = assertThrows(Exception.class, () -> executeMethod.invoke(null));
            assertTrue(exception.getCause() instanceof P06_IACC_01_ParameterException);
        }
    }

    @Test
    void test_execute_missing_args_should_throw() throws Exception {
        String[] args = {};
        P06_IACC_01_Main.set_args(args);

        Exception exception = assertThrows(Exception.class, () -> executeMethod.invoke(null));
        assertTrue(exception.getCause() instanceof P06_IACC_01_ParameterException);
    }

    @Test
    void test_execute_level1_with_invalid_dates_should_throw() throws Exception {
        String[] args = { "level1", "BRANCH", "01/01/2025 00:00:00" };
        P06_IACC_01_Main.set_args(args);

        try (
            MockedStatic<GlobalAtlentic> globalMock = mockStatic(GlobalAtlentic.class);
            MockedStatic<Pee_IACC_00_Utility> utilMock = mockStatic(Pee_IACC_00_Utility.class);
            MockedStatic<P06_IACC_01_PropertiesMgr> propMock = mockStatic(P06_IACC_01_PropertiesMgr.class)
        ) {
            globalMock.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mock(Connection.class));
            utilMock.when(() -> Pee_IACC_00_Utility.getAtlIntfDateByBranch(any(), any()))
                    .thenReturn(Map.of("INTF_SYSTEM_BEGIN_DATE", "03/01/2025 00:00:00",
                                       "INTF_SYSTEM_END_DATE", "01/01/2025 00:00:00",
                                       "INTF_EVENT_DATE", "01/01/2025 00:00:00"));
            propMock.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");

            Exception exception = assertThrows(Exception.class, () -> executeMethod.invoke(null));
            assertTrue(exception.getCause() instanceof P06_IACC_01_ParameterException);
        }
    }
}
