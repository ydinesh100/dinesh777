package com.bnpparibas.atlentic.iacc.bopr.main.test;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.read.ListAppender;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Method;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class P06_IACC_01_Main_LogLoopTest {

    private ListAppender<ILoggingEvent> listAppender;

    @BeforeEach
    void setupLogger() {
        Logger logger = (Logger) LoggerFactory.getLogger("P86_IACC_BPOR_BE"); // Matches @CustomLog(topic = ...)
        listAppender = new ListAppender<>();
        listAppender.start();
        logger.addAppender(listAppender);
    }

    @Test
    void testLoggingOfArgsLoop() throws Exception {
        // Arrange
        String[] testArgs = {"arg1", "arg2", "arg3"};

        Class<?> clazz = Class.forName("com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main");

        // Inject args via reflection
        Method setArgsMethod = clazz.getDeclaredMethod("set_args", String[].class);
        setArgsMethod.setAccessible(true);
        setArgsMethod.invoke(null, (Object) testArgs);

        // Create dummy object (though execute is static)
        Object mainInstance = clazz.getDeclaredConstructor().newInstance();

        // Invoke only the logging part (we create a wrapper for isolated testing)
        Method executeMethod = clazz.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);

        try {
            executeMethod.invoke(mainInstance);
        } catch (Exception ignored) {
            // We only want to test the logging loop, not full execution
        }

        // Assert
        List<ILoggingEvent> logsList = listAppender.list;

        // Check if the expected log lines exist
        long loggedParams = logsList.stream()
                .filter(event -> event.getLevel().equals(Level.INFO))
                .filter(event -> event.getFormattedMessage().startsWith("Parameter"))
                .count();

        assertEquals(testArgs.length, loggedParams, "Each parameter should be logged once.");
    }
}
