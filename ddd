import static com.github.stefanbirkner.systemlambda.SystemLambda.catchSystemExit;
import static org.junit.jupiter.api.Assertions.*;

import java.io.File;
import java.sql.PreparedStatement;
import java.util.HashMap;
import java.util.Map;

import com.bnpparibas.atlentic.risk.utils.POO_IRSK_trace;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

class POO_IRSK_traceTest {

    private POO_IRSK_trace trace;

    @BeforeEach
    void setUp() {
        trace = new POO_IRSK_trace();
    }

    @Test
    void testGetCommonLogInsertQueryWithId() {
        String id = "123";
        String query = trace.getCommonLogInsertQuery(id);
        assertNotNull(query);
        assertTrue(query.contains("?, 'OMG', 'RISK',"));
    }

    @Test
    void testGetCommonLogInsertQueryWithNullId() {
        String query = trace.getCommonLogInsertQuery(null);
        assertNotNull(query);
        assertTrue(query.contains("SEQ_COMMON_ID_LOG.nextval"));
    }

    @Test
    void testSetParametersWithId() throws Exception {
        Map<String, String> param = new HashMap<>();
        param.put(POO_IRSK_trace.ID, "111");
        param.put(POO_IRSK_trace.LEVEL, "INFO");
        param.put(POO_IRSK_trace.MESSAGE, "Sample log");

        PreparedStatement preparedStatement = Mockito.mock(PreparedStatement.class);

        PreparedStatement result = trace.setParameters(preparedStatement, param);

        // Verify all setString calls
        Mockito.verify(preparedStatement).setString(1, "111");
        Mockito.verify(preparedStatement).setString(2, "INFO");
        Mockito.verify(preparedStatement).setString(3, "Sample log");

        assertEquals(preparedStatement, result);
    }

    @Test
    void testSetParametersWithoutIdTriggersFatalExit() throws Exception {
        Map<String, String> param = new HashMap<>();
        param.put(POO_IRSK_trace.LEVEL, "INFO");
        param.put(POO_IRSK_trace.MESSAGE, "Something went wrong");

        PreparedStatement preparedStatement = Mockito.mock(PreparedStatement.class);

        int status = catchSystemExit(() -> {
            trace.setParameters(preparedStatement, param);
        });

        assertEquals(8, status);
    }

    @Test
    void testFatalExitTriggersSystemExitAndCreatesLogFile() throws Exception {
        File logFile = new File("F00_IRSK_OX01.log");
        if (logFile.exists()) {
            assertTrue(logFile.delete()); // clean slate
        }

        int status = catchSystemExit(() -> {
            trace.fatalExit("testMethod", "RuntimeException", "Simulated fatal failure");
        });

        assertEquals(8, status);
        assertTrue(logFile.exists(), "Log file should be created");
    }
}
