package com.bnpparibas.atlentic.iacc.bopr.main;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.mockito.Mockito.mockStatic;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockedStatic;
import org.mockito.junit.MockitoJUnitRunner;

import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.properties.P06_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.iacc.common.exceptions.P06_IACC_01_ParameterException;
import com.bnpparibas.atlentic.iacc.common.utils.StringConverter;

@RunWith(MockitoJUnitRunner.class)
public class P06_IACC_01_MainTest {

    private Object createMainInstance(String[] args) throws Exception {
        Constructor<P06_IACC_01_Main> constructor = P06_IACC_01_Main.class.getDeclaredConstructor(String[].class);
        constructor.setAccessible(true);
        return constructor.newInstance((Object) args);
    }

    private void invokeExecute(Object mainInstance) throws Exception {
        Method method = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        method.setAccessible(true);
        method.invoke(mainInstance);
    }

    @Test
    public void testExecute_validLevel1_with5Params() throws Exception {
        String[] args = {
            "levell", "BR001", "01/01/2023 12:00:00", "01/01/2023 00:00:00", "01/01/2023 23:59:59"
        };
        Object mainInstance = createMainInstance(args);

        try (
            MockedStatic<GlobalAtlentic> mockedGA = mockStatic(GlobalAtlentic.class);
            MockedStatic<P06_IACC_01_PropertiesMgr> mockedProps = mockStatic(P06_IACC_01_PropertiesMgr.class);
            MockedStatic<StringConverter> mockedConverter = mockStatic(StringConverter.class);
            MockedStatic<P06_IACC_01_Level1> mockedLevel1 = mockStatic(P06_IACC_01_Level1.class)
        ) {
            Connection mockConn = mock(Connection.class);
            mockedGA.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mockConn);
            mockedProps.when(P06_IACC_01_PropertiesMgr::getLevellActionName).thenReturn("levell");

            Date eventDate = new Date();
            Date beginDate = new Date(eventDate.getTime() - 1000000);
            Date endDate = new Date(eventDate.getTime() + 1000000);

            mockedConverter.when(() -> StringConverter.StringToDate("01/01/2023 12:00:00")).thenReturn(eventDate);
            mockedConverter.when(() -> StringConverter.StringToDate("01/01/2023 00:00:00")).thenReturn(beginDate);
            mockedConverter.when(() -> StringConverter.StringToDate("01/01/2023 23:59:59")).thenReturn(endDate);

            P06_IACC_01_Level1 mockLevel1 = mock(P06_IACC_01_Level1.class);
            mockedLevel1.when(P06_IACC_01_Level1::new).thenReturn(mockLevel1);

            invokeExecute(mainInstance);

            verify(mockLevel1).execute();
        }
    }

    @Test
    public void testExecute_validLevel2_with4Params() throws Exception {
        String[] args = {
            "level2", "BR001", "01/01/2023 12:00:00", "file.txt"
        };
        Object mainInstance = createMainInstance(args);

        try (
            MockedStatic<GlobalAtlentic> mockedGA = mockStatic(GlobalAtlentic.class);
            MockedStatic<P06_IACC_01_PropertiesMgr> mockedProps = mockStatic(P06_IACC_01_PropertiesMgr.class);
            MockedStatic<StringConverter> mockedConverter = mockStatic(StringConverter.class);
            MockedStatic<P06_IACC_01_Level2> mockedLevel2 = mockStatic(P06_IACC_01_Level2.class)
        ) {
            Connection mockConn = mock(Connection.class);
            mockedGA.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mockConn);
            mockedProps.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("level2");

            Date eventDate = new Date();
            mockedConverter.when(() -> StringConverter.StringToDate("01/01/2023 12:00:00")).thenReturn(eventDate);

            P06_IACC_01_Level2 mockLevel2 = mock(P06_IACC_01_Level2.class);
            mockedLevel2.when(P06_IACC_01_Level2::new).thenReturn(mockLevel2);

            invokeExecute(mainInstance);

            verify(mockLevel2).execute();
        }
    }

    @Test(expected = P06_IACC_01_ParameterException.class)
    public void testExecute_invalidParamCount_throwsException() throws Exception {
        String[] args = { "levell" };
        Object mainInstance = createMainInstance(args);
        invokeExecute(mainInstance);
    }

    @Test(expected = P06_IACC_01_ParameterException.class)
    public void testExecute_unknownAction_throwsException() throws Exception {
        String[] args = { "unknown", "BR001", "01/01/2023 12:00:00" };
        Object mainInstance = createMainInstance(args);

        try (
            MockedStatic<GlobalAtlentic> mockedGA = mockStatic(GlobalAtlentic.class);
            MockedStatic<StringConverter> mockedConverter = mockStatic(StringConverter.class)
        ) {
            Connection conn = mock(Connection.class);
            mockedGA.when(GlobalAtlentic::getLoanIQConnection).thenReturn(conn);
            Date event = new Date();
            mockedConverter.when(() -> StringConverter.StringToDate("01/01/2023 12:00:00")).thenReturn(event);

            invokeExecute(mainInstance);
        }
    }

    @Test(expected = P06_IACC_01_ParameterException.class)
    public void testExecute_invalidDateOrder_throwsException() throws Exception {
        String[] args = {
            "levell", "BR001", "01/01/2023 12:00:00", "01/01/2023 23:59:59", "01/01/2023 00:00:00"
        };
        Object mainInstance = createMainInstance(args);

        try (
            MockedStatic<GlobalAtlentic> mockedGA = mockStatic(GlobalAtlentic.class);
            MockedStatic<P06_IACC_01_PropertiesMgr> mockedProps = mockStatic(P06_IACC_01_PropertiesMgr.class);
            MockedStatic<StringConverter> mockedConverter = mockStatic(StringConverter.class)
        ) {
            Connection conn = mock(Connection.class);
            mockedGA.when(GlobalAtlentic::getLoanIQConnection).thenReturn(conn);
            mockedProps.when(P06_IACC_01_PropertiesMgr::getLevellActionName).thenReturn("levell");

            Date eventDate = new Date();
            Date beginDate = new Date(eventDate.getTime() + 1000000);
            Date endDate = new Date(eventDate.getTime() - 1000000);

            mockedConverter.when(() -> StringConverter.StringToDate("01/01/2023 12:00:00")).thenReturn(eventDate);
            mockedConverter.when(() -> StringConverter.StringToDate("01/01/2023 23:59:59")).thenReturn(beginDate);
            mockedConverter.when(() -> StringConverter.StringToDate("01/01/2023 00:00:00")).thenReturn(endDate);

            invokeExecute(mainInstance);
        }
    }
}
