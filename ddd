package com.bnpparibas.atlentic.iacc.bopr.main.test;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.read.ListAppender;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Method;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class P06_IACC_01_MainTest {

    private ListAppender<ILoggingEvent> logAppender;

    @BeforeEach
    void setUpLogger() {
        Logger logger = (Logger) LoggerFactory.getLogger("P86_IACC_BPOR_BE"); // from @CustomLog(topic = ...)
        logAppender = new ListAppender<>();
        logAppender.start();
        logger.addAppender(logAppender);
    }

    @Test
    void testParameterLoggingLoop() throws Exception {
        // Arrange: provide dummy args
        String[] testArgs = {"alpha", "beta", "gamma"};

        // Use reflection to set static args
        Class<?> clazz = Class.forName("com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main");
        Method setArgsMethod = clazz.getDeclaredMethod("set_args", String[].class);
        setArgsMethod.setAccessible(true);
        setArgsMethod.invoke(null, (Object) testArgs);

        // Use reflection to get and invoke execute()
        Method executeMethod = clazz.getDeclaredDeclaredMethod("execute");
        executeMethod.setAccessible(true);
        try {
            executeMethod.invoke(null); // since it's a static method
        } catch (Exception e) {
            // Swallow exception as execute may call System.exit()
        }

        // Act: capture the logs
        List<ILoggingEvent> logs = logAppender.list;

        // Assert: for-loop logged each parameter
        long paramLogs = logs.stream()
                .filter(log -> log.getLevel().equals(Level.INFO))
                .filter(log -> log.getFormattedMessage().startsWith("Parameter"))
                .count();

        assertEquals(testArgs.length, paramLogs, "Each parameter should be logged once.");
    }
}
