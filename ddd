import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.io.IOException;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Collections;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_DBTransaction;
import com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_Level;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ExitApplicationException;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_SQLException;

public class P06_IACC_01_LevelExecuteTest {

    @Mock
    private Connection mockConnection;

    @Mock
    private P06_IACC_01_DBTransaction mockTransaction;

    private P06_IACC_01_Level<P06_IACC_01_DBTransaction> testLevel;

    @Before
    public void setup() throws Exception {
        MockitoAnnotations.initMocks(this);

        // Set mock static field GlobalAtlentic.g_o_loanIQConnection
        Field connField = GlobalAtlentic.class.getDeclaredField("g_o_loanIQConnection");
        connField.setAccessible(true);
        connField.set(null, mockConnection);

        // Simulate getAutoCommit and commit behavior
        when(mockConnection.getAutoCommit()).thenReturn(false);

        // Create test bean
        P06_IACC_01_BoprRecordBean bean = new P06_IACC_01_BoprRecordBean();
        // Set fields via reflection if no public setter exists
        Field amountField = P06_IACC_01_BoprRecordBean.class.getDeclaredField("amount");
        amountField.setAccessible(true);
        amountField.set(bean, 100.0);

        when(mockTransaction.getRecordsBeansList()).thenReturn(Collections.singletonList(bean));

        // Inline concrete subclass of abstract class
        testLevel = new P06_IACC_01_Level<P06_IACC_01_DBTransaction>() {
            @Override
            protected void innerExecute() throws P06_IACC_01_SQLException, IOException, P06_IACC_01_ExitApplicationException {
                // do nothing
            }

            @Override
            protected int getLevelNumber() {
                return 1;
            }

            @Override
            protected void initializeDataBaseTransaction(Connection p_o_dataBaseConnection) {
                this.g_o_dataBaseTransaction = mockTransaction;
            }

            @Override
            protected boolean applyCommit() {
                return true;
            }
        };
    }

    @Test
    public void testExecuteSuccess() throws Exception {
        testLevel.execute();

        // Verify expected interactions
        verify(mockConnection).setAutoCommit(false);
        verify(mockTransaction).getRecordsBeansList();
        verify(mockConnection).commit();

        assertNotNull(testLevel.g_o_recordBeansList);
        assertEquals(1, testLevel.g_o_recordBeansList.size());
    }
}
