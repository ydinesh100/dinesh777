package com.bnpparibas.atlentic.irep.ecb.level.test;

import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.irep.ecb.bean.P06_IREP_01_EcbRecordBean;
import com.bnpparibas.atlentic.irep.ecb.level.P06_IREP_01_DBTransaction;
import com.bnpparibas.atlentic.irep.ecb.level.P06_IREP_01_Level;
import com.bnpparibas.atlentic.irep.ecb.util.exception.P06_IREP_01_ExitApplicationException;
import com.bnpparibas.atlentic.irep.ecb.util.exception.P06_IREP_01_SQLException;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.IOException;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;

import static org.mockito.Mockito.*;

import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class P06_IREP_01_LevelTest {

    private P06_IREP_01_Level<P06_IREP_01_DBTransaction> level;

    private Connection mockConnection;
    private P06_IREP_01_DBTransaction mockTransaction;

    @Before
    public void setUp() throws Exception {
        mockConnection = mock(Connection.class);
        mockTransaction = mock(P06_IREP_01_DBTransaction.class);

        // Create anonymous subclass of abstract class
        level = new P06_IREP_01_Level<P06_IREP_01_DBTransaction>() {
            @Override
            protected void innerExecute() {
                // no-op
            }

            @Override
            protected int getLevelNumber() {
                return 99;
            }

            @Override
            protected void initializeDataBaseTransaction(Connection connection) {
                // sets mockTransaction manually
                try {
                    Field f = P06_IREP_01_Level.class.getDeclaredField("g_o_dataBaseTransaction");
                    f.setAccessible(true);
                    f.set(this, mockTransaction);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }

            @Override
            protected boolean applyCommit() {
                return true;
            }
        };

        // Prepare mock for getRecordsBeansList
        when(mockTransaction.getRecordsBeansList(anyString(), any()))
                .thenReturn(new ArrayList<>());
    }

    @Test
    public void testExecute() throws Exception {
        try (MockedStatic<GlobalAtlentic> globalMock = Mockito.mockStatic(GlobalAtlentic.class)) {
            globalMock.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mockConnection);

            level.execute();

            verify(mockConnection).setAutoCommit(false);
            verify(mockConnection).commit();
            verify(mockTransaction).getRecordsBeansList(anyString(), any());
        }
    }
}
