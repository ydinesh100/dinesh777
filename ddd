import org.junit.*;
import static org.junit.Assert.*;
import org.mockito.*;

import java.lang.reflect.*;
import java.sql.*;
import java.util.*;

import static org.mockito.Mockito.*;

public class P06_IACC_01_Level1DBTransactionTest {

    @Mock
    private Connection mockConn;

    @Mock
    private ResultSet mockRs;

    @Mock
    private PreparedStatement mockPs;

    private P06_IACC_01_Level1DBTransaction transaction;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
        transaction = new P06_IACC_01_Level1DBTransaction();
        setPrivateField(transaction, "connection", mockConn);
    }

    private void setPrivateField(Object target, String fieldName, Object value) throws Exception {
        Field field = target.getClass().getSuperclass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(target, value);
    }

    private Object invokePrivateMethod(Object target, String methodName, Class<?>[] paramTypes, Object... args) throws Exception {
        Method method = target.getClass().getDeclaredMethod(methodName, paramTypes);
        method.setAccessible(true);
        return method.invoke(target, args);
    }

    private P06_IACC_01_RecordBean createSampleRecordBean() {
        P06_IACC_01_RecordBean bean = new P06_IACC_01_RecordBean();
        bean.setBatchId("B001");
        bean.setSeqNo("S001");
        bean.setTranDate("2024-06-01");
        bean.setAmount("100.00");
        bean.setSrcCcy("USD");
        bean.setDstCcy("INR");
        bean.setTransactionType("ELEMENTARY");
        return bean;
    }

    @Test
    public void testGetExchangeRateMap() throws Exception {
        when(mockConn.prepareStatement(anyString())).thenReturn(mockPs);
        when(mockPs.executeQuery()).thenReturn(mockRs);
        when(mockRs.next()).thenReturn(true, true, false);
        when(mockRs.getString("SRC_CCY_CD")).thenReturn("USD", "EUR");
        when(mockRs.getString("DST_CCY_CD")).thenReturn("INR", "INR");
        when(mockRs.getString("RATE")).thenReturn("75.50", "89.30");

        Map<String, String> rateMap = transaction.getExchangeRateMap();

        assertEquals("75.50", rateMap.get("USDINR"));
        assertEquals("89.30", rateMap.get("EURINR"));
    }

    @Test
    public void testInsertRecords() throws Exception {
        List<P06_IACC_01_RecordBean> beans = new ArrayList<>();
        beans.add(createSampleRecordBean());

        when(mockConn.prepareStatement(anyString())).thenReturn(mockPs);

        transaction.insertRecords(beans);

        verify(mockPs, times(1)).executeUpdate();
    }

    @Test
    public void testDeleteRecords() throws Exception {
        List<P06_IACC_01_RecordBean> beans = new ArrayList<>();
        beans.add(createSampleRecordBean());

        when(mockConn.prepareStatement(anyString())).thenReturn(mockPs);

        transaction.deleteRecords(beans);

        verify(mockPs, times(1)).executeUpdate();
    }

    @Test
    public void testGetRecordBeansFromDB() throws Exception {
        when(mockConn.prepareStatement(anyString())).thenReturn(mockPs);
        when(mockPs.executeQuery()).thenReturn(mockRs);
        when(mockRs.next()).thenReturn(true, false);
        when(mockRs.getString("BATCH_ID")).thenReturn("B001");
        when(mockRs.getString("SEQ_NO")).thenReturn("S001");
        when(mockRs.getString("TRAN_DATE")).thenReturn("2024-06-01");
        when(mockRs.getString("AMOUNT")).thenReturn("100.00");
        when(mockRs.getString("SRC_CCY_CD")).thenReturn("USD");
        when(mockRs.getString("DST_CCY_CD")).thenReturn("INR");

        List<P06_IACC_01_RecordBean> result = transaction.getRecordBeansFromDB("B001");

        assertEquals(1, result.size());
        assertEquals("B001", result.get(0).getBatchId());
    }

    @Test
    public void testGetOperationReference() throws Exception {
        P06_IACC_01_RecordBean bean = createSampleRecordBean();

        String ref = (String) invokePrivateMethod(
            transaction,
            "getOperationReference",
            new Class[]{P06_IACC_01_RecordBean.class},
            bean
        );

        assertNotNull(ref);
        assertTrue(ref.startsWith("ELEM-"));
    }

    @Test
    public void testProcessFinancialTransaction() throws Exception {
        P06_IACC_01_RecordBean bean = createSampleRecordBean();

        when(mockConn.prepareStatement(anyString())).thenReturn(mockPs);

        transaction.processFinancialTransaction(bean);

        verify(mockPs, atLeastOnce()).executeUpdate();
    }

    @Test
    public void testInsertGroupedRecord() throws Exception {
        P06_IACC_01_RecordBean bean = createSampleRecordBean();
        bean.setTransactionType("GROUPED");

        when(mockConn.prepareStatement(anyString())).thenReturn(mockPs);

        invokePrivateMethod(
            transaction,
            "insertGroupedRecord",
            new Class[]{P06_IACC_01_RecordBean.class},
            bean
        );

        verify(mockPs, times(1)).executeUpdate();
    }

    @Test
    public void testGetLevelId() {
        String levelId = transaction.getLevelId();
        assertEquals("1", levelId);
    }
}
