package com.bnpparibas.atlentic.iacc.bopr.main;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Date;
import java.util.Map;

import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.common.Pe0_IACC_00_Utility;
import com.bnpparibas.atlentic.common.gen.string.utilities.StringConverter;
import com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.resource.P86_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ExitApplicationException;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ParameterException;

import lombok.CustomLog;

@CustomLog(topic = "P06_IACC_BPOR_BE")
public final class P06_IACC_01_Main {

    private final String[] args;
    private static String branch;
    private static Date eventTimestamp;
    private static Date beginDate;
    private static Date endDate;
    private static String textFileName;

    public static String action;
    public static final String BRANCH_TYPE = "BEFOR";

    private P06_IACC_01_Main(final String[] args) {
        this.args = args;
    }

    public static void main(final String... args) {
        new P06_IACC_01_Main(args).execute();
    }

    private void execute() {
        LOG.debug("BOPR interface process starting...");
        LOG.debug("Input parameters: ");
        printArguments();

        try {
            if (args.length < 1) {
                throw new P06_IACC_01_ParameterException("Wrong parameters number, should be at least equals to 1");
            }

            executeMain();

            if (eventTimestamp == null) {
                throw new P06_IACC_01_ParameterException("The process date format is unknown!");
            }

        } catch (final P06_IACC_01_ExitApplicationException e) {
            LOG.error("Application exception: ", e);
            e.printStackTrace();
            System.exit(8);
        } catch (SQLException e) {
            LOG.error("SQL exception while getting Input Date: ", e);
            e.printStackTrace();
            System.exit(5);
        }

        System.exit(0);
    }

    private void printArguments() {
        for (int i = 0; i < this.args.length; i++) {
            LOG.info("Parameter ({}) {}", i, this.args[i]);
        }
    }

    private void executeMain() throws P06_IACC_01_ExitApplicationException, SQLException {
        if (args.length > 3) {
            // Level 1
            setBeginDate(StringConverter.StringToDate(args[3]));
            if (beginDate == null) {
                throw new P06_IACC_01_ParameterException("The begin date format is unknown!");
            }

            setEndDate(StringConverter.StringToDate(args[4]));
            if (endDate == null) {
                throw new P06_IACC_01_ParameterException("The end date format is unknown!");
            }

            if (!beginDate.before(endDate)) {
                throw new P06_IACC_01_ParameterException("Begin date must be before End date");
            }

            new P06_IACC_01_Level1().execute();

        } else {
            // Level 2
            Map<String, String> dateConfig = getDateConfigDate();

            setBeginDate(StringConverter.StringToDate(dateConfig.get("INTF_SYSTEM_BEGIN_DATE")));
            setEndDate(StringConverter.StringToDate(dateConfig.get("INTF_SYSTEM_END_DATE")));
            setEventTimestamp(StringConverter.StringToDate(dateConfig.get("INTF_EVENT_DATE")));

            branch = BRANCH_TYPE;

            LOG.info("Parameter Branch: {}", branch);
            LOG.info("Parameter System Begin Date: {}", dateConfig.get("INTF_SYSTEM_BEGIN_DATE"));
            LOG.info("Parameter Event Date: {}", dateConfig.get("INTF_EVENT_DATE"));

            new P06_IACC_01_Level2().execute();
        }
    }

    private static Map<String, String> getDateConfigDate() throws SQLException {
        try (Connection dbConn = GlobalAtlentic.getLoanIQConnection()) {
            return Pe0_IACC_00_Utility.getAtlIntfDateByBranch(BRANCH_TYPE, dbConn);
        }
    }

    public static Date getEventTimestamp() {
        return eventTimestamp;
    }

    public static void setEventTimestamp(Date timestamp) {
        eventTimestamp = timestamp;
    }

    public static Date getBeginDate() {
        return beginDate;
    }

    public static void setBeginDate(Date date) {
        beginDate = date;
    }

    public static Date getEndDate() {
        return endDate;
    }

    public static void setEndDate(Date date) {
        endDate = date;
    }

    public static String getTextFileName() {
        return textFileName;
    }

    public static String getBranch() {
        return branch;
    }

    private static void showUsage() {
        LOG.info("""
                Usage: <level> <branch> <event_date> [<begin_date> <end_date>] [file_name]
                where:
                    level: levell or level2
                    branch: branch name
                    event_date: processing date, DD/MM/YYYY hh:mm:ss
                    begin_date: begin date, DD/MM/YYYY hh:mm:ss (for level 1)
                    end_date: end date, DD/MM/YYYY hh:mm:ss (for level 1)
                    file_name: report file name (for level 2)
                """);
    }
}
