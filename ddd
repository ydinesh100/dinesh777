package com.bnpparibas.atlentic.risk.utils;

import static org.junit.jupiter.api.Assertions.*;
import static com.github.stefanbirkner.systemlambda.SystemLambda.catchSystemExit;

import java.io.File;
import java.nio.file.Files;
import java.sql.PreparedStatement;
import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

class POO_IRSK_traceTest {

    private POO_IRSK_trace trace;

    @BeforeEach
    void setUp() {
        trace = new POO_IRSK_trace();
    }

    @Test
    void testGetCommonLogInsertQueryWithId() {
        String id = "123";
        String query = trace.getCommonLogInsertQuery(id);
        assertNotNull(query);
        assertTrue(query.contains("?, 'OMG', 'RISK'"));
    }

    @Test
    void testGetCommonLogInsertQueryWithNullId() {
        String query = trace.getCommonLogInsertQuery(null);
        assertNotNull(query);
        assertTrue(query.contains("SEQ_COMMON_ID_LOG.nextval"));
    }

    @Test
    void testSetParametersWithId() throws Exception {
        Map<String, String> param = new HashMap<>();
        param.put(POO_IRSK_trace.ID, "123");
        param.put(POO_IRSK_trace.LEVEL, "INFO");
        param.put(POO_IRSK_trace.MESSAGE, "This is a test message");

        PreparedStatement ps = Mockito.mock(PreparedStatement.class);
        trace.setParameters(ps, param);

        Mockito.verify(ps).setString(1, "123");
        Mockito.verify(ps).setString(2, "INFO");
        Mockito.verify(ps).setString(3, "This is a test message");
    }

    @Test
    void testSetParametersWithoutIdTriggersSystemExit() throws Exception {
        Map<String, String> param = new HashMap<>();
        param.put(POO_IRSK_trace.LEVEL, "ERROR");
        param.put(POO_IRSK_trace.MESSAGE, "Missing ID test");

        PreparedStatement ps = Mockito.mock(PreparedStatement.class);

        int status = catchSystemExit(() -> {
            trace.setParameters(ps, param);
        });

        assertEquals(8, status);
    }

    @Test
    void testFatalExitLogsAndCallsSystemExit() throws Exception {
        // Delete the log file before running
        File logFile = new File("F00_IRSK_OX01.log");
        if (logFile.exists()) {
            logFile.delete();
        }

        int status = catchSystemExit(() -> {
            trace.fatalExit("testFatalExit", "IOException", "Something went wrong");
        });

        assertEquals(8, status);
        assertTrue(logFile.exists());

        String logContent = Files.readString(logFile.toPath());
        assertTrue(logContent.contains("testFatalExit"));
        assertTrue(logContent.contains("IOException"));
        assertTrue(logContent.contains("Something went wrong"));
    }
}
