

package com.bnpparibas.atlentic.iacc.bopr.main;

import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ParameterException;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.lang.reflect.*;
import java.text.SimpleDateFormat;
import java.util.Date;

import static org.junit.Assert.*;

public class P06_IACC_01_MainTest {

    private static final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

    @Before
    public void setUp() throws Exception {
        setStaticField("g_o_eventTimestamp", null);
        setStaticField("g_o_beginDate", null);
        setStaticField("g_o_endDate", null);
        setStaticField("g_s_branch", null);
        setStaticField("g_s_textFileName", null);
        setStaticField("l_s_action", null);
    }

    @After
    public void tearDown() throws Exception {
        setUp(); // Reset after each test
    }

    private void setStaticField(String fieldName, Object value) throws Exception {
        Field field = P06_IACC_01_Main.class.getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(null, value);
    }

    private Object getStaticField(String fieldName) throws Exception {
        Field field = P06_IACC_01_Main.class.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field.get(null);
    }

    private void invokePrivateMethod(Object instance, String methodName, Class<?>[] paramTypes, Object... args) throws Exception {
        Method method = P06_IACC_01_Main.class.getDeclaredMethod(methodName, paramTypes);
        method.setAccessible(true);
        method.invoke(instance, args);
    }

    @Test(expected = P06_IACC_01_ParameterException.class)
    public void testInvalidArgumentLengthThrowsException() throws Throwable {
        String[] args = {"invalid_only_action"};
        Object instance = createMainInstance(args);
        try {
            invokePrivateMethod(instance, "execute", new Class<?>[]{});
        } catch (InvocationTargetException e) {
            throw e.getCause(); // unwrap
        }
    }

    @Test
    public void testGettersAndSettersUsingReflection() throws Exception {
        Date now = sdf.parse("01/01/2024 00:00:00");
        setStaticField("g_o_eventTimestamp", now);
        setStaticField("g_o_beginDate", now);
        setStaticField("g_o_endDate", now);
        setStaticField("g_s_branch", "TEST_BRANCH");
        setStaticField("g_s_textFileName", "file.txt");

        assertEquals(now, P06_IACC_01_Main.get6_o_eventTimestamp());
        assertEquals(now, P06_IACC_01_Main.get_o_beginDate());
        assertEquals(now, P06_IACC_01_Main.getG_o_endDate());
        assertEquals("TEST_BRANCH", P06_IACC_01_Main.getG_s_branch());
        assertEquals("file.txt", P06_IACC_01_Main.getG_s_textFileName());
    }

    private Object createMainInstance(String[] args) throws Exception {
        Constructor<P06_IACC_01_Main> constructor = P06_IACC_01_Main.class.getDeclaredConstructor(String[].class);
        constructor.setAccessible(true);
        return constructor.newInstance((Object) args);
    }
}
