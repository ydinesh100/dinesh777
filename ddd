import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.junit.*;
import org.mockito.MockedStatic;

import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.resource.P06_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.common.gen.string.utilities.StringConverter;

public class P06_IACC_01_MainTest {

    private Constructor<P06_IACC_01_Main> privateConstructor;
    private Method executeMethod;

    @Before
    public void setUp() throws Exception {
        // Access private constructor
        privateConstructor = P06_IACC_01_Main.class.getDeclaredConstructor(String[].class);
        privateConstructor.setAccessible(true);

        // Access private execute() method
        executeMethod = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);
    }

    @Test
    public void testExecute_Level1Action_CorrectParams() throws Exception {
        String[] args = new String[] { "level1Action", "BR1", "01/01/2023 00:00:00", "01/01/2023 00:00:00", "02/01/2023 00:00:00" };

        try (
            MockedStatic<StringConverter> stringConverterMock = mockStatic(StringConverter.class);
            MockedStatic<P06_IACC_01_PropertiesMgr> propertiesMgrMock = mockStatic(P06_IACC_01_PropertiesMgr.class)
        ) {
            // Mock static methods
            propertiesMgrMock.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1Action");

            // For StringConverter.StringToDate
            stringConverterMock.when(() -> StringConverter.StringToDate("01/01/2023 00:00:00")).thenReturn(new Date(1672531200000L)); // 01 Jan 2023
            stringConverterMock.when(() -> StringConverter.StringToDate("02/01/2023 00:00:00")).thenReturn(new Date(1672617600000L)); // 02 Jan 2023

            // Create instance of Main
            P06_IACC_01_Main mainInstance = privateConstructor.newInstance((Object) args);

            // Execute private method
            executeMethod.invoke(mainInstance);

            // Check that static fields are set correctly
            Field branchField = P06_IACC_01_Main.class.getDeclaredField("g_s_branch");
            branchField.setAccessible(true);
            assertEquals("BR1", branchField.get(null));

            Field eventDateField = P06_IACC_01_Main.class.getDeclaredField("g_o_eventTimestamp");
            eventDateField.setAccessible(true);
            assertNotNull(eventDateField.get(null));

            // Similarly test other fields or side effects as needed
        }
    }

    @Test
    public void testExecute_Level2Action_CorrectParams() throws Exception {
        String[] args = new String[] { "level2Action", "BR2", "01/01/2023 00:00:00", "reportFile.txt" };

        try (
            MockedStatic<StringConverter> stringConverterMock = mockStatic(StringConverter.class);
            MockedStatic<P06_IACC_01_PropertiesMgr> propertiesMgrMock = mockStatic(P06_IACC_01_PropertiesMgr.class)
        ) {
            propertiesMgrMock.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("level2Action");

            stringConverterMock.when(() -> StringConverter.StringToDate("01/01/2023 00:00:00")).thenReturn(new Date(1672531200000L));

            P06_IACC_01_Main mainInstance = privateConstructor.newInstance((Object) args);

            executeMethod.invoke(mainInstance);

            Field branchField = P06_IACC_01_Main.class.getDeclaredField("g_s_branch");
            branchField.setAccessible(true);
            assertEquals("BR2", branchField.get(null));

            Field textFileNameField = P06_IACC_01_Main.class.getDeclaredField("g_s_textFileName");
            textFileNameField.setAccessible(true);
            assertEquals("reportFile.txt", textFileNameField.get(null));
        }
    }

    @Test(expected = Exception.class)
    public void testExecute_ThrowsParameterExceptionWhenNoArgs() throws Exception {
        String[] args = new String[] {};

        P06_IACC_01_Main mainInstance = privateConstructor.newInstance((Object) args);

        try {
            executeMethod.invoke(mainInstance);
        } catch (Exception e) {
            // Exception is wrapped in InvocationTargetException; unwrap it
            Throwable cause = e.getCause();
            if (cause != null) {
                throw (Exception) cause;
            } else {
                throw e;
            }
        }
    }

    @Test
    public void testStaticGettersSetters() throws Exception {
        Date now = new Date();
        P06_IACC_01_Main.setG_o_eventTimestamp(now);
        assertEquals(now, P06_IACC_01_Main.getG_o_eventTimestamp());

        Date begin = new Date(now.getTime() - 10000);
        P06_IACC_01_Main.setG_o_beginDate(begin);
        assertEquals(begin, P06_IACC_01_Main.getG_o_beginDate());

        Date end = new Date(now.getTime() + 10000);
        P06_IACC_01_Main.setG_o_endDate(end);
        assertEquals(end, P06_IACC_01_Main.getG_o_endDate());

        // Test static fields via reflection as needed
    }

    @Test
    public void testGetDateConfigDate_Mocked() throws Exception {
        // Mock GlobalAtlentic and POO_IACC_00_Utility static calls if possible
        // Here we just call and catch exception or mock connection returned

        // If you want, use mockito inline to mock static methods GlobalAtlentic.getLoanIQConnection()
        // and POO_IACC_00_Utility.getAtlIntfDateByBranch()

        // For now just call and expect no exception if environment is ready

        Map<String, String> dummyMap = new HashMap<>();
        dummyMap.put("INTF_EVENT_DATE", "01/01/2023 00:00:00");
        dummyMap.put("INTF_SYSTEM_BEGIN_DATE", "31/12/2022 00:00:00");
        dummyMap.put("INTF_SYSTEM_END_DATE", "02/01/2023 00:00:00");

        // You can write a wrapper or mock these classes in integration test environment.
    }
}
