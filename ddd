package com.bnpparibas.atlentic.iacc.bopr.main;

import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.common.P06_IACC_01_Utility;
import com.bnpparibas.atlentic.common.gen.string.utilities.StringConverter;
import com.bnpparibas.atlentic.iacc.bopr.resource.P06_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ParameterException;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ExitApplicationException;

import org.junit.*;
import org.mockito.MockedStatic;

import java.lang.reflect.*;
import java.sql.Connection;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class P06_IACC_01_MainTest {

    private MockedStatic<P06_IACC_01_PropertiesMgr> propsMock;
    private MockedStatic<StringConverter> converterMock;
    private MockedStatic<GlobalAtlentic> globalMock;
    private MockedStatic<P06_IACC_01_Utility> utilMock;

    @Before
    public void setUp() throws Exception {
        propsMock = mockStatic(P06_IACC_01_PropertiesMgr.class);
        converterMock = mockStatic(StringConverter.class);
        globalMock = mockStatic(GlobalAtlentic.class);
        utilMock = mockStatic(P06_IACC_01_Utility.class);

        propsMock.when(() -> P06_IACC_01_PropertiesMgr.getLevellActionName()).thenReturn("LVL1");
        propsMock.when(() -> P06_IACC_01_PropertiesMgr.getLevel2ActionName()).thenReturn("LVL2");

        converterMock.when(() -> StringConverter.StringToDate(anyString())).thenReturn(new Date());

        Connection mockConnection = mock(Connection.class);
        globalMock.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mockConnection);

        Map<String, String> mockDateMap = new HashMap<>();
        mockDateMap.put("INTF_EVENT_DATE", "01/01/2024");
        mockDateMap.put("INTF_SYSTEM_BEGIN_DATE", "01/01/2024");
        mockDateMap.put("INTF_SYSTEM_END_DATE", "02/01/2024");

        utilMock.when(() ->
            P06_IACC_01_Utility.getAtlIntfDateByBranch(eq("BEFOR"), any(Connection.class))
        ).thenReturn(mockDateMap);
    }

    @After
    public void tearDown() {
        propsMock.close();
        converterMock.close();
        globalMock.close();
        utilMock.close();
    }

    @Test
    public void testLevel1_ValidArgs() throws Exception {
        String[] args = {"LVL1", "BR1", "01/01/2024", "01/01/2024", "02/01/2024"};

        P06_IACC_01_Main mainObj = createMainInstance(args);

        Method executeMethod = getPrivateExecuteMethod();
        executeMethod.invoke(mainObj);

        assertNotNull(getStaticField("g_o_eventTimestamp"));
        assertNotNull(getStaticField("g_o_beginDate"));
        assertNotNull(getStaticField("g_o_endDate"));
        assertEquals("BR1", getStaticField("g_s_branch"));
    }

    @Test
    public void testLevel2_ValidArgs() throws Exception {
        String[] args = {"LVL2", "file1.txt"};

        P06_IACC_01_Main mainObj = createMainInstance(args);

        Method executeMethod = getPrivateExecuteMethod();
        executeMethod.invoke(mainObj);

        assertEquals("file1.txt", getStaticField("g_s_textFileName"));
    }

    @Test(expected = InvocationTargetException.class)
    public void testInvalidArgs_Level1_ThrowsParameterException() throws Exception {
        String[] args = {"LVL1"};

        P06_IACC_01_Main mainObj = createMainInstance(args);

        Method executeMethod = getPrivateExecuteMethod();

        try {
            executeMethod.invoke(mainObj);
        } catch (InvocationTargetException ex) {
            assertTrue(ex.getCause() instanceof P06_IACC_01_ParameterException);
            throw ex;
        }
    }

    @Test(expected = InvocationTargetException.class)
    public void testUnknownAction_ThrowsParameterException() throws Exception {
        String[] args = {"UNKNOWN", "BR1", "01/01/2024"};

        P06_IACC_01_Main mainObj = createMainInstance(args);
        Method executeMethod = getPrivateExecuteMethod();

        try {
            executeMethod.invoke(mainObj);
        } catch (InvocationTargetException ex) {
            assertTrue(ex.getCause() instanceof P06_IACC_01_ParameterException);
            throw ex;
        }
    }

    // -------------------------
    // Utility methods
    // -------------------------

    private P06_IACC_01_Main createMainInstance(String[] args) throws Exception {
        Constructor<P06_IACC_01_Main> constructor = P06_IACC_01_Main.class.getDeclaredConstructor(String[].class);
        constructor.setAccessible(true);
        return constructor.newInstance((Object) args);
    }

    private Method getPrivateExecuteMethod() throws Exception {
        Method method = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        method.setAccessible(true);
        return method;
    }

    private Object getStaticField(String fieldName) throws Exception {
        Field field = P06_IACC_01_Main.class.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field.get(null); // static field
    }
}
