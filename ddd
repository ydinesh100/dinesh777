import static com.github.stefanbirkner.systemlambda.SystemLambda.catchSystemExit;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import com.bnpparibas.atlentic.common.Connexion;
import com.bnpparibas.atlentic.risk.ost.P00_IRSK_01E00_TraitementDataOst;
import com.bnpparibas.atlentic.risk.ost.P00_IRSK_03_trace;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

import org.junit.jupiter.api.Test;

class P00_IRSK_01E00_TraitementDataOstTest {

    @Test
    void testConstructorTriggersSystemExit() throws Exception {
        // Arrange
        Connexion mockConnexion = mock(Connexion.class);
        when(mockConnexion.getConnection()).thenThrow(new SQLException("DB failure"));

        // Act
        int exitCode = catchSystemExit(() -> {
            new P00_IRSK_01E00_TraitementDataOst(mockConnexion, 123);
        });

        // Assert
        assertEquals(8, exitCode);
    }

    @Test
    void testExecuteDeleteStatement_TriggersSystemExit() throws Exception {
        // Arrange
        Connexion mockConnexion = mock(Connexion.class);
        Connection mockConnection = mock(Connection.class);
        Statement mockStatement = mock(Statement.class);

        when(mockConnexion.getConnection()).thenReturn(mockConnection);
        when(mockConnection.createStatement()).thenReturn(mockStatement);
        doThrow(new SQLException("Delete failed", "42000", 1234)).when(mockStatement).executeUpdate(anyString());

        P00_IRSK_01E00_TraitementDataOst traitement = new P00_IRSK_01E00_TraitementDataOst(mockConnexion, 123);
        P00_IRSK_03_trace mockLogger = mock(P00_IRSK_03_trace.class);

        // Act
        int exitCode = catchSystemExit(() -> {
            traitement.executeDeleteStatement(mockLogger, mockConnexion, "DELETE FROM dummy_table", "Error occurred");
        });

        // Assert
        assertEquals(8, exitCode);
    }

    @Test
    void testTraitementDataOst_TriggersSystemExit() throws Exception {
        // Arrange
        Connexion mockConnexion = mock(Connexion.class);
        Connection mockConnection = mock(Connection.class);
        when(mockConnexion.getConnection()).thenReturn(mockConnection);
        when(mockConnection.createStatement()).thenThrow(new SQLException("Statement error"));

        P00_IRSK_01E00_TraitementDataOst traitement = new P00_IRSK_01E00_TraitementDataOst(mockConnexion, 123);
        P00_IRSK_03_trace mockLogger = mock(P00_IRSK_03_trace.class);

        // Act
        int exitCode = catchSystemExit(() -> {
            traitement.traiterTableDataOst(mockLogger, mockConnexion);
        });

        // Assert
        assertEquals(8, exitCode);
    }

    @Test
    void testTraitementAccrual_TriggersSystemExit() throws Exception {
        // Arrange
        Connexion mockConnexion = mock(Connexion.class);
        Connection mockConnection = mock(Connection.class);
        when(mockConnexion.getConnection()).thenReturn(mockConnection);
        when(mockConnection.createStatement()).thenThrow(new SQLException("Accrual error"));

        P00_IRSK_01E00_TraitementDataOst traitement = new P00_IRSK_01E00_TraitementDataOst(mockConnexion, 123);
        P00_IRSK_03_trace mockLogger = mock(P00_IRSK_03_trace.class);

        // Act
        int exitCode = catchSystemExit(() -> {
            traitement.traiterTableAccrual(mockLogger, mockConnexion);
        });

        // Assert
        assertEquals(8, exitCode);
    }

    @Test
    void testTraitementSchedule_TriggersSystemExit() throws Exception {
        // Arrange
        Connexion mockConnexion = mock(Connexion.class);
        Connection mockConnection = mock(Connection.class);
        when(mockConnexion.getConnection()).thenReturn(mockConnection);
        when(mockConnection.createStatement()).thenThrow(new SQLException("Schedule error"));

        P00_IRSK_01E00_TraitementDataOst traitement = new P00_IRSK_01E00_TraitementDataOst(mockConnexion, 123);
        P00_IRSK_03_trace mockLogger = mock(P00_IRSK_03_trace.class);

        // Act
        int exitCode = catchSystemExit(() -> {
            traitement.traiterTableSchedule(mockLogger, mockConnexion);
        });

        // Assert
        assertEquals(8, exitCode);
    }
}
