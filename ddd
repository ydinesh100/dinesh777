import com.bopparibas.atlentic.irep.ecb.bean.P06_IREP_01_EcbRecordBean;
import com.bopparibas.atlentic.irep.ecb.level.P06_IREP_01_DBTransaction;
import com.bopparibas.atlentic.irep.ecb.level.P06_IREP_01_Level;
import com.bopparibas.atlentic.irep.ecb.main.P06_IREP_01_Main;
import com.bopparibas.atlentic.irep.ecb.util.exception.P06_IREP_01_ExitApplicationException;
import com.bopparibas.atlentic.irep.ecb.util.exception.P06_IREP_01_SQLException;

import org.junit.*;
import org.mockito.*;

import java.io.IOException;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.*;

import static org.mockito.Mockito.*;

public class P06_IREP_01_LevelTest {

    @Mock
    Connection mockConnection;

    @Mock
    TestTransaction mockTransaction;

    P06_IREP_01_Level<TestTransaction> testLevel;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);

        // Set static fields in P06_IREP_01_Main
        setStaticField(P06_IREP_01_Main.class, "g_s_branch", "TEST_BRANCH");
        setStaticField(P06_IREP_01_Main.class, "g_o_eventTimestamp", new Date());

        testLevel = new TestableLevel(mockTransaction, mockConnection);
    }

    @Test
    public void testExecute_successfulCommit() throws Exception {
        when(mockTransaction.getRecordsBeansList(anyString(), any()))
                .thenReturn(Arrays.asList(mock(P06_IREP_01_EcbRecordBean.class)));

        testLevel.execute();

        verify(mockConnection).setAutoCommit(false);
        verify(mockConnection).commit();
        verify(mockConnection, never()).rollback();
    }

    @Test(expected = P06_IREP_01_ExitApplicationException.class)
    public void testExecute_innerExecuteThrowsException_rollsBack() throws Exception {
        testLevel = new TestableLevel(mockTransaction, mockConnection) {
            @Override
            protected void innerExecute() throws IOException {
                throw new IOException("Test IOException");
            }
        };

        when(mockTransaction.getRecordsBeansList(anyString(), any()))
                .thenReturn(Collections.emptyList());

        testLevel.execute();
    }

    // --- Helper Classes and Methods ---

    // Define a test interface that properly mocks DBTransaction
    interface TestTransaction extends P06_IREP_01_DBTransaction {
        List<P06_IREP_01_EcbRecordBean> getRecordsBeansList(String branch, Date timestamp)
                throws P06_IREP_01_SQLException;
    }

    class TestableLevel extends P06_IREP_01_Level<TestTransaction> {

        private final TestTransaction tx;
        private final Connection conn;

        TestableLevel(TestTransaction tx, Connection conn) {
            this.tx = tx;
            this.conn = conn;
        }

        @Override
        protected void initializeDataBaseTransaction(Connection connection) {
            this.g_o_dataBaseTransaction = tx;
        }

        @Override
        protected void innerExecute() throws P06_IREP_01_SQLException, IOException {
            // no-op for happy path test
        }

        @Override
        protected int getLevelNumber() {
            return 1;
        }

        @Override
        protected boolean applyCommit() {
            return true;
        }

        @Override
        public void execute() throws P06_IREP_01_ExitApplicationException {
            // Override to inject mocked connection
            Connection connection = this.conn;

            try {
                connection.setAutoCommit(false);
                this.initializeDataBaseTransaction(connection);
                this.g_o_recordBeansList = this.getDataBaseTransaction().getRecordsBeansList(
                        P06_IREP_01_Main.g_s_branch,
                        P06_IREP_01_Main.g_o_eventTimestamp
                );
                this.innerExecute();

                if (this.applyCommit()) {
                    connection.commit();
                }

            } catch (IOException | SQLException | P06_IREP_01_SQLException ex) {
                if (connection != null && this.applyCommit()) {
                    try {
                        connection.rollback();
                    } catch (SQLException sqlEx) {
                        throw new P06_IREP_01_ExitApplicationException(sqlEx.getMessage(), sqlEx);
                    }
                }
                throw new P06_IREP_01_ExitApplicationException(ex.getMessage(), ex);
            } finally {
                // Could mock DBUtils.closeConnexion, or assume it does nothing here
            }
        }
    }

    private void setStaticField(Class<?> clazz, String fieldName, Object value) throws Exception {
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(null, value);
    }
}
