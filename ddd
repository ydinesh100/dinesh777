package com.bnpparibas.atlentic.iacc.bopr.main.test;

import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.properties.P06_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.common.gen.string.utilities.StringConverter;
import com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.exception.P06_IACC_01_ParameterException;
import com.bnpparibas.atlentic.iacc.bopr.exception.P06_IACC_01_ExitApplicationException;

import org.junit.*;
import org.mockito.MockedStatic;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import static org.mockito.Mockito.*;

public class P06_IACC_01_MainTest {

    private P06_IACC_01_Main mainInstance;
    private Method executeMethod;

    @Before
    public void setUp() throws Exception {
        mainInstance = new P06_IACC_01_Main();

        // Reflect and set private g_o_args field
        Field argsField = P06_IACC_01_Main.class.getDeclaredField("g_o_args");
        argsField.setAccessible(true);
        argsField.set(mainInstance, new String[]{"LEVEL1", "BR01", "2025-06-17", "2025-06-01", "2025-06-18"});

        // Get private method `execute()`
        executeMethod = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);
    }

    @Test
    public void testExecute_Level1_Success() throws Exception {
        try (
            MockedStatic<P06_IACC_01_PropertiesMgr> propertiesMock = mockStatic(P06_IACC_01_PropertiesMgr.class);
            MockedStatic<StringConverter> stringConverterMock = mockStatic(StringConverter.class);
        ) {
            propertiesMock.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("LEVEL1");

            stringConverterMock.when(() -> StringConverter.StringToDate(anyString())).thenReturn(new Date());

            P06_IACC_01_Level1 mockLevel1 = mock(P06_IACC_01_Level1.class);
            when(mockLevel1.getClass()).thenReturn(P06_IACC_01_Level1.class);

            try (MockedStatic<P06_IACC_01_Level1> level1Static = mockStatic(P06_IACC_01_Level1.class)) {
                level1Static.when(P06_IACC_01_Level1::new).thenReturn(mockLevel1);
                doNothing().when(mockLevel1).execute();

                // Invoke execute
                executeMethod.invoke(mainInstance);
            }
        }
    }

    @Test
    public void testExecute_InvalidAction_ThrowsParameterException() throws Exception {
        // Set invalid action
        Field argsField = P06_IACC_01_Main.class.getDeclaredField("g_o_args");
        argsField.setAccessible(true);
        argsField.set(mainInstance, new String[]{"INVALID_ACTION", "BR01", "2025-06-17"});

        try (
            MockedStatic<P06_IACC_01_PropertiesMgr> propertiesMock = mockStatic(P06_IACC_01_PropertiesMgr.class);
            MockedStatic<StringConverter> stringConverterMock = mockStatic(StringConverter.class)
        ) {
            propertiesMock.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("LEVEL1");
            propertiesMock.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("LEVEL2");

            stringConverterMock.when(() -> StringConverter.StringToDate(anyString())).thenReturn(new Date());

            try {
                executeMethod.invoke(mainInstance);
                Assert.fail("Expected P06_IACC_01_ParameterException for invalid action");
            } catch (Exception ex) {
                Throwable cause = ex.getCause();
                Assert.assertTrue(cause instanceof P06_IACC_01_ParameterException);
                Assert.assertTrue(cause.getMessage().contains("unknown"));
            }
        }
    }
}
