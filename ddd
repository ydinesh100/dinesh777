package com.bnpparibas.atlentic.iacc.bopr.main.test;

import com.bnpparibas.atlentic.common.StringConverter;
import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.properties.P06_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.iacc.bopr.transaction.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.transaction.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.util.P06_IACC_01_ParameterException;

import org.junit.Before;
import org.junit.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import static org.mockito.Mockito.*;

public class P06_IACC_01_MainTest {

    private P06_IACC_01_Main mainInstance;

    @Before
    public void setUp() throws Exception {
        mainInstance = new P06_IACC_01_Main();
    }

    @Test
    public void testExecute_level1_withBeginAndEndDate() throws Exception {
        String[] args = {"level1Action", "TEST_BRANCH", "01/01/2024", "02/01/2024", "03/01/2024"};

        setPrivateField(mainInstance, "g_o_args", args);

        // Prepare mock Dates
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Date eventDate = sdf.parse("01/01/2024");
        Date beginDate = sdf.parse("02/01/2024");
        Date endDate = sdf.parse("03/01/2024");

        try (
            MockedStatic<StringConverter> stringConverterMock = Mockito.mockStatic(StringConverter.class);
            MockedStatic<P06_IACC_01_PropertiesMgr> propsMock = Mockito.mockStatic(P06_IACC_01_PropertiesMgr.class);
            MockedStatic<P06_IACC_01_Level1> level1Mock = Mockito.mockStatic(P06_IACC_01_Level1.class);
        ) {
            stringConverterMock.when(() -> StringConverter.StringToDate("01/01/2024")).thenReturn(eventDate);
            stringConverterMock.when(() -> StringConverter.StringToDate("02/01/2024")).thenReturn(beginDate);
            stringConverterMock.when(() -> StringConverter.StringToDate("03/01/2024")).thenReturn(endDate);

            propsMock.when(P06_IACC_01_PropertiesMgr::getLevellActionName).thenReturn("level1Action");

            P06_IACC_01_Level1 mockLevel1 = mock(P06_IACC_01_Level1.class);
            level1Mock.when(P06_IACC_01_Level1::new).thenReturn(mockLevel1);

            doNothing().when(mockLevel1).execute();

            Method executeMethod = P06_IACC_01_Main.class.getDeclaredMethod("execute");
            executeMethod.setAccessible(true);
            executeMethod.invoke(mainInstance);
        }
    }

    // Utility method to inject args
    private void setPrivateField(Object target, String fieldName, Object value) throws Exception {
        java.lang.reflect.Field field = target.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(target, value);
    }
}

