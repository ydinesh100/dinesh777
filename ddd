import org.junit.jupiter.api.*;
import java.lang.reflect.*;

import static org.junit.jupiter.api.Assertions.*;

class P06_IACC_01_MainTest {

    @BeforeEach
    void disableSystemExit() throws Exception {
        // Prevent actual exit
        Method setExitHandler = P06_IACC_01_Main.class.getDeclaredMethod("setExitHandler", Runnable.class);
        setExitHandler.setAccessible(true);
        setExitHandler.invoke(null, (Runnable) () -> {
            throw new RuntimeException("System.exit intercepted");
        });
    }

    @AfterEach
    void resetSystemExit() throws Exception {
        // Reset to default exit handler (System.exit)
        Method setExitHandler = P06_IACC_01_Main.class.getDeclaredMethod("setExitHandler", Runnable.class);
        setExitHandler.setAccessible(true);
        setExitHandler.invoke(null, (Runnable) () -> System.exit(0));
    }

    @Test
    void testInvalidAction_throwsParameterException() throws Exception {
        String[] args = {"invalidAction"};
        Field argsField = P06_IACC_01_Main.class.getDeclaredField("args");
        argsField.setAccessible(true);
        argsField.set(null, args);

        Method method = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        method.setAccessible(true);

        RuntimeException thrown = assertThrows(RuntimeException.class, () -> {
            method.invoke(null);
        });

        assertEquals("System.exit intercepted", thrown.getMessage());
    }
}
