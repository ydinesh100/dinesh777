@Test
void test_execute_SQLException_shouldCallSystemExit() throws Exception {
    try (MockedStatic<GlobalAtlentic> globalMock = mockStatic(GlobalAtlentic.class);
         MockedStatic<P06_IACC_01_PropertiesMgr> propsMock = mockStatic(P06_IACC_01_PropertiesMgr.class);
         MockedStatic<Pee_IACC_00_Utility> utilMock = mockStatic(Pee_IACC_00_Utility.class)) {

        globalMock.when(GlobalAtlentic::getLoanIQConnection).thenThrow(new SQLException("DB Down"));
        propsMock.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");

        String[] args = {"level1", "BEFOR"};
        Method setArgs = P06_IACC_01_Main.class.getDeclaredMethod("set_args", String[].class);
        setArgs.setAccessible(true);
        setArgs.invoke(null, (Object) args);

        Method execute = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        execute.setAccessible(true);

        int exitCode = SystemExitControl.catchExit(() -> {
            try {
                execute.invoke(null);
            } catch (Exception ignored) {}
        });

        assertEquals(8, exitCode);
    }
}

@Test
void test_execute_ExitApplicationException_shouldCallSystemExit() throws Exception {
    // Arrange: Create stub Level1 that throws ExitApplicationException
    try (MockedConstruction<P06_IACC_01_Level1> mocked = mockConstruction(P06_IACC_01_Level1.class,
            (mock, context) -> doThrow(new P06_IACC_01_ExitApplicationException("Stubbed"))
                    .when(mock).execute());
         MockedStatic<P06_IACC_01_PropertiesMgr> propsMock = mockStatic(P06_IACC_01_PropertiesMgr.class)) {

        propsMock.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");

        String[] args = {"level1", "BEFOR", "01/01/2025 00:00:00"};
        Method setArgs = P06_IACC_01_Main.class.getDeclaredMethod("set_args", String[].class);
        setArgs.setAccessible(true);
        setArgs.invoke(null, (Object) args);

        Method execute = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        execute.setAccessible(true);

        // Act
        int exitCode = SystemExitControl.catchExit(() -> {
            try {
                execute.invoke(null);
            } catch (Exception ignored) {}
        });

        // Assert
        assertEquals(8, exitCode);
    }
}
