package com.bnpparibas.atlentic.iacc.bopr.level;

import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.common.utils.DBUtils;
import com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ExitApplicationException;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_SQLException;
import org.junit.*;
import org.mockito.*;

import java.io.IOException;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collections;
import java.util.List;

import static org.mockito.Mockito.*;

public class P06_IACC_01_LevelTest {

    private Connection mockConnection;
    private P06_IACC_01_Level<P06_IACC_01_DBTransaction> testLevel;
    private P06_IACC_01_DBTransaction mockTransaction;

    @Before
    public void setup() throws Exception {
        MockitoAnnotations.initMocks(this);

        mockConnection = mock(Connection.class);
        when(mockConnection.getAutoCommit()).thenReturn(false);

        // Set GlobalAtlentic.g_o_loanIQConnection via reflection
        Field connectionField = GlobalAtlentic.class.getDeclaredField("g_o_loanIQConnection");
        connectionField.setAccessible(true);
        connectionField.set(null, mockConnection);

        // Create a mock DBTransaction with public getRecordsBeansList()
        mockTransaction = new P06_IACC_01_DBTransaction(mockConnection) {
            @Override
            protected void feedingRecordBean(P06_IACC_01_BoprRecordBean bean, ResultSet rs) {
                // No-op
            }

            @Override
            protected void innerFeedingRecordBean(P06_IACC_01_BoprRecordBean bean, ResultSet rs) {
                // No-op
            }

            @Override
            protected String getSelectRecordsQueryKey() {
                return "dummy.key";
            }

            @Override
            protected void feedRecordsBeansListPreparedStatement(PreparedStatement stmt) {
                // No-op
            }

            @Override
            public List<P06_IACC_01_BoprRecordBean> getRecordsBeansList() {
                return Collections.singletonList(new P06_IACC_01_BoprRecordBean(100.0)); // Assume constructor exists
            }
        };

        // Create inline subclass of P06_IACC_01_Level
        testLevel = new P06_IACC_01_Level<P06_IACC_01_DBTransaction>() {
            @Override
            protected void innerExecute() throws P06_IACC_01_SQLException, IOException, P06_IACC_01_ExitApplicationException {
                // No-op
            }

            @Override
            protected int getLevelNumber() {
                return 1;
            }

            @Override
            protected void initializeDataBaseTransaction(Connection p_o_dataBaseConnection) {
                this.g_o_dataBaseTransaction = mockTransaction;
            }

            @Override
            protected boolean applyCommit() {
                return true;
            }
        };
    }

    @Test
    public void testExecuteSuccess() throws Exception {
        testLevel.execute();

        // Assert the result list is set and has the expected amount
        List<P06_IACC_01_BoprRecordBean> beans = testLevel.g_o_recordBeansList;
        Assert.assertNotNull(beans);
        Assert.assertEquals(1, beans.size());
        Assert.assertTrue(beans.get(0).getAmount() > 0);

        // Verify commit called
        verify(mockConnection).commit();
    }

    @After
    public void tearDown() throws Exception {
        // Clean up static field
        Field connectionField = GlobalAtlentic.class.getDeclaredField("g_o_loanIQConnection");
        connectionField.setAccessible(true);
        connectionField.set(null, null);
    }
}
