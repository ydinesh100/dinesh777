package com.bnpparibas.atlentic.lacc.bopr.level1test;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import com.bnpparibas.atlentic.common.Outils;
import com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1DBTransaction;
import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.resource.P06_IACC_01_PropertiesMgr;

public class P06_IACC_01_Level1DBTransactionTest {

    private Connection mockConnection;
    private PreparedStatement mockPreparedStatement;
    private ResultSet mockResultSet;
    private P06_IACC_01_Level1DBTransaction dbTransaction;

    @Before
    public void setup() throws Exception {
        mockConnection = mock(Connection.class);
        mockPreparedStatement = mock(PreparedStatement.class);
        mockResultSet = mock(ResultSet.class);

        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);

        Constructor<?> ctor = P06_IACC_01_Level1DBTransaction.class.getDeclaredConstructor(Connection.class);
        ctor.setAccessible(true);
        dbTransaction = (P06_IACC_01_Level1DBTransaction) ctor.newInstance(mockConnection);
    }

    @Test
    public void testInsertRecordsBeansList() throws Exception {
        List<P06_IACC_01_BoprRecordBean> list = new ArrayList<>();
        P06_IACC_01_BoprRecordBean bean = new P06_IACC_01_BoprRecordBean("BRANCH", new Timestamp(System.currentTimeMillis()));
        list.add(bean);

        when(mockPreparedStatement.executeUpdate()).thenReturn(1);

        Method m = P06_IACC_01_Level1DBTransaction.class.getDeclaredMethod("insertRecordsBeansList", List.class);
        m.setAccessible(true);
        int result = (int) m.invoke(dbTransaction, list);

        assertEquals(1, result);
    }

    @Test
    public void testFeedingRecordBean() throws Exception {
        P06_IACC_01_BoprRecordBean bean = new P06_IACC_01_BoprRecordBean("BRANCH", new Timestamp(System.currentTimeMillis()));

        // Map column -> value
        when(mockResultSet.getString(anyString())).thenAnswer(invocation -> invocation.getArgument(0) + "_VAL");
        when(mockResultSet.getDate("dte_effective")).thenReturn(new java.sql.Date(System.currentTimeMillis()));

        Method m = P06_IACC_01_Level1DBTransaction.class.getDeclaredMethod("feedingRecordBean", P06_IACC_01_BoprRecordBean.class, ResultSet.class);
        m.setAccessible(true);
        m.invoke(dbTransaction, bean, mockResultSet);

        assertEquals("pid_deal_VAL", bean.getDealId());
        assertEquals("pid_facility_VAL", bean.getFacilityId());
        assertEquals("rid_outstanding_VAL", bean.getOutstandingId());
        assertEquals("EVENT123_VAL", bean.getDealId().substring(0,5), "Just checking prefix");
    }

    @Test
    public void testGetExchangeRatesMap() throws Exception {
        when(mockResultSet.next()).thenReturn(true, false);
        when(mockResultSet.getString("cde_currency")).thenReturn("USD");
        when(mockResultSet.getDouble("exchange_rate")).thenReturn(1.234);

        Method m = P06_IACC_01_Level1DBTransaction.class.getDeclaredMethod("getExchangeRatesMap");
        m.setAccessible(true);
        @SuppressWarnings("unchecked")
        Map<String, Double> map = (Map<String, Double>) m.invoke(dbTransaction);

        assertEquals(1, map.size());
        assertEquals(Double.valueOf(1.234), map.get("USD"));
    }

    @Test
    public void testGenerateOperationReference() throws Exception {
        P06_IACC_01_BoprRecordBean bean = new P06_IACC_01_BoprRecordBean("BRANCH", new Timestamp(System.currentTimeMillis()));
        bean.setIdOwner("OWNER_XYZ");
        // Without lenderServiceGrp setter, the method will use borrowerServiceGrp or idOwner
        bean.setBorrowerServiceGrp("BORROWER_ABC");

        Method m = P06_IACC_01_Level1DBTransaction.class.getDeclaredMethod("generateOperationReference", P06_IACC_01_BoprRecordBean.class);
        m.setAccessible(true);
        String opRef = (String) m.invoke(dbTransaction, bean);

        assertTrue(opRef.contains("OWNER_XYZ") || opRef.contains("BORROWER_ABC"));
    }

    @Test
    public void testDeleteConcurrentRecords() throws Exception {
        try (
            MockedStatic<P06_IACC_01_Main> mainMock = Mockito.mockStatic(P06_IACC_01_Main.class);
            MockedStatic<P06_IACC_01_PropertiesMgr> propMock = Mockito.mockStatic(P06_IACC_01_PropertiesMgr.class)
        ) {
            String query = "DELETE ...";
            Timestamp ts = new Timestamp(System.currentTimeMillis());

            mainMock.when(P06_IACC_01_Main::get_s_branch).thenReturn("BR");
            mainMock.when(P06_IACC_01_Main::get_o_eventTimestamp).thenReturn(ts);
            propMock.when(() -> P06_IACC_01_PropertiesMgr.getQueryFromPropertiesFile("delete.concurrent.records"))
                    .thenReturn(query);

            when(mockConnection.prepareStatement(query)).thenReturn(mockPreparedStatement);
            when(mockPreparedStatement.executeUpdate()).thenReturn(1);

            Method m = P06_IACC_01_Level1DBTransaction.class.getDeclaredMethod("deleteConcurrentRecords");
            m.setAccessible(true);
            m.invoke(dbTransaction);

            verify(mockPreparedStatement).setString(1, "BR");
            verify(mockPreparedStatement).setTimestamp(2, ts);
            verify(mockPreparedStatement).executeUpdate();
        }
    }
}
