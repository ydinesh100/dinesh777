package com.bnpparibas.atlentic.iacc.bopr.main.test;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.util.*;

import org.junit.Test;
import org.junit.Before;
import org.mockito.MockedStatic;

import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.common.P06_IACC_01_Utility;
import com.bnpparibas.atlentic.iacc.bopr.level1.P06_IACC_01_Level1;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.properties.P06_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.iacc.bopr.exception.P06_IACC_01_ParameterException;
import com.bnpparibas.atlentic.iacc.bopr.exception.P06_IACC_01_ExitApplicationException;
import com.bnpparibas.atlentic.common.StringConverter;

public class P06_IACC_01_MainTest {

    private P06_IACC_01_Main mainInstance;
    private String[] args;

    @Before
    public void setUp() throws Exception {
        args = new String[]{"levell", "branchA", "01/01/2023 12:00:00", "01/01/2023 00:00:00", "01/01/2023 23:59:59"};
        Constructor<P06_IACC_01_Main> constructor = P06_IACC_01_Main.class.getDeclaredConstructor(String[].class);
        constructor.setAccessible(true);
        mainInstance = constructor.newInstance((Object) args);
    }

    @Test
    public void testExecute_Level1_FullPath() throws Exception {
        try (
            MockedStatic<GlobalAtlentic> globalMock = mockStatic(GlobalAtlentic.class);
            MockedStatic<P06_IACC_01_Utility> utilityMock = mockStatic(P06_IACC_01_Utility.class);
            MockedStatic<P06_IACC_01_PropertiesMgr> propMock = mockStatic(P06_IACC_01_PropertiesMgr.class);
            MockedStatic<P06_IACC_01_Level1> level1Mock = mockStatic(P06_IACC_01_Level1.class);
        ) {
            // Mocks
            Connection mockConnection = mock(Connection.class);
            globalMock.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mockConnection);

            Map<String, String> dateMap = new HashMap<>();
            dateMap.put("INTF_EVENT_DATE", "01/01/2023 12:00:00");
            dateMap.put("INTF_SYSTEM_BEGIN_DATE", "01/01/2023 00:00:00");
            dateMap.put("INTF_SYSTEM_END_DATE", "01/01/2023 23:59:59");

            utilityMock.when(() -> P06_IACC_01_Utility.getAtlIntfDateByBranch(anyString(), any()))
                    .thenReturn(dateMap);
            propMock.when(P06_IACC_01_PropertiesMgr::getLevellActionName).thenReturn("levell");

            P06_IACC_01_Level1 mockLevel1 = mock(P06_IACC_01_Level1.class);
            level1Mock.when(P06_IACC_01_Level1::new).thenReturn(mockLevel1);

            // Reflection
            Method method = P06_IACC_01_Main.class.getDeclaredMethod("execute");
            method.setAccessible(true);

            method.invoke(mainInstance);

            verify(mockLevel1).execute();
        }
    }

    @Test(expected = P06_IACC_01_ParameterException.class)
    public void testExecute_ThrowsException_WhenInsufficientArgs() throws Exception {
        String[] badArgs = new String[]{};  // No arguments
        Constructor<P06_IACC_01_Main> constructor = P06_IACC_01_Main.class.getDeclaredConstructor(String[].class);
        constructor.setAccessible(true);
        P06_IACC_01_Main instance = constructor.newInstance((Object) badArgs);

        Method method = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        method.setAccessible(true);
        try {
            method.invoke(instance);
        } catch (Exception e) {
            throw (Exception) e.getCause();  // unwrap
        }
    }

    // You can add more test cases:
    // - testExecute_Level2_WithFileName
    // - testExecute_Level2_WithoutFileName
    // - testExecute_InvalidDateFormat
    // - testExecute_BeginDateAfterEndDate

}
