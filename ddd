public class P06_IACC_01_Level1DBTransactionTest {

    private P06_IACC_01_Level1DBTransaction transaction;
    private P06_IACC_01_Level1Bean bean;

    @Before
    public void setUp() {
        transaction = new P06_IACC_01_Level1DBTransaction();
        bean = new P06_IACC_01_Level1Bean();
    }

    @Test
    public void testPopulateBeanObject_withINRCurrency() throws Exception {
        // Mock ResultSet
        ResultSet rs = mock(ResultSet.class);

        // Assume your bean has these columns and setters
        when(rs.getString("CURRENCY")).thenReturn("INR");
        when(rs.getDouble("AMOUNT")).thenReturn(1000.0);
        when(rs.getString("TXN_TYPE")).thenReturn("SALE");
        when(rs.getString("TXN_ID")).thenReturn("T123");

        // Make method accessible
        Method method = P06_IACC_01_Level1DBTransaction.class.getDeclaredMethod(
                "populateBeanObject", Object.class, ResultSet.class);
        method.setAccessible(true);
        method.invoke(transaction, bean, rs);

        assertEquals("INR", bean.getCurrency());
        assertEquals(1000.0, bean.getAmount(), 0.001);
        assertEquals(0.0, bean.getBaseAmount(), 0.001); // No conversion for INR
    }

    @Test
    public void testPopulateBeanObject_withUSDCurrency() throws Exception {
        ResultSet rs = mock(ResultSet.class);

        when(rs.getString("CURRENCY")).thenReturn("USD");
        when(rs.getDouble("AMOUNT")).thenReturn(200.0);
        when(rs.getString("TXN_TYPE")).thenReturn("PAY");
        when(rs.getString("TXN_ID")).thenReturn("T456");

        // Stub getExchangeRate if needed
        P06_IACC_01_Level1DBTransaction spy = Mockito.spy(transaction);
        Mockito.doReturn(80.0).when(spy).getExchangeRate("USD");

        Method method = P06_IACC_01_Level1DBTransaction.class.getDeclaredMethod(
                "populateBeanObject", Object.class, ResultSet.class);
        method.setAccessible(true);
        method.invoke(spy, bean, rs);

        assertEquals("USD", bean.getCurrency());
        assertEquals(200.0, bean.getAmount(), 0.001);
        assertEquals(16000.0, bean.getBaseAmount(), 0.001); // 200 * 80
    }

    @Test
    public void testGenerateOperationReference() throws Exception {
        bean.setTxnType("SALE");
        bean.setTxnId("TXN789");

        Method method = P06_IACC_01_Level1DBTransaction.class.getDeclaredMethod(
                "generateOperationReference", Object.class);
        method.setAccessible(true);

        String reference = (String) method.invoke(transaction, bean);
        assertEquals("SALE_TXN789", reference);
    }
}
