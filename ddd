import org.junit.Test;
import org.mockito.Mockito;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class P06_IACC_01_DBTransactionTest {

    @Test
    public void testGetRecordsBeansListWithException() throws Exception {
        // Mock dependencies
        P06_IACC_01_DBTransaction dbTransaction = Mockito.spy(new P06_IACC_01_DBTransaction());
        PreparedStatement mockPreparedStatement = mock(PreparedStatement.class);

        // Stub methods on dbTransaction to use the mock PreparedStatement
        doReturn(mockPreparedStatement).when(dbTransaction)
            .prepareStatement(anyString());

        // Simulate SQLException on executeQuery
        when(mockPreparedStatement.executeQuery()).thenThrow(new SQLException("Test Exception"));

        // Use reflection to invoke the private/protected method
        Method getRecordsBeansListMethod = P06_IACC_01_DBTransaction.class
            .getDeclaredMethod("getRecordsBeansList");
        getRecordsBeansListMethod.setAccessible(true);

        try {
            getRecordsBeansListMethod.invoke(dbTransaction);
            fail("Expected P06_IACC_01_SQLException to be thrown");
        } catch (InvocationTargetException e) {
            Throwable cause = e.getCause();
            if (cause instanceof P06_IACC_01_SQLException) {
                P06_IACC_01_SQLException sqlException = (P06_IACC_01_SQLException) cause;
                assertEquals("An error occurred while getting records to report Beans list I", sqlException.getMessage());
            } else {
                throw e;
            }
        }
    }
}
