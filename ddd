import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import com.bnpparibas.atlentic.iacc.bopr.resource.P86_IACC_01_PropertiesMgr;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P86_IACC_01_SQLException;

public class P86_IACC_01_DBTransactionTest {

    @Mock
    private Connection mockConnection;

    @Mock
    private PreparedStatement mockPreparedStatement;

    @Mock
    private ResultSet mockResultSet;

    private TestDBTransaction testDBTransaction;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
        testDBTransaction = new TestDBTransaction(mockConnection);
    }

    @Test
    public void testGetResultSetTrimmedString_returnsTrimmedString() throws SQLException {
        when(mockResultSet.getString("some_field")).thenReturn("  hello  ");
        String result = P86_IACC_01_DBTransaction.getResultSetTrimmedString(mockResultSet, "some_field");
        assertEquals("hello", result);
    }

    @Test
    public void testGetResultSetTrimmedString_returnsNullIfValueIsNull() throws SQLException {
        when(mockResultSet.getString("some_field")).thenReturn(null);
        String result = P86_IACC_01_DBTransaction.getResultSetTrimmedString(mockResultSet, "some_field");
        assertNull(result);
    }

    @Test
    public void testGetRecordsBeansList_returnsFilteredRecords() throws Exception {
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);

        // Simulate two rows: one with amount > 0, one with amount = 0
        when(mockResultSet.next()).thenReturn(true, true, false); // Two rows
        when(mockResultSet.getInt("amount")).thenReturn(100, 0);  // First valid, second ignored

        List<P06_IACC_01_BoprRecordBean> list = testDBTransaction.getRecordsBeansList();

        assertEquals(1, list.size());
        assertEquals(100, list.get(0).getAmount());
    }

    // Helper subclass to provide concrete implementations of abstract methods
    private class TestDBTransaction extends P86_IACC_01_DBTransaction {

        protected TestDBTransaction(Connection connection) throws P86_IACC_01_SQLException {
            super(connection);
        }

        @Override
        protected void feedingRecordBean(P06_IACC_01_BoprRecordBean bean, ResultSet resultSet) throws SQLException {
            bean.setAmount(resultSet.getInt("amount"));
        }

        @Override
        protected void innerFeedingRecordBean(P06_IACC_01_BoprRecordBean bean, ResultSet resultSet)
                throws SQLException {
            // not tested
        }

        @Override
        protected String getSelectRecordsQueryKey() {
            return "select.records.query";
        }

        @Override
        protected void feedRecordsBeansListPreparedStatement(PreparedStatement ps) throws SQLException {
            // nothing to set
        }
    }
}
