package com.bnpparibas.atlentic.iacc.bopr.main.test;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.lang.reflect.Method;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;

import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.resource.P06_IACC_01_PropertiesMgr;
import com.github.stefanbirkner.systemlambda.SystemLambda;

@ExtendWith(MockitoExtension.class)
public class P06_IACC_01_MainTest {

    private void invokeExecute() throws Exception {
        Method execute = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        execute.setAccessible(true);
        execute.invoke(null);
    }

    @Test
    void testInvalidActionThrowsParameterException() throws Exception {
        try (MockedStatic<P06_IACC_01_PropertiesMgr> mockedProps = mockStatic(P06_IACC_01_PropertiesMgr.class)) {
            mockedProps.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");
            mockedProps.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("level2");

            String[] args = {"invalidAction", "BEFOR", "01/01/2025 12:00:00"};
            // Set static args field by reflection or call setter if available
            P06_IACC_01_Main.set_args(args);

            int statusCode = SystemLambda.catchSystemExit(() -> {
                invokeExecute();
            });

            assertEquals(8, statusCode, "Expected exit code 8 on invalid action");
        }
    }

    @Test
    void testLevel1ValidParameters() throws Exception {
        try (MockedStatic<P06_IACC_01_PropertiesMgr> mockedProps = mockStatic(P06_IACC_01_PropertiesMgr.class)) {
            mockedProps.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");
            mockedProps.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("level2");

            String[] args = {"level1", "BEFOR", "01/01/2025 12:00:00"};
            P06_IACC_01_Main.set_args(args);

            int statusCode = SystemLambda.catchSystemExit(() -> {
                invokeExecute();
            });

            assertEquals(0, statusCode, "Expected exit code 0 for valid level1 action");
        }
    }

    @Test
    void testLevel2ValidParameters() throws Exception {
        try (MockedStatic<P06_IACC_01_PropertiesMgr> mockedProps = mockStatic(P06_IACC_01_PropertiesMgr.class)) {
            mockedProps.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");
            mockedProps.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("level2");

            String[] args = {"level2", "BEFOR", "01/01/2025 12:00:00", "output.txt"};
            P06_IACC_01_Main.set_args(args);

            int statusCode = SystemLambda.catchSystemExit(() -> {
                invokeExecute();
            });

            assertEquals(0, statusCode, "Expected exit code 0 for valid level2 action");
        }
    }

    @Test
    void testMissingParametersThrowsParameterException() throws Exception {
        try (MockedStatic<P06_IACC_01_PropertiesMgr> mockedProps = mockStatic(P06_IACC_01_PropertiesMgr.class)) {
            mockedProps.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");
            mockedProps.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("level2");

            String[] args = {};
            P06_IACC_01_Main.set_args(args);

            int statusCode = SystemLambda.catchSystemExit(() -> {
                invokeExecute();
            });

            assertEquals(8, statusCode, "Expected exit code 8 on missing parameters");
        }
    }
}
