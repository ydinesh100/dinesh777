import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.lang.reflect.Method;
import java.security.Permission;

import static org.mockito.Mockito.*;

// Custom security manager to intercept System.exit()
class NoExitSecurityManager extends SecurityManager {
    private final SecurityManager original;

    public NoExitSecurityManager(SecurityManager original) {
        this.original = original;
    }

    @Override
    public void checkPermission(Permission perm) {
        if (original != null) {
            original.checkPermission(perm);
        }
    }

    @Override
    public void checkPermission(Permission perm, Object context) {
        if (original != null) {
            original.checkPermission(perm, context);
        }
    }

    @Override
    public void checkExit(int status) {
        super.checkExit(status);
        throw new ExitException(status);
    }

    public static class ExitException extends SecurityException {
        public final int status;

        public ExitException(int status) {
            super("System.exit() called with status: " + status);
            this.status = status;
        }
    }
}

public class P06_IACC_01_MainTest {

    private SecurityManager originalSecurityManager;

    @BeforeEach
    void setUp() {
        originalSecurityManager = System.getSecurityManager();
        System.setSecurityManager(new NoExitSecurityManager(originalSecurityManager));
    }

    @AfterEach
    void tearDown() {
        System.setSecurityManager(originalSecurityManager);
    }

    // Utility method to invoke private static execute() using reflection
    private void invokeExecute() throws Exception {
        Method executeMethod = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);
        executeMethod.invoke(null);
    }

    // Helper to run code and catch System.exit calls
    private int catchSystemExit(Runnable runnable) {
        try {
            runnable.run();
        } catch (NoExitSecurityManager.ExitException e) {
            return e.status;
        }
        return 0; // no exit called
    }

    @Test
    void testInvalidAction_throwsParameterException_andExitsWithCode8() throws Exception {
        // Mock PropertiesMgr to return known action names
        try (var mockedProps = mockStatic(P06_IACC_01_PropertiesMgr.class)) {
            mockedProps.when(P06_IACC_01_PropertiesMgr::getLevel1ActionName).thenReturn("level1");
            mockedProps.when(P06_IACC_01_PropertiesMgr::getLevel2ActionName).thenReturn("level2");

            // Set arguments with invalid action to cause ParameterException
            String[] args = {"invalidAction", "BEFOR", "01/01/2025 12:00:00"};
            P06_IACC_01_Main.set_args(args);

            int exitCode = catchSystemExit(() -> {
                invokeExecute();
            });

            assertEquals(8, exitCode, "Expected System.exit(8) due to invalid action");
        }
    }

    // Additional tests to cover other branches can be added similarly
}
