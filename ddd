import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.bnpparibas.atlantic.common.utils.DBUtils;
import com.bnpparibas.atlantic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import com.bnpparibas.atlantic.lacc.bopr.level.P06_IACC_01_DBTransaction;
import com.bnpparibas.atlantic.lacc.bopr.util.exception.P06_IACC_01_SQLException;

public class P06_IACC_01_DBTransactionTest {

    @Mock private Connection mockConnection;
    @Mock private PreparedStatement mockPreparedStatement;
    @Mock private ResultSet mockResultSet;

    private P06_IACC_01_DBTransaction dbTransaction;

    @Before
    public void setup() throws Exception {
        MockitoAnnotations.initMocks(this);

        dbTransaction = new P06_IACC_01_DBTransaction(mockConnection) {
            @Override
            protected void feedingRecordBean(P06_IACC_01_BoprRecordBean p_o_recordBean, ResultSet p_o_resultSet) throws SQLException {
                p_o_recordBean.setAmount(100);  // Simulate bean population
            }

            @Override
            protected String getSelectQueryKey() {
                return "test.query.key";
            }

            @Override
            protected void innerFeedingRecordBean(P06_IACC_01_BoprRecordBean p_o_recordBean, ResultSet p_o_resultSet) {
                // Not used in this test
            }
        };
    }

    @Test
    public void testGetResultSetTrimmedString() throws Exception {
        when(mockResultSet.getString("testField")).thenReturn(" testValue ");

        Method method = P06_IACC_01_DBTransaction.class.getDeclaredMethod(
            "getResultSetTrimmedString", ResultSet.class, String.class
        );
        method.setAccessible(true);

        String result = (String) method.invoke(null, mockResultSet, "testField");

        assertEquals("testValue", result);
    }

    @Test
    public void testGetRecordsBeansList() throws Exception {
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);

        when(mockResultSet.next()).thenReturn(true, false); // one record
        when(mockResultSet.getString(anyString())).thenReturn("100"); // Simulate a field

        List<P06_IACC_01_BoprRecordBean> resultList = dbTransaction.getRecordsBeansList();

        assertEquals(1, resultList.size());
        assertEquals(100, resultList.get(0).getAmount());
    }
}
