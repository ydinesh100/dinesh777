@Test
public void testGetRecordsBeansList() throws Exception {
    // Arrange
    when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
    when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);

    // Simulate one row returned
    when(mockResultSet.next()).thenReturn(true).thenReturn(false);
    when(mockResultSet.getString(anyString())).thenReturn("dummyValue");

    // Create a subclass that sets a non-zero amount to pass the filter
    P86_IACC_01_DBTransaction testTransaction = new P86_IACC_01_DBTransaction(mockConnection) {
        @Override
        protected void feedingRecordBean(P06_IACC_01_BoprRecordBean bean, ResultSet rs) throws SQLException {
            bean.setAmount(new BigDecimal("100"));  // Required for bean to be added
        }

        @Override
        protected void innerFeedingRecordBean(P06_IACC_01_BoprRecordBean bean, ResultSet rs) throws SQLException {
            // no-op
        }

        @Override
        protected String getSelectRecordsQueryKey() {
            return "test.query.key";
        }

        @Override
        protected void feedRecordsBeansListPreparedStatement(PreparedStatement ps) throws SQLException {
            // no-op
        }
    };

    // Act
    List<P06_IACC_01_BoprRecordBean> result = testTransaction.getRecordsBeansList();

    // Assert
    assertNotNull(result);
    assertEquals(1, result.size());
    assertEquals(new BigDecimal("100"), result.get(0).getAmount());
}
