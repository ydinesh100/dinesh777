package com.bnpparibas.atlentic.irep.ecb.level.test;

import com.bnpparibas.atlentic.irep.ecb.bean.P06_IREP_01_EcbRecordBean;
import com.bnpparibas.atlentic.irep.ecb.level.P06_IREP_01_DBTransaction;
import com.bnpparibas.atlentic.irep.ecb.resource.P06_IREP_01_PropertiesMgr;
import com.bnpparibas.atlentic.irep.ecb.util.exception.P06_IREP_01_SQLException;
import com.bnpparibas.atlentic.common.utils.DBUtils;
import com.bnpparibas.atlentic.common.Outils;

import org.junit.*;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.lang.reflect.Method;
import java.sql.*;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class P06_IREP_01_DBTransactionTest {

    private Connection mockConnection;
    private PreparedStatement mockPreparedStatement;
    private ResultSet mockResultSet;
    private Date mockEventTimestamp = new Date();

    private P06_IREP_01_DBTransaction transaction;

    @Before
    public void setUp() throws Exception {
        mockConnection = mock(Connection.class);
        mockPreparedStatement = mock(PreparedStatement.class);
        mockResultSet = mock(ResultSet.class);

        // Concrete class to test abstract class
        transaction = new P06_IREP_01_DBTransaction(mockConnection) {
            @Override
            protected void innerFeedingRecordBean(P06_IREP_01_EcbRecordBean bean, ResultSet rs, Map<String, String> map) {
                // do nothing for this test
            }

            @Override
            protected String getSelectRecordsQuerykey() {
                return "select.query.key";
            }

            @Override
            protected void feedRecordsBeansList(PreparedStatement ps, String branchCode, Date eventTimestamp) {
                // do nothing for this test
            }
        };
    }

    @Test
    public void testGetRecordsBeansList_success() throws Exception {
        String mockBranchCode = "BR01";
        String mockSql = "SELECT * FROM dummy";

        // Mock static methods
        try (
            MockedStatic<P06_IREP_01_PropertiesMgr> propMock = Mockito.mockStatic(P06_IREP_01_PropertiesMgr.class);
            MockedStatic<DBUtils> dbUtilsMock = Mockito.mockStatic(DBUtils.class);
            MockedStatic<Outils> outilsMock = Mockito.mockStatic(Outils.class)
        ) {
            propMock.when(() -> P06_IREP_01_PropertiesMgr.getQueryFromPropertiesFile("select.query.key")).thenReturn(mockSql);
            when(mockConnection.prepareStatement(mockSql)).thenReturn(mockPreparedStatement);
            when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);

            // Simulate result set
            when(mockResultSet.next()).thenReturn(true).thenReturn(false);
            outilsMock.when(() -> Outils.getSqlTimestamp(any(Date.class))).thenReturn(new java.sql.Timestamp(mockEventTimestamp.getTime()));

            // Reflectively invoke protected method
            Method method = P06_IREP_01_DBTransaction.class.getDeclaredMethod("getRecordsBeansList", String.class);
            method.setAccessible(true);

            @SuppressWarnings("unchecked")
            List<P06_IREP_01_EcbRecordBean> result = (List<P06_IREP_01_EcbRecordBean>) method.invoke(transaction, mockBranchCode);

            assertNotNull(result);
            assertEquals(1, result.size());
        }
    }

    @Test(expected = P06_IREP_01_SQLException.class)
    public void testGetRecordsBeansList_sqlException() throws Exception {
        String mockBranchCode = "BR02";
        String mockSql = "SELECT * FROM error";

        try (
            MockedStatic<P06_IREP_01_PropertiesMgr> propMock = Mockito.mockStatic(P06_IREP_01_PropertiesMgr.class);
            MockedStatic<DBUtils> dbUtilsMock = Mockito.mockStatic(DBUtils.class)
        ) {
            propMock.when(() -> P06_IREP_01_PropertiesMgr.getQueryFromPropertiesFile("select.query.key")).thenReturn(mockSql);
            when(mockConnection.prepareStatement(mockSql)).thenThrow(new SQLException("DB error"));

            // Reflectively invoke protected method
            Method method = P06_IREP_01_DBTransaction.class.getDeclaredMethod("getRecordsBeansList", String.class);
            method.setAccessible(true);

            method.invoke(transaction, mockBranchCode);
        }
    }
}
