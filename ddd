import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Collections;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_Level;
import com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_DBTransaction;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ExitApplicationException;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_SQLException;

@RunWith(MockitoJUnitRunner.class)
public class P06_IACC_01_LevelTest {

    @Mock
    private Connection mockConnection;

    @Mock
    private P06_IACC_01_DBTransaction mockTransaction;

    private P06_IACC_01_Level<P06_IACC_01_DBTransaction> testLevel;

    @Before
    public void setup() throws Exception {
        MockitoAnnotations.initMocks(this);

        // Mock GlobalAtlentic static call using a spy wrapper
        Field connectionField = GlobalAtlentic.class.getDeclaredField("g_o_loanIQConnection");
        connectionField.setAccessible(true);
        connectionField.set(null, mockConnection);

        when(mockConnection.getAutoCommit()).thenReturn(false);

        // Define concrete class inline
        testLevel = new P06_IACC_01_Level<P06_IACC_01_DBTransaction>() {
            @Override
            protected void innerExecute() throws P06_IACC_01_SQLException, IOException, P06_IACC_01_ExitApplicationException {
                // Simulate inner processing
            }

            @Override
            protected int getLevelNumber() {
                return 1;
            }

            @Override
            protected void initializeDataBaseTransaction(Connection p_o_dataBaseConnection) {
                this.g_o_dataBaseTransaction = mockTransaction;
            }

            @Override
            protected boolean applyCommit() {
                return true;
            }
        };

        // Mock data retrieval
        when(mockTransaction.getRecordsBeansList()).thenReturn(Collections.singletonList(new P06_IACC_01_BoprRecordBean()));
    }

    @Test
    public void testExecute_SuccessPath() throws Exception {
        // Set up commit/rollback behavior
        doNothing().when(mockConnection).commit();
        doNothing().when(mockConnection).setAutoCommit(false);

        // Reflectively invoke `execute` method
        Method executeMethod = P06_IACC_01_Level.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);

        // Invoke and assert no exception thrown
        executeMethod.invoke(testLevel);

        // Verify interactions
        verify(mockTransaction).getRecordsBeansList();
        verify(mockConnection).commit();
    }

    @Test(expected = P06_IACC_01_ExitApplicationException.class)
    public void testExecute_ThrowsExitExceptionOnSQLException() throws Exception {
        when(mockTransaction.getRecordsBeansList()).thenThrow(new P06_IACC_01_SQLException("DB error"));

        Method executeMethod = P06_IACC_01_Level.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);

        try {
            executeMethod.invoke(testLevel);
        } catch (Exception e) {
            Throwable cause = e.getCause();
            if (cause instanceof P06_IACC_01_ExitApplicationException) {
                throw (P06_IACC_01_ExitApplicationException) cause;
            }
            throw e;
        }
    }
}
