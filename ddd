package com.bnpparibas.atlentic.iacc.bopr.level.test;

import static org.mockito.Mockito.*;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.SQLException;
import java.io.IOException;
import java.util.Collections;

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import com.bnpparibas.atlentic.common.GlobalAtlentic;
import com.bnpparibas.atlentic.common.utils.DBUtils;
import com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import com.bnpparibas.atlentic.iacc.bopr.exception.P06_IACC_01_ExitApplicationException;
import com.bnpparibas.atlentic.iacc.bopr.exception.P06_IACC_01_SQLException;
import com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_Level;
import com.bnpparibas.atlentic.iacc.bopr.level.P06_IACC_01_DBTransaction;

public class P06_IACC_01_Level_ExecuteTest {

    private P06_IACC_01_Level levelInstance;
    private Connection mockConnection;
    private P06_IACC_01_DBTransaction mockDBTransaction;

    private MockedStatic<GlobalAtlentic> globalAtlenticMock;
    private MockedStatic<DBUtils> dbUtilsMock;

    @Before
    public void setUp() throws Exception {
        // Create anonymous subclass if original is abstract
        levelInstance = new P06_IACC_01_Level() {
            @Override
            protected int getLevelNumber() {
                return 1;
            }

            @Override
            protected void innerExecute() throws IOException, P06_IACC_01_SQLException {
                // Simulate valid behavior
            }

            @Override
            protected boolean applyCommit() {
                return true;
            }
        };

        mockConnection = mock(Connection.class);
        mockDBTransaction = mock(P06_IACC_01_DBTransaction.class);

        // Inject mock transaction using reflection
        Field dbTransField = P06_IACC_01_Level.class.getDeclaredField("g_o_dataBaseTransaction");
        dbTransField.setAccessible(true);
        dbTransField.set(levelInstance, mockDBTransaction);

        // Static mocks
        globalAtlenticMock = Mockito.mockStatic(GlobalAtlentic.class);
        globalAtlenticMock.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mockConnection);

        dbUtilsMock = Mockito.mockStatic(DBUtils.class);

        // Mock initializeDataBaseTransaction()
        Method initMethod = P06_IACC_01_Level.class.getDeclaredMethod("initializeDataBaseTransaction", Connection.class);
        initMethod.setAccessible(true);
        initMethod.invoke(levelInstance, mockConnection);

        // Mock bean list return (no constructor required)
        P06_IACC_01_BoprRecordBean mockBean = mock(P06_IACC_01_BoprRecordBean.class);
        when(mockDBTransaction.getRecordsBeansList()).thenReturn(Collections.singletonList(mockBean));
    }

    @After
    public void tearDown() {
        globalAtlenticMock.close();
        dbUtilsMock.close();
    }

    @Test
    public void testExecute_SuccessfulPath() throws Exception {
        Method executeMethod = P06_IACC_01_Level.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);

        executeMethod.invoke(levelInstance);

        verify(mockConnection).setAutoCommit(false);
        verify(mockConnection).commit();
        dbUtilsMock.verify(() -> DBUtils.closeConnexion(mockConnection, null, null), times(1));
    }

    @Test(expected = P06_IACC_01_ExitApplicationException.class)
    public void testExecute_IOExceptionDuringInnerExecute() throws Throwable {
        // Subclass with throwing behavior
        P06_IACC_01_Level errorLevel = new P06_IACC_01_Level() {
            @Override
            protected int getLevelNumber() {
                return 2;
            }

            @Override
            protected void innerExecute() throws IOException {
                throw new IOException("Simulated IOException");
            }

            @Override
            protected boolean applyCommit() {
                return true;
            }
        };

        // Inject mocked DB transaction
        Field dbTransField = P06_IACC_01_Level.class.getDeclaredField("g_o_dataBaseTransaction");
        dbTransField.setAccessible(true);
        dbTransField.set(errorLevel, mockDBTransaction);

        globalAtlenticMock.when(GlobalAtlentic::getLoanIQConnection).thenReturn(mockConnection);

        Method initMethod = P06_IACC_01_Level.class.getDeclaredMethod("initializeDataBaseTransaction", Connection.class);
        initMethod.setAccessible(true);
        initMethod.invoke(errorLevel, mockConnection);

        P06_IACC_01_BoprRecordBean mockBean = mock(P06_IACC_01_BoprRecordBean.class);
        when(mockDBTransaction.getRecordsBeansList()).thenReturn(Collections.singletonList(mockBean));

        // Call and catch underlying exception
        Method executeMethod = P06_IACC_01_Level.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);

        try {
            executeMethod.invoke(errorLevel);
        } catch (Exception e) {
            throw e.getCause(); // unwrap InvocationTargetException
        }
    }
}
