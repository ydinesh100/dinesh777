import com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import org.junit.Before;
import org.junit.Test;

import java.lang.reflect.Method;
import java.sql.*;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

public class P06_IACC_01_Level208TransactionTest {

    private Connection mockConnection;
    private PreparedStatement mockPreparedStatement;
    private ResultSet mockResultSet;

    private P06_IACC_01_Level208Transaction instance;

    @Before
    public void setUp() throws Exception {
        mockConnection = mock(Connection.class);
        mockPreparedStatement = mock(PreparedStatement.class);
        mockResultSet = mock(ResultSet.class);

        // Use reflection to invoke protected constructor
        Constructor<P06_IACC_01_Level208Transaction> constructor =
                P06_IACC_01_Level208Transaction.class.getDeclaredConstructor(Connection.class);
        constructor.setAccessible(true);
        instance = constructor.newInstance(mockConnection);
    }

    @Test
    public void testInnerFeedingRecordBean() throws Exception {
        P06_IACC_01_BoprRecordBean bean = new P06_IACC_01_BoprRecordBean();

        when(mockResultSet.getDouble("ant_cashflow")).thenReturn(1000.0);
        when(mockResultSet.getObject("ant_cashflow_brn_ccy")).thenReturn(1);
        when(mockResultSet.getDouble("ant_cashflow_brn_ccy")).thenReturn(800.0);

        Method method = P06_IACC_01_Level208Transaction.class.getDeclaredMethod(
                "innerFeedingRecordBean", P06_IACC_01_BoprRecordBean.class, ResultSet.class);
        method.setAccessible(true);
        method.invoke(instance, bean, mockResultSet);

        assertEquals(1000.0, bean.getAmount(), 0.01);
        assertEquals(800.0, bean.getAmountInBranchCurrency(), 0.01);
    }

    @Test
    public void testGetBranchCurrency() throws Exception {
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(true);
        when(mockResultSet.getString("cde_branch_ccy")).thenReturn("USD");

        // Use reflection to invoke protected method
        Method method = P06_IACC_01_Level208Transaction.class.getDeclaredMethod("getBranchCurrency");
        method.setAccessible(true);
        String result = (String) method.invoke(instance);

        assertEquals("USD", result);
    }

    @Test
    public void testGetSelectRecordsQueryKey() throws Exception {
        Method method = P06_IACC_01_Level208Transaction.class.getDeclaredMethod("getSelectRecordsQueryKey");
        method.setAccessible(true);
        String result = (String) method.invoke(instance);

        assertEquals("select.records.from.atl", result);
    }

    @Test
    public void testFeedRecordsBeansListPreparedStatement() throws Exception {
        // Simulate static calls manually: assume getG_s_branch() returns "BR01" and getSqlTimestamp returns a fixed timestamp
        Timestamp mockTimestamp = new Timestamp(System.currentTimeMillis());

        // Reflection call
        Method method = P06_IACC_01_Level208Transaction.class.getDeclaredMethod(
                "feedRecordsBeansListPreparedStatement", PreparedStatement.class);
        method.setAccessible(true);

        // Fake values instead of static call
        doNothing().when(mockPreparedStatement).setString(eq(1), eq("BR01"));
        doNothing().when(mockPreparedStatement).setTimestamp(eq(2), any());

        method.invoke(instance, mockPreparedStatement);

        verify(mockPreparedStatement).setString(eq(1), anyString());
        verify(mockPreparedStatement).setTimestamp(eq(2), any(Timestamp.class));
    }

    @Test
    public void testFeedingRecordBean() throws Exception {
        P06_IACC_01_BoprRecordBean bean = new P06_IACC_01_BoprRecordBean();

        when(mockResultSet.getString("pid_deal")).thenReturn("D001");
        when(mockResultSet.getString("pid facility")).thenReturn("F001");
        when(mockResultSet.getString("rid outstanding")).thenReturn("O001");
        when(mockResultSet.getString("id event")).thenReturn("E001");
        when(mockResultSet.getString("cde_event")).thenReturn("EV001");
        when(mockResultSet.getString("rid_cashflow")).thenReturn("CF001");
        when(mockResultSet.getString("cde_direction")).thenReturn("CREDIT");
        when(mockResultSet.getString("cde_country")).thenReturn("IN");
        when(mockResultSet.getDate("dte_effective")).thenReturn(Date.valueOf("2024-06-01"));
        when(mockResultSet.getString("cde_currency")).thenReturn("INR");
        when(mockResultSet.getString("cde_sender_service")).thenReturn("SVC001");
        when(mockResultSet.getString("cde_operation_reference")).thenReturn("REF001");

        Method method = P06_IACC_01_Level208Transaction.class.getDeclaredMethod(
                "feedingRecordBean", P06_IACC_01_BoprRecordBean.class, ResultSet.class);
        method.setAccessible(true);
        method.invoke(instance, bean, mockResultSet);

        assertEquals("D001", bean.getDealId());
        assertEquals("F001", bean.getFacilityId());
        assertEquals("O001", bean.getOutstandingId());
        assertEquals("E001", bean.getEventId());
        assertEquals("EV001", bean.getEventCode());
        assertEquals("CF001", bean.getCashflowId());
        assertEquals("CREDIT", bean.getCashflowDirection());
        assertEquals("IN", bean.getCountryCode());
        assertEquals("INR", bean.getAmountCurrency());
        assertEquals("SVC001", bean.getSenderServiceCode());
        assertEquals("REF001", bean.getOperationReference());
    }
}
