import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.MissingResourceException;
import java.util.ResourceBundle;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class P06_IACC_01_PropertiesMgrTest {

    @Mock
    private ResourceBundle mockResourceBundle;

    private P06_IACC_01_PropertiesMgr propertiesMgr;

    @Before
    public void setUp() throws Exception {
        // Reset static fields or mocks before each test
        propertiesMgr = new P06_IACC_01_PropertiesMgr();
        
        // Use reflection to set the static ResourceBundle to null before each test
        java.lang.reflect.Field bundleField = P06_IACC_01_PropertiesMgr.class
            .getDeclaredField("g_o_boprQueriesPropertiesBundle");
        bundleField.setAccessible(true);
        bundleField.set(null, null);

        // Mock static methods for schema names
        mockStatic(P06_IACC_01_PropertiesMgr.class);
        when(P06_IACC_01_PropertiesMgr.getLiqSchemaName()).thenReturn("liqSchema");
        when(P06_IACC_01_PropertiesMgr.getAtlenticSchemaName()).thenReturn("atlanticSchema");
    }

    @Test
    public void testGetQueryFromPropertiesFile_Success() {
        // Arrange
        String queryKey = "testQuery";
        String rawQuery = "SELECT * FROM *liq_sh*.table1 WHERE id = *atl_sh*.id";
        String expectedQuery = "SELECT * FROM liqSchema.table1 WHERE id = atlanticSchema.id";

        // Mock ResourceBundle loading
        when(mockResourceBundle.getString(queryKey)).thenReturn(rawQuery);
        mockStatic(ResourceBundle.class);
        when(ResourceBundle.getBundle(anyString())).thenReturn(mockResourceBundle);

        // Act
        String result = P06_IACC_01_PropertiesMgr.getQueryFromPropertiesFile(queryKey);

        // Assert
        assertNotNull(result);
        assertEquals(expectedQuery, result);
        verify(mockResourceBundle, times(1)).getString(queryKey);
    }

    @Test(expected = MissingResourceException.class)
    public void testGetQueryFromPropertiesFile_MissingKey() {
        // Arrange
        String queryKey = "invalidKey";

        // Mock ResourceBundle to throw MissingResourceException
        when(mockResourceBundle.getString(queryKey)).thenThrow(new MissingResourceException(
            "Key not found", "ResourceBundle", queryKey));
        mockStatic(ResourceBundle.class);
        when(ResourceBundle.getBundle(anyString())).thenReturn(mockResourceBundle);

        // Act
        P06_IACC_01_PropertiesMgr.getQueryFromPropertiesFile(queryKey);

        // Assert: Expects MissingResourceException
    }

    @Test
    public void testGetQueryFromPropertiesFile_NullBundle_InitializesBundle() {
        // Arrange
        String queryKey = "testQuery";
        String rawQuery = "SELECT * FROM *liq_sh*.table1";
        String expectedQuery = "SELECT * FROM liqSchema.table1";

        // Mock ResourceBundle loading
        when(mockResourceBundle.getString(queryKey)).thenReturn(rawQuery);
        mockStatic(ResourceBundle.class);
        when(ResourceBundle.getBundle(anyString())).thenReturn(mockResourceBundle);

        // Act
        String result = P06_IACC_01_PropertiesMgr.getQueryFromPropertiesFile(queryKey);

        // Assert
        assertNotNull(result);
        assertEquals(expectedQuery, result);
        verifyStatic(ResourceBundle.class, times(1));
        ResourceBundle.getBundle(anyString());
    }

    @Test(expected = NullPointerException.class)
    public void testGetQueryFromPropertiesFile_NullQueryKey() {
        // Act
        P06_IACC_01_PropertiesMgr.getQueryFromPropertiesFile(null);

        // Assert: Expects NullPointerException
    }

    @Test
    public void testGetQueryFromPropertiesFile_NoPlaceholders() {
        // Arrange
        String queryKey = "noPlaceholderQuery";
        String rawQuery = "SELECT * FROM table1";
        String expectedQuery = "SELECT * FROM table1";

        // Mock ResourceBundle loading
        when(mockResourceBundle.getString(queryKey)).thenReturn(rawQuery);
        mockStatic(ResourceBundle.class);
        when(ResourceBundle.getBundle(anyString())).thenReturn(mockResourceBundle);

        // Act
        String result = P06_IACC_01_PropertiesMgr.getQueryFromPropertiesFile(queryKey);

        // Assert
        assertNotNull(result);
        assertEquals(expectedQuery, result);
        verify(mockResourceBundle, times(1)).getString(queryKey);
    }
}
