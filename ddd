@Test
public void testGetRecordsBeansList() throws Exception {
    // Arrange mocks
    when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
    when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
    when(mockResultSet.next()).thenReturn(true).thenReturn(false); // Simulate one row
    when(mockResultSet.getString(anyString())).thenReturn("dummy");

    // Subclass with public wrapper method to access protected method
    class TestTransaction extends P06_IACC_01_DBTransaction {
        TestTransaction(Connection conn) throws P06_IACC_01_SQLException {
            super(conn);
        }

        @Override
        protected void feedingRecordBean(P06_IACC_01_BoprRecordBean bean, ResultSet rs) throws SQLException {
            bean.setAmount(100.0); // Must be > 0 for inclusion
        }

        @Override
        protected void innerFeedingRecordBean(P06_IACC_01_BoprRecordBean bean, ResultSet rs) throws SQLException {
            // No-op
        }

        @Override
        protected String getSelectRecordsQueryKey() {
            return "test.query.key";
        }

        @Override
        protected void feedRecordsBeansListPreparedStatement(PreparedStatement ps) throws SQLException {
            // No-op
        }

        public List<P06_IACC_01_BoprRecordBean> callGetRecordsBeansList() throws P06_IACC_01_SQLException {
            return this.getRecordsBeansList();
        }
    }

    // Instantiate the subclass
    TestTransaction testTransaction = new TestTransaction(mockConnection);

    // Act
    List<P06_IACC_01_BoprRecordBean> result = testTransaction.callGetRecordsBeansList();

    // Assert
    assertNotNull(result);
    assertEquals(1, result.size());
    assertEquals(100.0, result.get(0).getAmount(), 0.0001); // delta for double comparison
}
