package com.bnpparibas.atlentic.irep.ecb.levell;

import com.bnpparibas.atlentic.irep.ecb.level.P06_IREP_01_Level;
import com.bnpparibas.atlentic.irep.ecb.main.P06_IREP_01_Main;
import com.bnpparibas.atlentic.irep.ecb.util.exception.P06_IREP_01_SQLException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class P06_IREP_01_LevellTest {

    private P06_IREP_01_Levell level1;
    private P96_IREP_01_Level1D8Transaction mockTransaction;

    @BeforeEach
    void setUp() throws Exception {
        level1 = new P06_IREP_01_Levell();

        // Mock the DBTransaction
        mockTransaction = mock(P96_IREP_01_Level1D8Transaction.class);

        // Set super.g_o_dataBaseTransaction
        Field txField = P06_IREP_01_Level.class.getDeclaredField("g_o_dataBaseTransaction");
        txField.setAccessible(true);
        txField.set(level1, mockTransaction);

        // Set super.g_o_recordBeansList
        List<Object> mockBeans = new ArrayList<>();
        mockBeans.add(new Object());  // add dummy record
        Field listField = P06_IREP_01_Level.class.getDeclaredField("g_o_recordBeansList");
        listField.setAccessible(true);
        listField.set(level1, mockBeans);

        // Mock static fields from P06_IREP_01_Main
        Field branchField = P06_IREP_01_Main.class.getDeclaredField("g_s_branch");
        branchField.setAccessible(true);
        branchField.set(null, "BR001");

        Field timestampField = P06_IREP_01_Main.class.getDeclaredField("g_o_eventTimestamp");
        timestampField.setAccessible(true);
        timestampField.set(null, new Timestamp(System.currentTimeMillis()));
    }

    @Test
    void testInnerExecute() throws Exception {
        // Mock insertRecordsBeansList to return a number
        when(mockTransaction.insertRecordsBeansList(anyList())).thenReturn(1);

        Method method = P06_IREP_01_Levell.class.getDeclaredMethod("innerExecute");
        method.setAccessible(true);
        method.invoke(level1);

        // Verify delete and insert are called
        verify(mockTransaction, times(1))
                .deleteConcurrentRecords(eq("BR001"), any(Timestamp.class));

        verify(mockTransaction, times(1))
                .insertRecordsBeansList(anyList());
    }

    @Test
    void testGetLevelNumber() throws Exception {
        Method method = P06_IREP_01_Levell.class.getDeclaredMethod("getLevelNumber");
        method.setAccessible(true);
        int level = (int) method.invoke(level1);
        assertEquals(1, level);
    }

    @Test
    void testApplyCommit() throws Exception {
        Method method = P06_IREP_01_Levell.class.getDeclaredMethod("applyCommit");
        method.setAccessible(true);
        boolean result = (boolean) method.invoke(level1);
        assertTrue(result);
    }

    @Test
    void testInitializeDataBaseTransaction() throws Exception {
        Connection mockConnection = mock(Connection.class);

        Method method = P06_IREP_01_Levell.class.getDeclaredMethod("initializeDataBaseTransaction", Connection.class);
        method.setAccessible(true);
        method.invoke(level1, mockConnection);

        Field txField = P06_IREP_01_Level.class.getDeclaredField("g_o_dataBaseTransaction");
        txField.setAccessible(true);
        Object txInstance = txField.get(level1);

        assertNotNull(txInstance);
        assertEquals("P06_IREP_01_Level1DBTransaction", txInstance.getClass().getSimpleName());
    }
}
