package com.bnpparibas.atlentic.irep.ecb.level.test;

import com.bnpparibas.atlentic.irep.ecb.level.P06_IREP_01_DBTransaction;
import com.bnpparibas.atlentic.irep.ecb.level.P06_IREP_01_EcbRecordBean;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class P06_IREP_01_DBTransactionTest {

    private Connection mockConnection;
    private PreparedStatement mockPreparedStatement;
    private ResultSet mockResultSet;
    private Date mockDate;
    private P06_IREP_01_DBTransaction dbTransactionInstance;

    @Before
    public void setUp() throws Exception {
        mockConnection = mock(Connection.class);
        mockPreparedStatement = mock(PreparedStatement.class);
        mockResultSet = mock(ResultSet.class);
        mockDate = new Date();

        // Anonymous concrete subclass of abstract class
        dbTransactionInstance = new P06_IREP_01_DBTransaction(mockConnection) {
            // Override abstract methods if needed
        };

        // Set private field g_o_eventTimestamp via reflection
        Field field = P06_IREP_01_DBTransaction.class.getDeclaredField("g_o_eventTimestamp");
        field.setAccessible(true);
        field.set(dbTransactionInstance, mockDate);
    }

    @Test
    public void testGetResultSetTrimedString_NonNullValue() throws Exception {
        Method method = P06_IREP_01_DBTransaction.class.getDeclaredMethod("getResultSetTrimedString", ResultSet.class, String.class);
        method.setAccessible(true);

        when(mockResultSet.getString("some_column")).thenReturn("  value with space  ");

        String result = (String) method.invoke(dbTransactionInstance, mockResultSet, "some_column");

        assertEquals("value with space", result);
    }

    @Test
    public void testGetResultSetTrimedString_NullValue() throws Exception {
        Method method = P06_IREP_01_DBTransaction.class.getDeclaredMethod("getResultSetTrimedString", ResultSet.class, String.class);
        method.setAccessible(true);

        when(mockResultSet.getString("some_column")).thenReturn(null);

        String result = (String) method.invoke(dbTransactionInstance, mockResultSet, "some_column");

        assertNull(result);
    }

    @Test
    public void testFeedingRecordBean() throws Exception {
        Method method = P06_IREP_01_DBTransaction.class.getDeclaredMethod("feedingRecordBean", ResultSet.class);
        method.setAccessible(true);

        when(mockResultSet.getString("ECB_UNIQUE_ID")).thenReturn("ECB001");
        when(mockResultSet.getString("REPORTING_EVENT_TYPE")).thenReturn("E1");
        when(mockResultSet.getTimestamp("EVENT_TIMESTAMP")).thenReturn(new Timestamp(mockDate.getTime()));
        when(mockResultSet.getString("SRC_APPLICATION")).thenReturn("APP1");

        Object result = method.invoke(dbTransactionInstance, mockResultSet);
        assertNotNull(result);
        assertTrue(result instanceof P06_IREP_01_EcbRecordBean);

        P06_IREP_01_EcbRecordBean bean = (P06_IREP_01_EcbRecordBean) result;
        assertEquals("ECB001", bean.getEcbUniqueId());
        assertEquals("E1", bean.getReportingEventType());
        assertEquals("APP1", bean.getSrcApplication());
        assertEquals(mockDate.getTime(), bean.getEventTimestamp().getTime());
    }

    @Test
    public void testGetFacRiskRecordsBeansList() throws Exception {
        Method method = P06_IREP_01_DBTransaction.class.getDeclaredMethod("getFacRiskRecordsBeansList", ResultSet.class);
        method.setAccessible(true);

        when(mockResultSet.next()).thenReturn(true, false);
        when(mockResultSet.getString(anyString())).thenReturn("sampleValue");
        when(mockResultSet.getTimestamp(anyString())).thenReturn(new Timestamp(mockDate.getTime()));

        Object result = method.invoke(dbTransactionInstance, mockResultSet);

        assertNotNull(result);
        assertTrue(result instanceof List<?>);
        List<?> list = (List<?>) result;
        assertEquals(1, list.size());
        assertTrue(list.get(0) instanceof P06_IREP_01_EcbRecordBean);
    }
}
