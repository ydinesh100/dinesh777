public class P06_IACC_01_DBTransactionTest {

    @Mock private Connection mockConnection;
    @Mock private PreparedStatement mockPreparedStatement;
    @Mock private ResultSet mockResultSet;

    private TestableDBTransaction dbTransaction;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);

        dbTransaction = new TestableDBTransaction(mockConnection);  // âœ… use subclass type
    }

    // âœ… Subclass that exposes the protected method
    private static class TestableDBTransaction extends P06_IACC_01_DBTransaction {
        public TestableDBTransaction(Connection conn) throws P06_IACC_01_SQLException {
            super(conn);
        }

        @Override
        protected void feedingRecordBean(P06_IACC_01_BoprRecordBean bean, ResultSet rs) throws SQLException {
            bean.setAmount(rs.getInt("amount"));
        }

        @Override
        protected void innerFeedingRecordBean(P06_IACC_01_BoprRecordBean bean, ResultSet rs) {}

        @Override
        protected String getSelectRecordsQueryKey() {
            return "dummy.key";
        }

        @Override
        protected void feedRecordsBeansListPreparedStatement(PreparedStatement ps) {}

        // âœ… public wrapper for test
        public List<P06_IACC_01_BoprRecordBean> callGetRecordsBeansList() throws P06_IACC_01_SQLException {
            return getRecordsBeansList();  // ðŸ‘ˆ this is the method under test
        }
    }

    @Test
    public void testGetRecordsBeansList_PositiveAmount() throws Exception {
        when(mockResultSet.next()).thenReturn(true, false);
        when(mockResultSet.getInt("amount")).thenReturn(100);

        List<P06_IACC_01_BoprRecordBean> result = dbTransaction.callGetRecordsBeansList();

        assertEquals(1, result.size());
        assertEquals(100, result.get(0).getAmount());
    }
}
