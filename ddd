package com.bnpparibas.atlentic.iacc.bopr.level2Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import com.bnpparibas.atlentic.iacc.bopr.bean.P06_IACC_01_BoprRecordBean;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_BoprStringBuffer;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2;
import com.bnpparibas.atlentic.iacc.bopr.level2.P06_IACC_01_Level2DBTransaction;
import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ExitApplicationException;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_SQLException;

@RunWith(PowerMockRunner.class)
@PrepareForTest({System.class, P06_IACC_01_Main.class})
public class P06_IACC_01_Level2Test {

    @InjectMocks
    private P06_IACC_01_Level2 level2;

    @Mock
    private P06_IACC_01_Level2DBTransaction dbTransaction;

    @Mock
    private P06_IACC_01_BoprRecordBean recordBean;

    @Mock
    private Connection connection;

    private List<P06_IACC_01_BoprRecordBean> recordBeansList;

    private P06_IACC_01_BoprStringBuffer stringBuffer;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);

        // Initialize recordBeansList
        recordBeansList = new ArrayList<>();
        recordBeansList.add(recordBean);

        // Set protected fields using reflection
        Field recordBeansListField = P06_IACC_01_Level2.class.getSuperclass().getDeclaredField("g_o_recordBeansList");
        recordBeansListField.setAccessible(true);
        recordBeansListField.set(level2, recordBeansList);

        Field dbTransactionField = P06_IACC_01_Level2.class.getSuperclass().getDeclaredField("g_o_dataBaseTransaction");
        dbTransactionField.setAccessible(true);
        dbTransactionField.set(level2, dbTransaction);

        // Mock static methods
        PowerMockito.mockStatic(System.class);
        when(System.getenv("LIQFilesOutDirectory")).thenReturn("/tmp/");

        PowerMockito.mockStatic(P06_IACC_01_Main.class);
        P06_IACC_01_Main.g_s_textFileName = "output.txt";

        // Mock recordBean methods
        when(recordBean.getSenderServiceCode()).thenReturn("123456");
        when(recordBean.getOperationReference()).thenReturn("OP_REF_123");
        when(recordBean.getCountryCode()).thenReturn("FR");
        when(recordBean.getEffectiveDate()).thenReturn(new Date());
        when(recordBean.getCashflowDirection()).thenReturn("FROM");
        when(recordBean.getAmountCurrency()).thenReturn("EUR");
        when(recordBean.getAmount()).thenReturn(1000.0);
        when(recordBean.getAmountInBranchCurrency()).thenReturn(1000.0);

        // Initialize stringBuffer
        stringBuffer = mock(P06_IACC_01_BoprStringBuffer.class);
        when(stringBuffer.toString()).thenReturn("mocked file content");
    }

    @Test
    public void testInnerExecute_Success() throws Exception {
        // Arrange
        when(dbTransaction.getBranchCurrency()).thenReturn("EUR");

        // Act
        level2.innerExecute();

        // Assert
        verify(dbTransaction).getBranchCurrency();
        verify(stringBuffer).feedHeader();
        verify(stringBuffer).appendRecord(recordBean, "EUR");
        verify(stringBuffer).feedFooter();
        verify(stringBuffer).toString();
    }

    @Test(expected = IOException.class)
    public void testInnerExecute_EnvVariableNotSet() throws Exception {
        // Arrange
        when(System.getenv("LIQFilesOutDirectory")).thenReturn(null);

        // Act
        level2.innerExecute();
    }

    @Test
    public void testInnerExecute_FileWritten() throws Exception {
        // Arrange
        when(dbTransaction.getBranchCurrency()).thenReturn("EUR");
        File tempFile = File.createTempFile("test", ".txt");
        String tempFilePath = tempFile.getAbsolutePath();

        // Mock FileWriter behavior indirectly by overriding innerExecute behavior if needed
        try {
            level2.innerExecute();
            assertTrue(new File(tempFilePath).exists());
        } finally {
            tempFile.delete();
        }
    }

    @Test
    public void testGetTextFileContent_Success() throws Exception {
        // Arrange
        when(dbTransaction.getBranchCurrency()).thenReturn("EUR");

        // Use reflection to invoke private getTextFileContent
        Method getTextFileContentMethod = P06_IACC_01_Level2.class.getDeclaredMethod("getTextFileContent");
        getTextFileContentMethod.setAccessible(true);

        // Act
        String result = (String) getTextFileContentMethod.invoke(level2);

        // Assert
        verify(dbTransaction).getBranchCurrency();
        verify(stringBuffer).feedHeader();
        verify(stringBuffer).appendRecord(recordBean, "EUR");
        verify(stringBuffer).feedFooter();
        assertEquals("mocked file content", result);
    }

    @Test
    public void testGetTextFileContent_EmptyList() throws Exception {
        // Arrange
        recordBeansList.clear();
        when(dbTransaction.getBranchCurrency()).thenReturn("EUR");

        Method getTextFileContentMethod = P06_IACC_01_Level2.class.getDeclaredMethod("getTextFileContent");
        getTextFileContentMethod.setAccessible(true);

        // Act
        String result = (String) getTextFileContentMethod.invoke(level2);

        // Assert
        verify(dbTransaction).getBranchCurrency();
        verify(stringBuffer).feedHeader();
        verify(stringBuffer, never()).appendRecord(any(), anyString());
        verify(stringBuffer).feedFooter();
        assertEquals("mocked file content", result);
    }

    @Test
    public void testGetLevelNumber() {
        // Act
        int levelNumber = level2.getLevelNumber();

        // Assert
        assertEquals(2, levelNumber);
    }

    @Test
    public void testInitializeDataBaseTransaction() throws Exception {
        // Act
        level2.initializeDataBaseTransaction(connection);

        // Assert
        Field dbTransactionField = P06_IACC_01_Level2.class.getSuperclass().getDeclaredField("g_o_dataBaseTransaction");
        dbTransactionField.setAccessible(true);
        Object transaction = dbTransactionField.get(level2);
        assertEquals(P06_IACC_01_Level2DBTransaction.class, transaction.getClass());
    }

    @Test
    public void testApplyCommit() {
        // Act
        boolean result = level2.applyCommit();

        // Assert
        assertFalse(result);
    }
}
