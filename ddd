package com.bnpparibas.atlentic.iacc.bopr.main.test;

import static org.junit.Assert.*;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import org.junit.Test;
import com.bnpparibas.atlentic.iacc.bopr.main.P06_IACC_01_Main;
import com.bnpparibas.atlentic.iacc.bopr.util.exception.P06_IACC_01_ParameterException;

public class P06_IACC_01_MainTest {

    /**
     * Helper to invoke private execute() on P06_IACC_01_Main instance with given args.
     */
    private void invokeExecuteWithArgs(String[] args) throws Throwable {
        P06_IACC_01_Main instance = 
            P06_IACC_01_Main.class.getDeclaredConstructor(String[].class)
                .newInstance((Object) args);
        Method executeMethod = P06_IACC_01_Main.class.getDeclaredMethod("execute");
        executeMethod.setAccessible(true);
        try {
            executeMethod.invoke(instance);
        } catch (InvocationTargetException ite) {
            // unwrap the original exception thrown inside execute()
            throw ite.getCause();
        }
    }

    @Test(expected = P06_IACC_01_ParameterException.class)
    public void testExecute_NoArgs_ThrowsParameterException() throws Throwable {
        invokeExecuteWithArgs(new String[0]);
    }

    @Test
    public void testExecute_InsufficientArgs_ThrowsParameterException() {
        try {
            invokeExecuteWithArgs(new String[] {"Level1"});
            fail("Expected ParameterException due to insufficient args");
        } catch (Throwable e) {
            assertTrue(e instanceof P06_IACC_01_ParameterException);
            assertTrue(e.getMessage().contains("Wrong parameters number"));
        }
    }

    @Test
    public void testExecute_UnknownAction_ThrowsParameterException() {
        try {
            invokeExecuteWithArgs(new String[] {"UnknownAction", "BR1", "01/01/2025 00:00:00"});
            fail("Expected ParameterException due to unknown action");
        } catch (Throwable e) {
            assertTrue(e instanceof P06_IACC_01_ParameterException);
            assertTrue(e.getMessage().contains("unknown"));
        }
    }

    @Test
    public void testExecute_ValidLevel1Args() {
        // Assuming Level1 action is "Level1" and minimum args length is 3
        String[] args = new String[] {
            "Level1",          // action
            "BR1",             // branch
            "01/01/2025 00:00:00",  // event date
            "01/01/2025 00:00:00",  // begin date
            "02/01/2025 00:00:00"   // end date
        };
        try {
            invokeExecuteWithArgs(args);
            // If no exception, test passes
        } catch (Throwable e) {
            fail("Did not expect exception: " + e);
        }
    }

    @Test
    public void testExecute_ValidLevel2Args() {
        // Assuming Level2 action is "Level2" and minimum args length is 3 or 4 (with file name)
        String[] args = new String[] {
            "Level2",          // action
            "BR1",             // branch
            "01/01/2025 00:00:00",  // event date
            "reportFile.txt"        // file name (optional)
        };
        try {
            invokeExecuteWithArgs(args);
            // If no exception, test passes
        } catch (Throwable e) {
            fail("Did not expect exception: " + e);
        }
    }
}
