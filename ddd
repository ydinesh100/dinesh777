import org.junit.Test;
import java.lang.reflect.*;
import java.sql.*;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class P06_IACC_01_DBTransactionTest {

    @Test
    public void testGetRecordsBeansListWithException() throws Exception {
        // Step 1: Create instance via reflection
        Constructor<P06_IACC_01_DBTransaction> constructor =
            P06_IACC_01_DBTransaction.class.getDeclaredConstructor();
        constructor.setAccessible(true);
        P06_IACC_01_DBTransaction dbTransaction = constructor.newInstance();

        // Step 2: Mock Connection and PreparedStatement
        Connection mockConnection = mock(Connection.class);
        PreparedStatement mockPreparedStatement = mock(PreparedStatement.class);

        // Configure the mock to throw SQLException
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenThrow(new SQLException("Test Exception"));

        // Step 3: Inject mock connection into private field g_o_dataBaseConnection
        Field connField = P06_IACC_01_DBTransaction.class.getDeclaredField("g_o_dataBaseConnection");
        connField.setAccessible(true);
        connField.set(dbTransaction, mockConnection);

        // Step 4: Use reflection to invoke protected method getRecordsBeansList()
        Method getRecordsBeansListMethod = P06_IACC_01_DBTransaction.class
            .getDeclaredMethod("getRecordsBeansList");
        getRecordsBeansListMethod.setAccessible(true);

        // Step 5: Verify exception is thrown and wrapped correctly
        try {
            getRecordsBeansListMethod.invoke(dbTransaction);
            fail("Expected P06_IACC_01_SQLException to be thrown");
        } catch (InvocationTargetException e) {
            Throwable cause = e.getCause();
            assertTrue(cause instanceof P06_IACC_01_SQLException);
            assertEquals("An error occurred while getting records to report Beans list I", cause.getMessage());
        }
    }
}
