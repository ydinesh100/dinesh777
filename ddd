import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.mockito.*;

public class YourClassTest {

    @InjectMocks
    private YourClass yourClass;  // Replace with your actual class name

    @Mock
    private CreGuaranteeFacilityLevel2Service creGuaranteeFacilityLevel2Service;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testExtractParametersAndExecuteBusinessService() throws Exception {
        // Arrange
        String[] args = {"CODE123", "BR001", "2025-05-11"};
        Map<String, Long> ti = new HashMap<>();
        ti.put("key1", 100L);

        // Spy yourClass to mock internal helper methods
        YourClass spyClass = Mockito.spy(yourClass);

        // Mock extractArgumentAsString and extractArgumentAsDate
        doReturn("BR001").when(spyClass).extractArgumentAsString("BR001");
        Date mockDate = new Date();
        doReturn(mockDate).when(spyClass).extractArgumentAsDate("2025-05-11");

        // Mock static method valueOfByCode - since it's static, you need PowerMockito or wrap it.
        // For simplicity, assume it returns a valid enum instance:
        P06_IACC_01_GuaranteeCre2Code creCode = P06_IACC_01_GuaranteeCre2Code.valueOfByCode("CODE123");

        // Act
        Boolean result = spyClass.extractParametersAndExecuteBusinessService(args, ti);

        // Assert
        verify(creGuaranteeFacilityLevel2Service, times(1))
            .produceCreGuaranteeFacilityLevel2(eq(creCode), eq("BR001"), eq(mockDate), eq(ti));
        assertFalse(result);
    }
}

